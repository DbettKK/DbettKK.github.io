<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>动态规划(DP)——背包问题</title>
      <link href="/2019/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="背包问题（简单DP）"><a href="#背包问题（简单DP）" class="headerlink" title="背包问题（简单DP）"></a>背包问题（简单DP）</h2><h3 id="背包Ⅰ-01背包"><a href="#背包Ⅰ-01背包" class="headerlink" title="背包Ⅰ(01背包)"></a>背包Ⅰ(01背包)</h3><h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><hr><p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。 </p><p>时间限制：5000ms，内存限制：65536kb</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n，v，表示物品的数量和背包的容量。(1≤n≤500,1≤v≤30000)</p><p>接下来n行，每行两个整数，表示物品的费用和价值(1≤c<sub>i</sub>,w<sub>i</sub>≤500)</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 6</span><br><span class="line">2 1</span><br><span class="line">3 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[505];</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30005</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,val,vmax=<span class="number">0</span>,i,j,v;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;val))&#123;</span><br><span class="line">vmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].price,&amp;a[i].value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=val;i++)&#123;</span><br><span class="line">b[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(v=val;v&gt;=a[i].price;v--)&#123;</span><br><span class="line">b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b[val]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是直接从DP的角度开始分析这个问题，这是一个01背包问题，我们先假设一些变量，<kbd>b[i,j]</kbd>表示当前背包被占用的容量是<kbd>j</kbd>的情况下，前<kbd>i</kbd>个物品的最佳组合的总价值。<kbd>a[i].price</kbd>和<kbd>a[i].value</kbd>即表示当前商品所需要的容量和当前商品的价值。然后对于当前这个商品有以下两种可能：</p><ul><li>包剩余的容量不够装当前商品，总价值保持不变，不装入该商品，即<kbd>b[i,j]=b[i-1,j]</kbd>;</li><li>有足够容量装该商品，但是装了之后不一定是最佳的价值(因为占用了容量无法保证后面商品是否更好)，需要一个选择，即<kbd>b[i,j]=max(b[i-1,j],b[i-1,j-a[i].price]+a[i].value)</kbd>;</li></ul><p>第二个式子怎么理解呢，如果当前产品装进去了，那么装入之前的状态就是<kbd>b[i-1,j-a[i].price]</kbd>，这样说应该比较好理解了。然后这样我们可以得到一个转移方程如下，当然可以通过初始赋值将其转化为一个方程，代码实现我也放在下方。</p><ul><li>j&gt;=a[i].price: b[i,j]=max(b[i-1,j],b[i-1,j-a[i].price]+a[i].value)</li><li>j&lt;a[i].price: b[i,j]=b[i-1,j]</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=v;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=a[i].price)&#123;</span><br><span class="line">b[i][j]=<span class="built_in">max</span>(b[i<span class="number">-1</span>][j],b[i<span class="number">-1</span>][j-a[i].price]+a[i].value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">b[i][j]=b[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>上文这样确实是能够解决问题，但其实是可以再进行优化的，从二维数组优化到一维数组来解决。因为我们可以知道每一次往二维数组<kbd>b[i,j]</kbd>中写入数据的时候都是从上一次得到的数据来写入的，其实<kbd>i</kbd>就变得没有必要了，因为总是从<kbd>b[i-1,...]</kbd>中获取数据的，因此只需要一维数组即可，但是对于<kbd>j</kbd>来说，则需要一点思考，到底是由顶向下还是由底向上循环。假设考虑由底向上循环，我们考虑模拟取第<kbd>i</kbd>件物品的情况，<kbd>v</kbd>应该是从<kbd>a[i].price</kbd>到<kbd>val</kbd>的，那么在最开始的时候就相当于模拟取了一件了，那么在<kbd>v</kbd>取到<kbd>2*a[i].price</kbd>的时候，就相当于模拟取了两个第<kbd>i</kbd>件了，这明显是与题意不符的(这是后面会说到的完全背包)，所以我们采用由顶向下的循环就不会出现这种问题了。大家如果还不明白可以自己画画图推一推就好了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(v=val;v&gt;=<span class="number">1</span>;v--)&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=a[i].price) b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>b[j] = max(b[j], b[j - a[i].price] + a[i].value)</li></ul><h4 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h4><hr><p>注意初始化。</p><hr><hr><h3 id="背包Ⅱ-完全背包"><a href="#背包Ⅱ-完全背包" class="headerlink" title="背包Ⅱ(完全背包)"></a>背包Ⅱ(完全背包)</h3><h4 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h4><hr><p>有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p><p>时间限制：1000ms，内存限制：65536kb</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n，v，表示物品的数量和背包的容量。(1≤n≤500,1≤v≤30000)</p><p>接下来n行，每行两个整数，表示物品的费用和价值(1≤c<sub>i</sub>,w<sub>i</sub>≤500)</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 6</span><br><span class="line">2 1</span><br><span class="line">3 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[505];</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30005</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,val,vmax=<span class="number">0</span>,i,j,v;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;val))&#123;</span><br><span class="line">vmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].price,&amp;a[i].value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=val;i++)&#123;</span><br><span class="line">b[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(v=a[i].price;v&lt;=val;v++)&#123;</span><br><span class="line">b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b[val]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><hr><p>刚拿到这个题目相信大家很容易从贪心的思想去解决，其实是错误的，因为这个容量是有限的，不可分割的，即使我们算出平均最大价值，但是装入背包时其容量还是不可分割的，所以贪心肯定是没法实现的，其他具体不能用贪心的原因，在此也不再赘述。</p><p>然后我们还是直接从DP的角度开始分析这个问题，这是一个完全背包问题，我们还是先假设一些变量，<kbd>b[i,j]</kbd>表示当前背包被占用的容量是<kbd>j</kbd>的情况下，前<kbd>i</kbd>个物品的最佳组合的总价值。<kbd>a[i].price</kbd>和<kbd>a[i].value</kbd>即表示当前商品所需要的容量和当前商品的价值。然后对于当前这个商品有<kbd>k</kbd>种选择，因为可以选择<kbd>k=0,1,2....</kbd>个当前的物品种数，只要不超过背包总容量即可，所以我们直接给出转移方程：</p><ul><li>b[i,j] = max(b[i-1,j-k*a[i].price]+k*a[i].value)    0&lt;=k*a[i].price&lt;=j</li></ul><p>这里就不贴代码了，因为很明显时间复杂度太大，需要三个循环才能实现，并且还不是那么容易。所以我们直接开始说优化的过程。还是同样先优化为一维数组。因为每次取物品的时候都是可以无限量的取的，所以我们的<kbd>k</kbd>就可以省略了，直接采用两重循环实现，并且要保证每次的量的无限，我们的<kbd>j</kbd>的循环则需要从小到大进行循环，代码如下文所示。为什么呢，在这里举个例子说明以下吧：假设我们取第<kbd>i</kbd>件物品需要取<kbd>j</kbd>件才能满足最大价值的时候，我们的第二重循环运转的时候，<kbd>v</kbd>是从<kbd>a[i].price</kbd>一直循环到<kbd>val</kbd>也就是我们可以在取了一次后，<kbd>b[v]</kbd>更新，这样在<kbd>v</kbd>取到<kbd>2*a[i].price</kbd>的时候就能模拟第二次取，并且此时的<kbd>b[v-a[i].price]</kbd>是之前第一次取后更新了过后的值，这样一直循环下去便实现了模拟取无穷次的过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(v=<span class="number">1</span>;v&lt;=val;v++)&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=a[i].price) b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转移方程-1"><a href="#转移方程-1" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>b[j] = max(b[j], b[j - a[i].price] + a[i].value)</li></ul><h4 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h4><hr><p>注意初始化。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建(hexo-Github)博客</title>
      <link href="/2019/11/10/%E6%90%AD%E5%BB%BAhexo-Github%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/10/%E6%90%AD%E5%BB%BAhexo-Github%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="简要吐槽"><a href="#简要吐槽" class="headerlink" title="简要吐槽"></a>简要吐槽</h3><hr><p>搭博客其实没那么麻烦，但是在网上各类教程的“指导下”，我不知道放弃了多少次又重新试了多少次，大部分还是得靠自己。。。<br>今天在这里给大家简要分享一下我搭博客(hexo-Github)的教程，基于自己很多很多日日夜夜的尝试与摸索后的经验教训，希望对大家有一些帮助。</p><h3 id="直入主题"><a href="#直入主题" class="headerlink" title="直入主题"></a>直入主题</h3><hr><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><hr><p>首先需要三个工具，git、npm、node.js。可以在windows下用命令行(win+R)验证一下(如下)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>只要显示了版本号即证明OK。如果没有的话可以去官网下载安装即可(下方附上官网地址)，并且不要忘了添加环境变量不然还是看不到版本号也没法在命令行里使用这三个命令。</p><p> <a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">git安装地址</a></p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js安装地址</a>(安装这个就包含了npm)</p><h4 id="在Github上搭建仓库"><a href="#在Github上搭建仓库" class="headerlink" title="在Github上搭建仓库"></a>在Github上搭建仓库</h4><hr><p>首先需要注册一个Github账号(需要邮箱)，然后进入后点击右上角的人脸选择<strong>your repositories</strong>(如下图)</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/1.jpg" alt="blog1"></p><hr><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/2.jpg" alt="blog2"></p><p>然后点击右上角绿色的new(如上图)创建一个自己的仓库，进入后就会出现下面这个界面</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/3.jpg" alt="blog1"></p><p>图中打了×的都是可填可不填的，description就是一个简单的描述，public和private就是选择你的项目是否公开，但是private需要花钱，最后那个是添加一个README文件可有可无。但是最重要的是第一个打勾的地方，要搭建博客的话这个仓库名称必须是“username”.github.io，username是你自己的账号名字，如上图我的仓库名称就应该为DbettKK.github.io(!!!!!千万不要写错，不然还得删了重来，本人不知道删过多少次了)，最后点击create repository即可。进去后还要记住那个https后面(如下图)的地址后面还有用。</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/4.jpg" alt="blog4"></p><h4 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h4><hr><h5 id="为啥要配置这个"><a href="#为啥要配置这个" class="headerlink" title="为啥要配置这个"></a>为啥要配置这个</h5><hr><p>因为提交代码是需要GitHub权限的，就相当于每次都需要输入你的邮箱和密码，非常的麻烦和容易出错，有了这个SSH key就能让本地和GitHub服务器连接起来，以上的问题就迎刃而解，非常的方便与安全。</p><h5 id="生成本地SSH-key"><a href="#生成本地SSH-key" class="headerlink" title="生成本地SSH key"></a>生成本地SSH key</h5><hr><p>可以先用以下代码在GIT BASH中查看本机是否已经有SSH存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh</span><br></pre></td></tr></table></figure><p>如果显示No such file……就说明需要重新生成，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>邮箱地址是你自己的GitHub邮箱地址即”[username].github.io”，然后连续敲几次回车即可，这个SSH key就保存在C盘用户目录里的.ssh文件夹里，然后找到该文件夹里的id_rsa.pub文件，用记事本打开并且复制里面的全部内容，在你的GitHub中还是点击右上角的人脸选择settings(这里就不配图了)，然后选择左边的SSH and GPG keys(如下图)，并且选择新增SSH keys，下图中的title可以随意填写，Key就是把你之前复制的粘贴下来点击Add SSH key即可完成，完成后就能看到自己的SSH key了。</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/5.jpg" alt="update5"></p><h5 id="测试成功与否"><a href="#测试成功与否" class="headerlink" title="测试成功与否"></a>测试成功与否</h5><hr><p>在git bash里输入一下命令进行验证是否连接成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>上面那个邮箱地址是不用更改的，就这样写就可以了，如果有需要输入的就输入yes/y就可以了，最后如果看到其中显示<strong><em>Hi …..! You’ve successfully……</em></strong>就说明配置成功了。</p><h5 id="将git与Github绑定"><a href="#将git与Github绑定" class="headerlink" title="将git与Github绑定"></a>将git与Github绑定</h5><hr><p>在git bash中输入以下命令将git与你的GitHub账号和邮箱绑定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;.....&quot;</span><br><span class="line">git config --global user.email &quot;...@...&quot;</span><br></pre></td></tr></table></figure><p>上面引号中的内容都填写你自己的账号用户名和邮箱即可。</p><h4 id="开始配置Hexo"><a href="#开始配置Hexo" class="headerlink" title="开始配置Hexo"></a>开始配置Hexo</h4><hr><h5 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h5><hr><p>Hexo是个静态页面生成、上传的工具。可以将我们写的.md文件生成静态的html网页，然后再将这个网页上传到服务器。使用非常的方便、简洁。下方给一个主页地址，有非常详细的介绍，这里不再赘述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hexo.io/zh-cn/</span><br></pre></td></tr></table></figure><h5 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h5><hr><p>Hexo的安装不需要去官网，直接再git bush中就能完成，在任意地方打开git bash，然后输入一下命令进行安装，可能需要等一会，这个过程不要去乱按键盘即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>等到有版本号出来的时候就说明安装完成了，然后进行下一步，初始化hexo，现在自己找一个位置新建一个文件夹hexo(什么名字都可以，我写hexo方便下文描述)，这也就是你之后写博客、存放代码的位置，所以选择还是慎重一些。然后进去这个文件夹，右键git bash here打开git bash然后输入一下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这个过程还是不短，还是耐心等待一会啦，最后初始化完之后，这个文件夹里应该会有以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">public # 这个里面是存放源码的地方，一般用不到。</span><br><span class="line">scaffolds</span><br><span class="line">source # 这个里面会有一个_posts，_posts里就是你写.md文档的地方，那里面可能会有默认的一个.md。</span><br><span class="line">themes # 这个是主题，最开始里面应该都只有一个landscape，有需要可以去官网下载。</span><br><span class="line">.gitignore</span><br><span class="line">_config.yml # 这个是配置文件，很多操作都需要对它进行编辑修改。</span><br><span class="line">db.json # 这个及后面的暂时不介绍，暂时用不到。</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>然后就可以查看自己博客的初始状态啦，当然只能在本地服务器查看，因为还没有上传到github。用以下命令来查看，还是在刚刚下载好的地方用git bash，后文若无特殊说明，都是在此目录下打开git bash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 这个命令用于将source/_posts/里的.md文件生成到自己的博客上（本地）</span><br><span class="line">hexo s # 这个命令用于启动本地的服务器，使用这个命令就可以开始访问啦</span><br></pre></td></tr></table></figure><p>输入命令hexo s命令后，应该出现以下内容，此时就可以在本地网站里输入下方的网址进行访问啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>进入后应该能看到自己博客最初始的状态啦，里面应该只有一个内容就是hello world，不过之后可以自己添加啦。</p><h5 id="Hexo一些配置"><a href="#Hexo一些配置" class="headerlink" title="Hexo一些配置"></a>Hexo一些配置</h5><hr><p>因为要上传到github，所以还需要配置一些东西才行。首先是在_config,yml里修改，首先用记事本或者其他编辑软件打开(个人比较推荐editplus)，在其最后有一个deploy的部分进行修改。修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:[username]/[username].github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>其中的username还是你自己的用户名。然后还需要在git bush中安装一个小插件，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后就可以开始上传啦，使用以下命令进行上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo d # 这个指令用于上传</span><br><span class="line">也可以两个合为 hexo g -d使用</span><br></pre></td></tr></table></figure><p>然后在网址里输入[username].github.io就能访问自己的博客啦，当然别人也同样可以啦。</p><h5 id="配置一下自己的博客"><a href="#配置一下自己的博客" class="headerlink" title="配置一下自己的博客"></a>配置一下自己的博客</h5><hr><p>虽然已经可以进行线上访问了，但是博客还是需要名字的呀，不然大家都是hexo了。修改方式还是非常简单的，首先找到根目录下的_config.yml文件还是用编辑软件打开，打开后可以看到一个# Site 的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo # 就是博客的大标题啦</span><br><span class="line">subtitle: &apos;&apos; # 副标题</span><br><span class="line">description: &apos;&apos; # 简单描述</span><br><span class="line">keywords: &apos;&apos; </span><br><span class="line">author: &apos;&apos; # 作者名，在文末会看到哦</span><br><span class="line">language: en # 语言，这里是英文，中文是zh-CN</span><br><span class="line">timezone: &apos;&apos;</span><br></pre></td></tr></table></figure><p>然后对其中的内容进行修改就可以啦，修改的时候记得去掉’ ‘哦</p><h5 id="具体怎么写博客呢"><a href="#具体怎么写博客呢" class="headerlink" title="具体怎么写博客呢"></a>具体怎么写博客呢</h5><hr><p>具体怎么写呢，非常简单，就是写.md文件就可以了，使用以下命令来新建一个.md 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;你喜欢的名字都可以&quot;</span><br></pre></td></tr></table></figure><p>或者也可以直接在source/_posts/目录下新建.md文档，效果是一样的。不过需要在里面添加一下title等东西，可以参考用命令生成的.md文档。然后开始写就可以啦，写完还是同样的方式上传即可。</p><h5 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h5><hr><p>当然大家都希望自己的博客功能多样，比如访客量、漂亮的背景图、鼠标点击效果、不同的主题等等，这些我在这里就不一一介绍啦，大家可以去网上看教程，还是非常丰富的。我在这里就给大家简单分享一下如何在博客里方便的插入图片的方法吧。</p><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><hr><p>这个方法是在网上看到的，虽然我没有成功，但还是分享给大家吧。</p><p>首先在_config.yml里找到# Writting大类里的post_asset_folder，将其置为true。</p><p>然后在根目录里运行cmd并运行以下命令，下载一个小插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image –save</span><br></pre></td></tr></table></figure><p>安装完成后，在使用hexo n ”…“创建新博文时，就有一个同样标题的文件夹，把图片放进去即可，然后在.md文档里插入图片时就如下写，方括号里是图片不展示时显示的文字，2是代表你放图片的文件夹名，1是代表图片名字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![...](2/1.jpg)</span><br></pre></td></tr></table></figure><p>虽然本人没有成功，希望大家能够成功啦。</p><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><hr><p>这个方法非常的好用与方便，也不怕掉链子。</p><p>就是使用github来保存自己的图片，然后在.md里引用时就用github网址即可。具体操作如下。</p><p>首先找一个文件夹，里面放你本次.md里需要的图片，并且在github上新建一个专门用来存放图片的仓库。然后在这个文件夹所在的目录使用git bush将这个文件夹push到你的图片仓库里，具体操作如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init # 初始化</span><br><span class="line">git add . # 将该目录所有文件添加，注意这个&quot;.&quot;，也可以指定添加，git add 文件名</span><br><span class="line">git commit -m &quot;...&quot; # 双引号内即你给这个文件夹的备注，可以随意填写，不要省略双引号</span><br><span class="line">git remote add origin 仓库地址 # 后面填写你该仓库的地址。</span><br><span class="line">git push -u origin master # 第一次push时加上-u，后面不用。</span><br></pre></td></tr></table></figure><p>然后完成后，在自己的仓库里找到相应的图片，点击download按钮，会进去一个只有图片的网页，然后右键图片点击复制地址，再在你的.md文档里插入图片时写上网址即可，非常的方便，不用担心本地文件丢失等等问题，希望对大家有帮助。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>终于写完了这篇博客，希望对大家有所帮助呀，当然如果有什么问题也敬请指出来，我的邮箱会留在下方，欢迎随时联系，同时希望大家都能拥有属于自己的博客呀！！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">邮箱：394739138@qq.com</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><hr><p> <a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划(DP)——股票问题</title>
      <link href="/2019/11/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="股票问题（简单DP）"><a href="#股票问题（简单DP）" class="headerlink" title="股票问题（简单DP）"></a>股票问题（简单DP）</h2><h3 id="股票Ⅰ"><a href="#股票Ⅰ" class="headerlink" title="股票Ⅰ"></a>股票Ⅰ</h3><h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>如果只允许您最多完成一笔交易（即买入和卖出一股股票），请设计一种算法以找到最大的利润(卖出的价格-买入的价格)。</p><p>请注意，您不能在买股票之前卖出股票。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行一个数n，(1≤n≤10<sup>5</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy,sell;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">buy1=<span class="number">-1000000001</span>,sell1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy=<span class="built_in">max</span>(buy,-a[i]);</span><br><span class="line">sell=<span class="built_in">max</span>(sell,buy+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><hr><p>我们直接从DP的角度开始分析这个问题，首先看清题意，只能买入和卖出一股股票，并且卖出必须在买入之后完成。那么我们每一天的选择就是买或者不买或者卖，也就是有两种状态买<kbd>buy</kbd>和卖<kbd>sell</kbd>，而买入股票对应的就是花钱，我们最开始的钱为0，买入后就变会损失也就是<kbd>-a[i]</kbd>，并且当天的总收益就为<kbd>-a[i]</kbd>，也就是<kbd>buy</kbd>的值，卖出后则为收益也就是<kbd>+a[i]</kbd>，并且当天的总收益就为<kbd>buy+a[i]</kbd>。所以我们就考虑当天买和之前买了(即与之前<kbd>buy</kbd>里的值进行比较)哪个收益更高，同时当天卖和之前已经卖了(即与之前<kbd>sell</kbd>里的值进行比较)哪个收益更高即可完成。</p><h4 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>buy = max(buy, -a[i])</li><li>sell = max(sell, buy+a[i])</li></ul><h4 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h4><hr><p>首先观察数据范围发现最终结果是可能超int的，所以对<kbd>buy</kbd>和<kbd>sell</kbd>的定义应为long long，然后是<kbd>buy</kbd>的初始值应该设置为负值而不是0，因为第一次买入的时候此时总收益就为负值。</p><hr><hr><h3 id="股票Ⅱ"><a href="#股票Ⅱ" class="headerlink" title="股票Ⅱ"></a>股票Ⅱ</h3><hr><h4 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>设计算法以找到最大的利润。您可以根据需要完成尽可能多的交易。</p><p>请注意，无法同时进行多项交易（即必须先出售股票才能再次购买）</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行一个数n，(1≤n≤10<sup>5</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><hr><p> 每组数据一行一个数 </p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy,sell;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">buy=<span class="number">-1000000001</span>,sell=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy=<span class="built_in">max</span>(buy,sell-a[i]);</span><br><span class="line">sell=<span class="built_in">max</span>(sell,buy+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><hr><p>我们直接从上一问的思路继续分析，本题是要求利润最大并且可以完成任意多的交易(即可以买了又卖卖了再买)，那我们还是同样分析，买了之后当天的总收益为<kbd>sell-a[i]</kbd>(因为之前是处于卖了之后的状态所以用<kbd>sell</kbd>来减)，然后卖了之后当天的总收益为<kbd>buy-a[i]</kbd>(因为之前是处于买了之后的状态所以用<kbd>buy</kbd>来减)，然后我们考虑每一天的情况即可。</p><h4 id="转移方程-1"><a href="#转移方程-1" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li><p>buy = max(buy, sell-a[i])</p></li><li><p>sell = max(sell, buy+a[i])</p></li></ul><h4 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h4><hr><p>还是一样需要注意数据类型的选择和buy的初始赋值，然后是sell最初值置0才能保证第一次买后总收益的正确性。</p><hr><hr><h3 id="股票Ⅲ"><a href="#股票Ⅲ" class="headerlink" title="股票Ⅲ"></a>股票Ⅲ</h3><hr><h4 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>设计算法以找到最大的利润。您最多可以完成两次交易。</p><p>请注意，无法同时进行多项交易（即必须先出售股票才能再次购买）</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行一个数n，(1≤n≤10<sup>5</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><hr><p> 每组数据一行一个数 </p><h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy1,sell1,buy2,sell2;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">buy1=<span class="number">-1000000001</span>,sell1=<span class="number">0</span>,buy2=<span class="number">-1000000001</span>,sell2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy1=<span class="built_in">max</span>(buy1,-a[i]);</span><br><span class="line">sell1=<span class="built_in">max</span>(sell1,buy1+a[i]);</span><br><span class="line">buy2=<span class="built_in">max</span>(buy2,sell1-a[i]);</span><br><span class="line">sell2=<span class="built_in">max</span>(sell2,buy2+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是延续思路继续分析，本题是要求利润最大并且只能完成两次交易，那我们还是同样分析，因为有两次交易，所以需要4个变量来存，第一次买了之后当天的总收益为<kbd>-a[i]</kbd>(因为相当于之前没有卖出)，然后第一次卖了之后当天的总收益为<kbd>buy1-a[i]</kbd>(因为之前是处于第一次买了之后的状态所以用<kbd>buy1</kbd>来减)，然后第二次买了之后当天的总收益为<kbd>sell1-a[i]</kbd>(因为相当于之前有一次卖出)，然后第二次卖了之后当天的总收益为<kbd>buy2-a[i]</kbd>(因为之前是处于第二次买了之后的状态所以用<kbd>buy2</kbd>来减)，然后我们考虑每一天的情况即可。</p><h4 id="转移方程-2"><a href="#转移方程-2" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>buy1=max(buy1,-a[i]);</li><li>sell1=max(sell1,buy1+a[i]);    </li><li>buy2=max(buy2,sell1-a[i]);</li><li>sell2=max(sell2,buy2+a[i]);</li></ul><h4 id="HINT-2"><a href="#HINT-2" class="headerlink" title="HINT"></a>HINT</h4><hr><p>还是一样需要注意数据类型的选择和sell1、buy1、buy2的初始赋值，然后是sell1最初值置0才能保证第一次买后总收益的正确性。然后是对方程的理解，是怎么样实现的。</p><hr><hr><h3 id="股票Ⅳ"><a href="#股票Ⅳ" class="headerlink" title="股票Ⅳ"></a>股票Ⅳ</h3><hr><h4 id="题面-3"><a href="#题面-3" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>设计算法以找到最大的利润。您最多可以完成k次交易。</p><p>请注意，无法同时进行多项交易（即必须先出售股票才能再次购买）</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n,k，(1≤n,k≤10<sup>3</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><hr><p> 每组数据一行一个数 </p><h4 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy[<span class="number">1005</span>],sell[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">buy[i]=<span class="number">-1000000001</span>;</span><br><span class="line">sell[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy[<span class="number">1</span>]=<span class="built_in">max</span>(buy[<span class="number">1</span>],-a[i]);</span><br><span class="line">sell[<span class="number">1</span>]=<span class="built_in">max</span>(sell[<span class="number">1</span>],buy[<span class="number">1</span>]+a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=k;j++)&#123;</span><br><span class="line">buy[j]=<span class="built_in">max</span>(buy[j],sell[j<span class="number">-1</span>]-a[i]);</span><br><span class="line">sell[j]=<span class="built_in">max</span>(sell[j],buy[j]+a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是相同思路继续分析，本题是要求利润最大并且只能完成k次交易，因为有k次交易，所以需要2k个变量来存，即用两个数组来存即可，第一次买了之后当天的总收益为<kbd>-a[i]</kbd>(因为相当于之前没有卖出)，然后第一次卖了之后当天的总收益为<kbd>buy[1]-a[i]</kbd>(因为之前是处于第一次买了之后的状态所以用<kbd>buy[1]</kbd>来减)，然后第二次买了之后当天的总收益为<kbd>sell[1]-a[i]</kbd>(因为相当于之前有一次卖出)，然后第二次卖了之后当天的总收益为<kbd>buy[2]-a[i]</kbd>(因为之前是处于第二次买了之后的状态所以用<kbd>buy[2]</kbd>]来减)，然后用一个从2-k的循环来实现此过程即可。</p><h4 id="转移方程-3"><a href="#转移方程-3" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>buy[j]=max(buy[j], sell[j-1]-a[i])</li><li>sell[j]=max(sell[j], buy[j]+a[i])</li></ul><h4 id="HINT-3"><a href="#HINT-3" class="headerlink" title="HINT"></a>HINT</h4><hr><p>还是一样需要注意数据类型的选择和buy[],sell[]的初始赋值，然后是上文的AC代码的循环其实不用把buy[1]、sell[1]单独拿出来讨论的，只是更方便理解。</p><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><hr><p><a href="accoding.cn">北航OJ</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>First Time!!!</title>
      <link href="/2019/11/09/hello-world/"/>
      <url>/2019/11/09/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr><p>作为一个大懒鬼以及大菜鸡，今天终于搭好了自己的第一个博客，<strong>太不容易了吧</strong>，之后肯定也会一直更新的啦，主要还是关于算法以及硬件基础方面的东西啦，当然要是我觉得有用的东西，我也会写在博客里供大家参考，希望对大家有用哦；不过主要本人水平实在有限，大家就当看着玩玩啦，请大家多多指教哦！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
