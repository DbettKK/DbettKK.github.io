<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2020/07/03/JavaWeb/"/>
      <url>/2020/07/03/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="Day-01-内容"><a href="#Day-01-内容" class="headerlink" title="Day 01 内容"></a>Day 01 内容</h2><p><em>04/07/2020</em> </p><pre><code>* Junit单元测试* 反射* 注解</code></pre><h3 id="Junit单元测试："><a href="#Junit单元测试：" class="headerlink" title="Junit单元测试："></a>Junit单元测试：</h3><pre><code>* 测试分类：    * 黑盒测试：不需要写代码，给输入值，看程序能否输出期望值。            * 白盒测试：需要写代码。关注程序具体的执行流程。* Junit使用：白盒测试    * 步骤：        1. 定义一个测试类(测试用例)            * 建议：                * 测试类名：被测试的类名Test    calculatorTest                * 包名：xxx.xxx.xxx.test        2. 定义测试方法：可以独立运行            * 建议：                * 方法名：test测试的方法名    testadd                * 返回值：void                * 参数列表：空参        3. 给方法加@Test        4. 导入Junit依赖环境    * 判定结果：        * 红色：失败        * 绿色：成功        * 一般我们会使用断言操作来处理结果：            * Assert.assertEquals(期望的结果, 运算的结果);    * 补充        * @before：            * 修饰的方法会在测试方法之前被自动执行        * @after：            * 修饰的方法会在测试方法执行之后被自动执行</code></pre><h3 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h3><pre><code>* 框架：半成品软件。可以在框架的基础上进行软件开发，简化编码* 反射：将类的各个组成部分封装为其他对象，这就是反射机制    * 好处：        1. 可以在程序运行过程中，操作这些对象。        2. 可以解耦，提高程序的可扩展性* 获取Class对象的方式：    1. Class.forName(&quot;全类名&quot;); 将字节码文件加载进内存，返回Class对象        * 多用于配置文件，将类名定义在配置文件中。读取文件，加载类    2. 类名.class; 通过类名的属性class来获取        * 多用于参数的传递    3. 对象.getClass(); getClass()方法在Object类中定义        * 多用于对象的获取字节码的方式* 结论：同一个字节码文件(*.class)在一次程序的运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。* Class对象功能：    * 获取功能：        1. 获取成员变量们            * Field[] getFileds()            * Filed getFiled(String name)            * Field[] getDeclaredFileds()            * Filed getDeclaredFiled(String name)        2. 获取构造方法们            * Constructor&lt;?&gt;[] getConstructors()            * Constructor\&lt;?\&gt; getConstructor(类\&lt;?\&gt;... parameterTypes)            * Constructor&lt;?&gt;[] getDeclaredConstructors()            * Constructor\&lt;?\&gt; getDeclaredConstructor(类\&lt;?\&gt;... parameterTypes)        3. 获取成员方法们            * Method[] getMethods()            * Method getMethod(String name)            * Method[] getDeclaredMethods()            * Method getDeclaredMethod(String name)        4. 获取类名            * String getName()* Field：成员变量    * 操作：        1. 设置值            * void set(Object obj, Object value)        2. 获取值            * get(Object obj)        3. 忽略访问权限修饰符的安全检查            * setAccessible(true)：暴力反射* Constructor：构造方法    * 创建对象：        * T newInstance(Object... initargs)        * 如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法* Method：方法对象    * 执行方法：        * Object invoke(Object obj, Object... args)    * 获取方法名称：        * String getName()获取方法名* 案例：    * 需求：写一个&quot;框架&quot;，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法。    * 实现：        1. 配置文件        2. 反射    * 步骤：        1. 将需要创建的对象的全类名和需要执行的方法定义在配置文件中        2. 在程序中去加载读取配置文件        3. 使用反射技术来加载类文件进内存        4. 创建对象        5. 执行方法</code></pre><h3 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h3><pre><code>* 概念：说明程序的。给计算机看的。* 注释：用文字描述程序。给程序员看的。* 概念描述：    * jdk1.5之后的新特性    * 说明程序的    * 使用注解：@注解名称* 作用分类    * 编写文档：生成文档【doc文档】    * 代码分析：通过注解对代码进行分析【使用反射】    * 编译检查：让编辑器能实现基本的编译检查【@Override】* JDK中预定义的一些注解    * @Override：检测被该注解标注的方法是否是继承自父类(接口)的    * @Deprecated：将该注解标注的内容，表示已过时    * @SuppressWarnings：压制警告        * 一般传递参数all    @SuppressWarnings(&quot;all&quot;)* 自定义注解    * 格式：        * 元注解        * public @interface 注解名称() {            属性列表;        }    * 本质：注解本质上就是一个接口，该接口默认继承Annotation        * public interface 注解名称 extends java.lang.annotation.Annotation {}    * 属性：接口中的抽象方法        * 要求：            1. 属性的返回值类型有下列取值：                * 基本数据类型                * String                * 枚举                * 注解                * 以上类型的数组            2. 定义了属性，在使用时需要给属性赋值                1. 如果定义属性时，使用default关键字给属性默认初始值，则使用注解时可以不进行属性的赋值                2. 如果只有一个属性需要赋值，并且属性的名称为value，则value可以省略，直接定义值即可【@SuppressWarnings】                3. 数组赋值时，值使用{}包裹，如果数组中只有一个值，则{}可以省略* 元注解：用于描述注解的注解    * @Target：描述注解能够作用的位置        * ElementType取值：        * TYPE：可以作用于类上        * METHOD：可以作用于方法上        * FIELD：可以作用于成员变量上    * @Retention：描述注解被保留的一个阶段        * @Rentention(RententionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到    * @Documented：描述注解是否被抽取到api文档中    * @Inherited：描述注解是否被子类继承* 在程序中使用(解析)注解：获取注解中定义的属性值    1. 获取注解定义的位置的对象    【Class，Method，Field】    2. 获取指定的注解        * getAnnotation(Class)        * public class ProImpl implements Pro{              public String className(){                  return &quot;day01.annotation.Demo1&quot;;              }              public String methodName(){                  return &quot;show&quot;;              }          }    3. 调用注解中的抽象方法，获取配置的属性值* 小结    1. 以后大多数时候，我们会使用注解，而不是自定义注解    2. 注解给谁用？        1. 编译器        2. 给解析程序用    3. 注解不是程序的一部分，可以理解为注解就是一个标签</code></pre><hr><h2 id="Day-02-内容"><a href="#Day-02-内容" class="headerlink" title="Day 02 内容"></a>Day 02 内容</h2><p><em>05/07/2020</em></p><pre><code>* 数据库的基本概念* MySQL数据库软件    * 安装    * 卸载    * 配置* SQL</code></pre><h3 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h3><pre><code>1. 数据库的英文单词：DataBase 简称 ： DB2. 什么是数据库？    * 用于存储和管理数据的仓库。3. 数据库的特点：    1. 持久化存储数据的。其实数据库就是一个文件系统    2. 方便存储和管理数据    3. 使用了统一的方式来操作数据库 -- SQL4. 常见的数据库软件        * 参见《MySQL基础.pdf》</code></pre><h3 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h3><pre><code>1. 安装    * 参见《MySQL基础.pdf》2. 卸载    1. 去mysql的安装目录找到my.ini文件        * 复制 datadir=&quot;C:/ProgramData/MySQL/MySQL Server 5.5/Data&quot;    2. 卸载MySQL    3. 删除C:/ProgramData目录下的MySQL文件夹。3. 配置    * MySQL服务启动        1. 手动        2. cmd--&gt; services.msc 打开服务的窗口        3. 使用管理员打开cmd            * net start mysql ：启动mysql的服务            * net stop mysql ：关闭mysql的服务    * MySQL登录        1. mysql -uroot -p【password】        2. mysql -h【ip】 -uroot -p【连接目标的password】        3. mysql --host=【ip】 --user=root --password=【密码】    * MySQL退出        1. exit        2. quit    * MySQL目录结构        1. MySQL安装目录            * 配置文件 my.ini        2. MySQL数据目录            * 几个概念                * 数据库：文件夹                * 表：文件                * 数据：数据</code></pre><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><pre><code>1. 什么是SQL?    Structured Query Language：结构化编程语言    其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”2. SQL通用语法    1. SQL语句可以单行或多行书写，以分号结尾。    2. 可使用空格和缩进来增强语句的可读性。    3. MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。    4. 3种注释        * 单行注释：-- 注释内容 或 # 注释内容(mysql 特有)        * 多行注释：/* 注释 */3. SQL分类    1) DDL(Data Definition Language)数据定义语言用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等    2) DML(Data Manipulation Language)数据操作语言用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等    3) DQL(Data Query Language)数据查询语言用来查询数据库中表的记录(数据)。关键字：select, where 等    4) DCL(Data Control Language)数据控制语言(了解)用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</code></pre><h3 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h3><pre><code>1. 操作数据库：CRUD    1. C(Create):创建        * 创建数据库：            * create database 数据库名称;        * 创建数据库，判断不存在，再创建：            * create database if not exists 数据库名称;        * 创建数据库，并指定字符集            * create database 数据库名称 character set 字符集名;        * 练习： 创建db4数据库，判断是否存在，并制定字符集为gbk            * create database if not exists db4 character set gbk;    2. R(Retrieve)：查询        * 查询所有数据库的名称:            * show databases;        * 查询某个数据库的字符集:查询某个数据库的创建语句            * show create database 数据库名称;    3. U(Update):修改        * 修改数据库的字符集            * alter database 数据库名称 character set 字符集名称;    4. D(Delete):删除        * 删除数据库            * drop database 数据库名称;        * 判断数据库存在，存在再删除            * drop database if exists 数据库名称;    5. 使用数据库        * 查询当前正在使用的数据库名称            * select database();        * 使用数据库            * use 数据库名称;2. 操作表    1. C(Create):创建        1. 语法：            create table 表名(                列名1 数据类型1,                列名2 数据类型2,                ....                列名n 数据类型n            );            * 注意：最后一列，不需要加逗号（,）            * 数据库类型：                 1. int：整数类型                    * age int,                2. double:小数类型                    * score double(5,2)                3. date:日期，只包含年月日，yyyy-MM-dd                4. datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss                5. timestamp:时间戳类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss                        * 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值                6. varchar：字符串                    * name varchar(20):姓名最大20个字符                    * zhangsan 8个字符  张三 2个字符         * 创建表：            create table student(                id int,                name varchar(32),                age int ,                score double(4,1),                birthday date,                insert_time timestamp            );        * 复制表：            * create table 表名 like 被复制的表名;              2. R(Retrieve)：查询        * 查询某个数据库中所有的表名称            * show tables;        * 查询表结构            * desc 表名;    3. U(Update):修改        1. 修改表名            alter table 表名 rename to 新的表名;        2. 修改表的字符集            alter table 表名 character set 字符集名称;        3. 添加一列            alter table 表名 add 列名 数据类型;        4. 修改列名称 类型            alter table 表名 change 列名 新列别 新数据类型;            alter table 表名 modify 列名 新数据类型;        5. 删除列            alter table 表名 drop 列名;    4. D(Delete):删除        * drop table 表名;        * drop table if exists 表名 ;                    </code></pre><ul><li>客户端图形化工具：SQLYog</li></ul><pre><code>1. 添加数据：    * 语法：        * insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);    * 注意：        1. 列名和值要一一对应。        2. 如果表名后，不定义列名，则默认给所有列添加值            insert into 表名 values(值1,值2,...值n);        3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来2. 删除数据：    * 语法：        * delete from 表名 [where 条件]    * 注意：        1. 如果不加条件，则删除表中所有记录。        2. 如果要删除所有记录            1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作            2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。3. 修改数据：    * 语法：        * update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];    * 注意：        1. 如果不加任何条件，则会将表中所有记录全部修改。</code></pre><hr><h2 id="Day-03-内容"><a href="#Day-03-内容" class="headerlink" title="Day 03 内容"></a>Day 03 内容</h2><p><em>06/07/2020</em></p><pre><code>1. DQL:查询语句    1. 排序查询    2. 聚合函数    3. 分组查询    4. 分页查询2. 约束3. 多表之间的关系4. 范式5. 数据库的备份和还原</code></pre><h3 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL:查询语句"></a>DQL:查询语句</h3><h3 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h3><pre><code>* select * from 表名;1. 语法：    select         字段列表    from        表名列表    where        条件列表    group by        分组字段    having        分组之后的条件    order by        排序    limit        分页限定2. 基础查询    1. 多个字段的查询        select 字段名1，字段名2... from 表名;        * 注意：            * 如果查询所有字段，则可以使用*来替代字段列表。    2. 去除重复：        * distinct    3. 计算列        * 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）        * ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null            * 表达式1：哪个字段需要判断是否为null            * 表达式2：如果该字段为null后的替换值。    4. 起别名：        * as：as也可以省略3. 条件查询    1. where子句后跟条件    2. 运算符        * &gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;        * BETWEEN...AND          * IN( 集合)         * LIKE：模糊查询            * 占位符：                * _:单个任意字符                * %：多个任意字符        * IS NULL          * and  或 &amp;&amp;        * or  或 ||         * not  或 !            -- 查询年龄大于20岁            SELECT * FROM student WHERE age &gt; 20;            SELECT * FROM student WHERE age &gt;= 20;            -- 查询年龄等于20岁            SELECT * FROM student WHERE age = 20;            -- 查询年龄不等于20岁            SELECT * FROM student WHERE age != 20;            SELECT * FROM student WHERE age &lt;&gt; 20;            -- 查询年龄大于等于20 小于等于30            SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;            SELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;            SELECT * FROM student WHERE age BETWEEN 20 AND 30;            -- 查询年龄22岁，18岁，25岁的信息            SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25            SELECT * FROM student WHERE age IN (22,18,25);            -- 查询英语成绩为null            SELECT * FROM student WHERE english = NULL; -- 不对的。null值不能使用 = （!=） 判断            SELECT * FROM student WHERE english IS NULL;            -- 查询英语成绩不为null            SELECT * FROM student WHERE english  IS NOT NULL;            -- 查询姓马的有哪些？ like            SELECT * FROM student WHERE NAME LIKE &apos;马%&apos;;            -- 查询姓名第二个字是化的人            SELECT * FROM student WHERE NAME LIKE &quot;_化%&quot;;            -- 查询姓名是3个字的人            SELECT * FROM student WHERE NAME LIKE &apos;___&apos;;            -- 查询姓名中包含德的人            SELECT * FROM student WHERE NAME LIKE &apos;%德%&apos;;</code></pre><p>中间的部分内容在这里没有给出，因为本人这部分内容已经掌握，所以未给出。</p><h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><pre><code>1. 多表查询2. 事务3. DCL</code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><pre><code>* 查询语法：    select        列名列表    from        表名列表    where....* 准备sql    # 创建部门表    CREATE TABLE dept(        id INT PRIMARY KEY AUTO_INCREMENT,        NAME VARCHAR(20)    );    INSERT INTO dept (NAME) VALUES (&apos;开发部&apos;),(&apos;市场部&apos;),(&apos;财务部&apos;);    # 创建员工表    CREATE TABLE emp (        id INT PRIMARY KEY AUTO_INCREMENT,        NAME VARCHAR(10),        gender CHAR(1), -- 性别        salary DOUBLE, -- 工资        join_date DATE, -- 入职日期        dept_id INT,        FOREIGN KEY (dept_id) REFERENCES dept(id) -- 外键，关联部门表(部门表的主键)    );    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&apos;孙悟空&apos;,&apos;男&apos;,7200,&apos;2013-02-24&apos;,1);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&apos;猪八戒&apos;,&apos;男&apos;,3600,&apos;2010-12-02&apos;,2);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&apos;唐僧&apos;,&apos;男&apos;,9000,&apos;2008-08-08&apos;,2);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&apos;白骨精&apos;,&apos;女&apos;,5000,&apos;2015-10-07&apos;,3);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&apos;蜘蛛精&apos;,&apos;女&apos;,4500,&apos;2011-03-14&apos;,1);* 笛卡尔积：    * 有两个集合A,B .取这两个集合的所有组成情况。    * 要完成多表查询，需要消除无用的数据* 多表查询的分类：    1. 内连接查询：        1. 隐式内连接：使用where条件消除无用数据            * 例子：            -- 查询所有员工信息和对应的部门信息            SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`;            -- 查询员工表的名称，性别。部门表的名称            SELECT emp.name,emp.gender,dept.name FROM emp,dept WHERE emp.`dept_id` = dept.`id`;            SELECT                 t1.name, -- 员工表的姓名                t1.gender,-- 员工表的性别                t2.name -- 部门表的名称            FROM                emp t1,                dept t2            WHERE                 t1.`dept_id` = t2.`id`;        2. 显式内连接：            * 语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件            * 例如：                * SELECT * FROM emp INNER JOIN dept ON emp.`dept_id` = dept.`id`;                    * SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`;            3. 内连接查询：            1. 从哪些表中查询数据            2. 条件是什么            3. 查询哪些字段    2. 外链接查询：        1. 左外连接：            * 语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；            * 查询的是左表所有数据以及其交集部分。            * 例子：                -- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称                SELECT     t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON t1.`dept_id` = t2.`id`;        2. 右外连接：            * 语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；            * 查询的是右表所有数据以及其交集部分。            * 例子：                SELECT     * FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`;    3. 子查询：        * 概念：查询中嵌套查询，称嵌套查询为子查询。            -- 查询工资最高的员工信息            -- 1 查询最高的工资是多少 9000            SELECT MAX(salary) FROM emp;            -- 2 查询员工信息，并且工资等于9000的            SELECT * FROM emp WHERE emp.`salary` = 9000;            -- 一条sql就完成这个操作。子查询            SELECT * FROM emp WHERE emp.`salary` = (SELECT MAX(salary) FROM emp);        * 子查询不同情况            1. 子查询的结果是单行单列的：                * 子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =                *                 -- 查询员工工资小于平均工资的人                SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);            2. 子查询的结果是多行单列的：                * 子查询可以作为条件，使用运算符in来判断                -- 查询&apos;财务部&apos;和&apos;市场部&apos;所有的员工信息                SELECT id FROM dept WHERE NAME = &apos;财务部&apos; OR NAME = &apos;市场部&apos;;                SELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;                -- 子查询                SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = &apos;财务部&apos; OR NAME = &apos;市场部&apos;);            3. 子查询的结果是多行多列的：                * 子查询可以作为一张虚拟表参与查询                -- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息                -- 子查询                SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.`join_date` &gt; &apos;2011-11-11&apos;) t2                WHERE t1.id = t2.dept_id;                -- 普通内连接                SELECT * FROM emp t1,dept t2 WHERE t1.`dept_id` = t2.`id` AND t1.`join_date` &gt;  &apos;2011-11-11&apos;    * 多表查询练习            -- 部门表            CREATE TABLE dept (              id INT PRIMARY KEY PRIMARY KEY, -- 部门id              dname VARCHAR(50), -- 部门名称              loc VARCHAR(50) -- 部门所在地            );            -- 添加4个部门            INSERT INTO dept(id,dname,loc) VALUES             (10,&apos;教研部&apos;,&apos;北京&apos;),            (20,&apos;学工部&apos;,&apos;上海&apos;),            (30,&apos;销售部&apos;,&apos;广州&apos;),            (40,&apos;财务部&apos;,&apos;深圳&apos;);            -- 职务表，职务名称，职务描述            CREATE TABLE job (              id INT PRIMARY KEY,              jname VARCHAR(20),              description VARCHAR(50)            );            -- 添加4个职务            INSERT INTO job (id, jname, description) VALUES            (1, &apos;董事长&apos;, &apos;管理整个公司，接单&apos;),            (2, &apos;经理&apos;, &apos;管理部门员工&apos;),            (3, &apos;销售员&apos;, &apos;向客人推销产品&apos;),            (4, &apos;文员&apos;, &apos;使用办公软件&apos;);            -- 员工表            CREATE TABLE emp (              id INT PRIMARY KEY, -- 员工id              ename VARCHAR(50), -- 员工姓名              job_id INT, -- 职务id              mgr INT , -- 上级领导              joindate DATE, -- 入职日期              salary DECIMAL(7,2), -- 工资              bonus DECIMAL(7,2), -- 奖金              dept_id INT, -- 所在部门编号              CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),              CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)            );            -- 添加员工            INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES             (1001,&apos;孙悟空&apos;,4,1004,&apos;2000-12-17&apos;,&apos;8000.00&apos;,NULL,20),            (1002,&apos;卢俊义&apos;,3,1006,&apos;2001-02-20&apos;,&apos;16000.00&apos;,&apos;3000.00&apos;,30),            (1003,&apos;林冲&apos;,3,1006,&apos;2001-02-22&apos;,&apos;12500.00&apos;,&apos;5000.00&apos;,30),            (1004,&apos;唐僧&apos;,2,1009,&apos;2001-04-02&apos;,&apos;29750.00&apos;,NULL,20),            (1005,&apos;李逵&apos;,4,1006,&apos;2001-09-28&apos;,&apos;12500.00&apos;,&apos;14000.00&apos;,30),            (1006,&apos;宋江&apos;,2,1009,&apos;2001-05-01&apos;,&apos;28500.00&apos;,NULL,30),            (1007,&apos;刘备&apos;,2,1009,&apos;2001-09-01&apos;,&apos;24500.00&apos;,NULL,10),            (1008,&apos;猪八戒&apos;,4,1004,&apos;2007-04-19&apos;,&apos;30000.00&apos;,NULL,20),            (1009,&apos;罗贯中&apos;,1,NULL,&apos;2001-11-17&apos;,&apos;50000.00&apos;,NULL,10),            (1010,&apos;吴用&apos;,3,1006,&apos;2001-09-08&apos;,&apos;15000.00&apos;,&apos;0.00&apos;,30),            (1011,&apos;沙僧&apos;,4,1004,&apos;2007-05-23&apos;,&apos;11000.00&apos;,NULL,20),            (1012,&apos;李逵&apos;,4,1006,&apos;2001-12-03&apos;,&apos;9500.00&apos;,NULL,30),            (1013,&apos;小白龙&apos;,4,1004,&apos;2001-12-03&apos;,&apos;30000.00&apos;,NULL,20),            (1014,&apos;关羽&apos;,4,1007,&apos;2002-01-23&apos;,&apos;13000.00&apos;,NULL,10);            -- 工资等级表            CREATE TABLE salarygrade (              grade INT PRIMARY KEY,   -- 级别              losalary INT,  -- 最低工资              hisalary INT -- 最高工资            );            -- 添加5个工资等级            INSERT INTO salarygrade(grade,losalary,hisalary) VALUES             (1,7000,12000),            (2,12010,14000),            (3,14010,20000),            (4,20010,30000),            (5,30010,99990);            -- 需求：            -- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述            /*                分析：                    1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表                    2.查询条件 emp.job_id = job.id            */            SELECT                 t1.`id`, -- 员工编号                t1.`ename`, -- 员工姓名                t1.`salary`,-- 工资                t2.`jname`, -- 职务名称                t2.`description` -- 职务描述            FROM                 emp t1, job t2            WHERE                 t1.`job_id` = t2.`id`;            -- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置            /*                分析：                    1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept                    2. 条件： emp.job_id = job.id and emp.dept_id = dept.id            */            SELECT                 t1.`id`, -- 员工编号                t1.`ename`, -- 员工姓名                t1.`salary`,-- 工资                t2.`jname`, -- 职务名称                t2.`description`, -- 职务描述                t3.`dname`, -- 部门名称                t3.`loc` -- 部门位置            FROM                 emp t1, job t2,dept t3            WHERE                 t1.`job_id` = t2.`id` AND t1.`dept_id` = t3.`id`;            -- 3.查询员工姓名，工资，工资等级            /*                分析：                    1.员工姓名，工资 emp  工资等级 salarygrade                    2.条件 emp.salary &gt;= salarygrade.losalary and emp.salary &lt;= salarygrade.hisalary                        emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary            */            SELECT                 t1.ename ,                t1.`salary`,                t2.*            FROM emp t1, salarygrade t2            WHERE t1.`salary` BETWEEN t2.`losalary` AND t2.`hisalary`;            -- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级            /*                分析：                    1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade                    2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary            */            SELECT                 t1.`ename`,                t1.`salary`,                t2.`jname`,                t2.`description`,                t3.`dname`,                t3.`loc`,                t4.`grade`            FROM                 emp t1,job t2,dept t3,salarygrade t4            WHERE                 t1.`job_id` = t2.`id`                 AND t1.`dept_id` = t3.`id`                AND t1.`salary` BETWEEN t4.`losalary` AND t4.`hisalary`;            -- 5.查询出部门编号、部门名称、部门位置、部门人数            /*                分析：                    1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表                    2.使用分组查询。按照emp.dept_id完成分组，查询count(id)                    3.使用子查询将第2步的查询结果和dept表进行关联查询            */            SELECT                 t1.`id`,t1.`dname`,t1.`loc` , t2.total            FROM                 dept t1,                (SELECT                    dept_id,COUNT(id) total                FROM                     emp                GROUP BY dept_id) t2            WHERE t1.`id` = t2.dept_id;            -- 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询            /*                分析：                    1.姓名 emp， 直接上级的姓名 emp                        * emp表的id 和 mgr 是自关联                    2.条件 emp.id = emp.mgr                    3.查询左表的所有数据，和 交集数据                        * 使用左外连接查询            */            /*            select                t1.ename,                t1.mgr,                t2.`id`,                t2.ename            from emp t1, emp t2            where t1.mgr = t2.`id`;            */            SELECT                 t1.ename,                t1.mgr,                t2.`id`,                t2.`ename`            FROM emp t1            LEFT JOIN emp t2            ON t1.`mgr` = t2.`id`;</code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><pre><code>1. 事务的基本介绍    1. 概念：        * 如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败    2. 操作：        1. 开启事务：start transection        2. 回滚：rollback        3. 提交：commit    3. MySQL数据库中事务默认提交        * 事务提交的两种方式：            * 自动提交：                * mysql就是自动提交的                * 一条DML(增删改)语句会自动提交一次事务。            * 手动提交：                * Oracle数据库默认是手动提交事务                * 需要先开启事务，再提交        * 修改事务的默认提交方式：            * 查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交  0 代表手动提交            * 修改默认提交方式： set @@autocommit = 0;2. 事务的四大特征    1. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。    2. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。    3. 隔离性：多个事务之间。相互独立。    4. 一致性：事务操作前后，数据总量不变3. 事务的隔离级别（了解）    * 概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。    * 存在问题：        1. 脏读：一个事务，读取到另一个事务中没有提交的数据        2. 不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。        3. 幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。    * 隔离级别：        1. read uncommitted：读未提交            * 产生的问题：脏读、不可重复读、幻读        2. read committed：读已提交 （Oracle）            * 产生的问题：不可重复读、幻读        3. repeatable read：可重复读 （MySQL默认）            * 产生的问题：幻读        4. serializable：串行化            * 可以解决所有的问题        * 注意：隔离级别从小到大安全性越来越高，但是效率越来越低        * 数据库查询隔离级别：            * select @@tx_isolation;        * 数据库设置隔离级别：            * set global transaction isolation level  级别字符串;    * 演示：        set global transaction isolation level read uncommitted;        start transaction;        -- 转账操作        update account set balance = balance - 500 where id = 1;        update account set balance = balance + 500 where id = 2;</code></pre><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><pre><code>* SQL分类：    1. DDL：操作数据库和表    2. DML：增删改表中数据    3. DQL：查询表中数据    4. DCL：管理用户，授权* DBA：数据库管理员* DCL：管理用户，授权    1. 管理用户        1. 添加用户：            * 语法：CREATE USER &apos;用户名&apos;@&apos;主机名&apos; IDENTIFIED BY &apos;密码&apos;;        2. 删除用户：            * 语法：DROP USER &apos;用户名&apos;@&apos;主机名&apos;;        3. 修改用户密码：            UPDATE USER SET PASSWORD = PASSWORD(&apos;新密码&apos;) WHERE USER = &apos;用户名&apos;;            UPDATE USER SET PASSWORD = PASSWORD(&apos;abc&apos;) WHERE USER = &apos;lisi&apos;;            SET PASSWORD FOR &apos;用户名&apos;@&apos;主机名&apos; = PASSWORD(&apos;新密码&apos;);            SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;123&apos;);            * mysql中忘记了root用户的密码？                1. cmd -- &gt; net stop mysql 停止mysql服务                    * 需要管理员运行该cmd                2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables                3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功                4. use mysql;                5. update user set password = password(&apos;你的新密码&apos;) where user = &apos;root&apos;;                6. 关闭两个窗口                7. 打开任务管理器，手动结束mysqld.exe 的进程                8. 启动mysql服务                9. 使用新密码登录。        4. 查询用户：            -- 1. 切换到mysql数据库            USE myql;            -- 2. 查询user表            SELECT * FROM USER;            * 通配符： % 表示可以在任意主机使用用户登录数据库    2. 权限管理：        1. 查询权限：            -- 查询权限            SHOW GRANTS FOR &apos;用户名&apos;@&apos;主机名&apos;;            SHOW GRANTS FOR &apos;lisi&apos;@&apos;%&apos;;        2. 授予权限：            -- 授予权限            grant 权限列表 on 数据库名.表名 to &apos;用户名&apos;@&apos;主机名&apos;;            -- 给张三用户授予所有权限，在任意数据库任意表上            GRANT ALL ON *.* TO &apos;zhangsan&apos;@&apos;localhost&apos;;        3. 撤销权限：            -- 撤销权限：            revoke 权限列表 on 数据库名.表名 from &apos;用户名&apos;@&apos;主机名&apos;;            REVOKE UPDATE ON db3.`account` FROM &apos;lisi&apos;@&apos;%&apos;;</code></pre><h2 id="Day-04-内容："><a href="#Day-04-内容：" class="headerlink" title="Day 04 内容："></a>Day 04 内容：</h2><p><em>07/07/2020</em></p><pre><code>1. JDBC基本概念2. 快速入门3. 对JDBC中各个接口和类详解</code></pre><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><pre><code>1. 概念：Java DataBase Connectivity    Java数据库连接，Java语言操作数据库    * JDBC本质：其实是官网(sun公司)定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商可以去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类2. 快速入门：    * 步骤：        1. 导入驱动jar包 mysql-connnector-java-x.x.x-bin.jar            1. 复制mysql-connnector-java-x.x.x-bin.jar包到项目libs目录下            2. 右键--&gt;Add as library        2. 注册驱动        3. 获取数据库的连接对象 Connection        4. 定义sql        5. 获取执行sql语句的对象 Statement        6. 执行sql，接收返回结果        7. 处理结果        8. 释放资源    * 代码实现：        // 1.导入驱动jar包        // 2.注册驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        // 3.获取数据库连接对象        Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/db1&quot;,                &quot;root&quot;, &quot;********&quot;);        // 4.定义sql语句        String sql = &quot;insert into test values(1, \&quot;test\&quot;)&quot;;        // 5.获取执行sql的对象Statement        Statement statement = connection.createStatement();        // 6.执行sql        int count = statement.executeUpdate(sql);        // 7.处理结果        System.out.println(count);        // 8.释放资源        statement.close();        connection.close();3. 详解各个对象    1. DriverManager: 驱动管理对象        * 功能：            1. 注册驱动：告诉程序该使用哪一个数据库驱动jar包                static void registerDriver(Driver driver): 注册给定的驱动程序 DriverManager                写代码使用: Class.forName(&quot;com.mysql.jdbc.Driver&quot;);                通过查看源码发现: 在com.mysql.jdbc.Driver类中存在静态代码块                static {                    try {                        DriverManager.registerDriver(new Driver());                    } catch (SQLException var1) {                        throw new RuntimeException(&quot;Can&apos;t register driver!&quot;);                    }                }                注意：mysql5之后的驱动jar包可以省略注册驱动的步骤            2. 获取数据库连接：                * 方法: static Connerction getConnection(String url, String user, String password)                * 参数：                    * url：指定连接的路径                        * 语法: jdbc:mysql://ip地址(域名):端口号/数据库名称                        * 例子: jdbc:mysql://localhost:3306/db1                        * 细节: 如果连接的是本机mysql服务器，并且mysql服务默认端口为3306，则url可以简写为jdbc:mysql:///数据库名称                    * user：用户名                    * password：密码    2. Connection: 数据库连接对象        1. 功能：            1. 获取执行sql的对象                * Statement createStatement()                * PreparedStatement prepareStatement(String sql)            2。 管理事务：                * 开启事务: void setAutoCommit(boolean autoCommit)    : 调用该方法设置参数为false，即开启事务                * 提交事务: void commit()                * 回滚事务: void rollback()    3. Statement: 执行sql的对象        1. 执行sql            1. booleann execute(String sql) : 可以执行任意的sql 了解            2. int executeUpdate(String sql) : 执行DML(insert、update、delete)语句、DDL(create、alter、drop)语句                * 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0执行成功 反之失败            3. ResultSet executeQuery(String sql) : 执行DQL(select)语句        2. 练习：            1. account表 添加一条记录            2. account表 修改记录            3. account表 删除一条记录            代码:                Connection connection = null;                Statement statement = null;                try {                    // 1.注册驱动                    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);                    // 2.定义sql                    String sql = &quot;insert into account values(null, &apos;王五&apos;, 3000)&quot;;                    // 3.获取Connection对象                    connection= DriverManager.getConnection(&quot;jdbc:mysql:///db1&quot;,                            &quot;root&quot;, &quot;******&quot;);                    // 4.获取执行sql的对象                    statement = connection.createStatement();                    // 5.执行sql                    int count = statement.executeUpdate(sql);                    // 6.处理结果                    System.out.println(count);                    if(count &gt; 0){                        System.out.println(&quot;添加成功&quot;);                    }else{                        System.out.println(&quot;添加失败&quot;);                    }                } catch (ClassNotFoundException | SQLException e) {                    e.printStackTrace();                } finally {                    // 避免空指针异常                    if(statement != null){                        try {                            statement.close();                        } catch (SQLException throwables) {                            throwables.printStackTrace();                        }                    }                    if(connection != null){                        try {                            connection.close();                        } catch (SQLException throwables) {                            throwables.printStackTrace();                        }                    }                }    4. ResultSet: 结果集对象，封装查询结果        * next()：游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，返回boolean值        * getXxx(参数)：获取数据            * Xxx代表数据类型    如: int getInt()            * 参数：                1. int: 代表列的编号，从1开始                2. String: 代表列名称        * 注意：            * 使用步骤：                1. 游标向下移动一行                2. 判断是否有数据                3. 获取数据            while(rs.next()){...}        * 练习：            * 定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。                1. 定义Emp类                2. 定义方法 public List&lt;Emp&gt; findAll(){}                3. 实现方法 select * from emp;    5. PreparedStatement: 执行sql的对象        1. SQL注入问题: 在拼接SQL时，有一些sql的特殊关键字参与字符串的拼接，会造成安全性问题            1. 输入用户随便，输入密码：a&apos; or &apos;a&apos; = &apos;a            2. sql : select * from USER where username = &apos;xxx&apos; and password = &apos;a&apos; or &apos;a&apos; = &apos;a&apos;;        2. 解决sql注入问题：使用PreparedStatement来解决        3. 预编译的SQL：参数使用?作为占位符        4. 步骤：            1. 导入驱动jar包 mysql-connnector-java-x.x.x-bin.jar            2. 注册驱动            3. 获取数据库的连接对象 Connection            4. 定义sql                * 注意：sql的参数使用?作为占位符。如: select * from user where username = ? and password = ?            5. 获取执行sql语句的对象 PreparedStatement    Connection.preparedStatement(String sql)            6. 给?赋值:                * 方法：setXxx(参数1, 参数2)                    * 参数1: ?的位置编号 从1 开始                    * 参数2: ?的值            7. 执行sql，接收返回结果，不需要传递sql语句            8. 处理结果            9. 释放资源        5. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作            1. 可以防止sql注入            2. 效率更高</code></pre><h3 id="抽取JDBC工具类-JDBCUtils"><a href="#抽取JDBC工具类-JDBCUtils" class="headerlink" title="抽取JDBC工具类 : JDBCUtils"></a>抽取JDBC工具类 : JDBCUtils</h3><pre><code>* 目的：简化书写* 分析：    1. 注册驱动也抽取    2. 抽取一个方法获取连接对象        * 需求：不想传递参数(麻烦)，还得保证工具类的通用性。        * 解决：配置文件            jdbc.properties                url=                user=                password=    3. 抽取一个方法释放资源* 代码实现：    public class JDBCUtils {        private static String url;        private static String user;        private static String password;        private static String driver;        /**         * 文件的读取只需要读取一次即可拿到这些值，使用静态代码块完成         */        static {            try {                // 读取资源文件，获取值。                // 1.创建Properties集合类                Properties pro = new Properties();                // 获取src路径下的文件的方式---&gt;ClassLoader 类加载器                ClassLoader classLoader = JDBCUtils.class.getClassLoader();                URL result = classLoader.getResource(&quot;jdbc.properties&quot;);                String path = result.getPath();                // 2.加载文件                pro.load(new FileReader(path));                // 3.获取属性赋值                url = pro.getProperty(&quot;url&quot;);                user = pro.getProperty(&quot;user&quot;);                password = pro.getProperty(&quot;password&quot;);                driver = pro.getProperty(&quot;driver&quot;);                // 4.注册驱动                try {                    Class.forName(driver);                } catch (ClassNotFoundException e) {                    e.printStackTrace();                }            } catch (IOException e) {                e.printStackTrace();            }        }        /**         * 获取连接         * @return 连接对象         */        public static Connection getConnection() throws SQLException {            return DriverManager.getConnection(url, user, password);        }        /**         * 释放资源         * @param statement         * @param connection         */        public static void close(Statement statement, Connection connection){            if(statement != null){                try {                    statement.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }            if(connection != null){                try {                    connection.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }        }        public static void close(ResultSet resultSet, Statement statement, Connection connection){            if(statement != null){                try {                    statement.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }            if(connection != null){                try {                    connection.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }            if(resultSet != null){                try {                    resultSet.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }        }    }    * 练习：        * 需求：            1. 通过键盘录入用户名和密码            2. 判断用户是否登录成功                * select * from USER where username = &apos;&apos; and password = &apos;&apos;;                * 如果这个sql有查询结果，则成功，反之失败        * 步骤：            1. 创建数据库表 user                CREATE TABLE USER(                    id INT PRIMARY KEY AUTO_INCREMENT,                    username varchar(32),                    password varchar(32)                );                INSERT INTO USER VALUES(NULL,&apos;zhangsan&apos;,&apos;123&apos;);                INSERT INTO USER VALUES(NULL,&apos;lisi&apos;,&apos;234&apos;);            2. 创建一个类            ......</code></pre><h3 id="JDBC控制事务"><a href="#JDBC控制事务" class="headerlink" title="JDBC控制事务"></a>JDBC控制事务</h3><pre><code>1. 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则者多个步骤要么同时成功，要么同时失败。2. 操作：    1. 开启事务    2. 提交事务    3. 回滚事务3. 使用Connection对象来管理事务    * 开启事务: void setAutoCommit(boolean autoCommit)    : 调用该方法设置参数为false，即开启事务        * 在执行sql之前开启事务(在获得连接后开启)    * 提交事务: void commit()        * 当所有sql都执行完提交事务    * 回滚事务: void rollback()        * 在catch中回滚事务</code></pre><hr><h2 id="Day-05-内容："><a href="#Day-05-内容：" class="headerlink" title="Day 05 内容："></a>Day 05 内容：</h2><pre><code>1. 数据库连接池2. Spring JDBC : JDBC Template</code></pre><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><pre><code>1. 概念：其实就是一个容器(集合)，存放数据库连接的容器    当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。2. 好处：    1. 节约资源    2. 用户访问高效3. 实现：    1. 标准接口：DataSource    javax.sql包下的        1. 方法：            * 获取连接：getConnection()            * 归还连接：Connection.close()                如果连接对象Connection是从连接池中获取的，那么调用Connection.close()，则不会再关闭连接，而是归还连接。    2. 一般我们不去实现它，由数据库厂商实现        1. C3P0：数据库连接池技术        2. Druid：数据库连接池实现技术，由阿里巴巴提供的4. C3P0：数据库连接池技术    * 步骤：        1. 导入jar包 (两个)c3p0-0.6.5.2.jar mchange-commons-java-0.2.12.jar            * 不要忘记导入数据库驱动jar包        2. 定义配置文件：            * 名称：c3p0.properties 或者 c3p0-config.xml            * 路径：直接将文件放在src目录下即可        3. 创建核心对象：数据库连接池对象 ComboPooledDataSource        4. 获取连接：getConnection()5. Druid：数据库连接池实现技术，由阿里巴巴提供的    1. 步骤：        1. 导入jar包 druid-1.0.9.jar        2. 定义配置文件：            * 是properties形式的            * 可以叫任意名称，可以放在任意目录下        3. 加载配置文件     Properties        4. 获取数据库连接池对象：通过工厂类来获取    DruidDataSourceFactory        5. 获取连接：getConnection()    2. 定义工具类        1. 定义一个类 JDBCUtils        2. 提供静态代码块加载配置文件，初始化连接池对象        3. 提供方法            1. 获取连接方法：通过数据库连接池获取连接            2. 释放资源            3. 获取连接池的方法            代码:                /**                 * Druid连接池的工具类                 */                public class JDBCUtils {                    // 1.定义成员变量 DataSource                    private static DataSource ds;                    static {                        try {                            // 1.加载配置文件                            Properties pro = new Properties();                            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));                            // 2.获取DataSource                            ds = DruidDataSourceFactory.createDataSource(pro);                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                    /**                     * 获取连接                     */                    public static Connection getConnection() throws SQLException {                        return ds.getConnection();                    }                    /**                     * 释放资源                     * @param statement                     * @param connection                     */                    public static void close(Statement statement, Connection connection){                        if(statement != null){                            try {                                statement.close();                            } catch (SQLException throwables) {                                throwables.printStackTrace();                            }                        }                        if(connection != null){                            try {                                connection.close();                            } catch (SQLException throwables) {                                throwables.printStackTrace();                            }                        }                    }                    public static void close(ResultSet resultSet, Statement statement, Connection connection){                        if(statement != null){                            try {                                statement.close();                            } catch (SQLException throwables) {                                throwables.printStackTrace();                            }                        }                        if(connection != null){                            try {                                connection.close();                            } catch (SQLException throwables) {                                throwables.printStackTrace();                            }                        }                        if(resultSet != null){                            try {                                resultSet.close();                            } catch (SQLException throwables) {                                throwables.printStackTrace();                            }                        }                    }                    /**                     * 获取连接池方法                     */                    public static DataSource getDataSource(){                        return ds;                    }                }</code></pre><h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><pre><code>* Spring框架对JDBC的简单封装。提供了JDBC Template对象简化JDBC的开发* 步骤：    1. 导入jar包    2. 创建JdbcTemplate对象。依赖于数据源DataSource        * JdbcTemplate template = new JdbcTemplate(ds);    3. 调用JdbcTemplate的方法来完成CRUD的操作        * update(): 执行DML语句。增、删、改语句        * queryForMap(): 查询结果，将结果集封装为Map集合，将列名作为key，将值作为value，将这条记录封装为value            * 注意：这个方法查询的结果集长度只能是1        * queryForList(): 查询结果，将结果集封装为list集合            * 注意：将每一条记录封装为Map集合，再将Map集合装载在List集合中        * query(): 查询结果，将结果封装为JavaBean对象            * query方法的参数：RowMapper                * 一般使用BeanPropertiyRowMapper实现类。可以完成数据到JavaBean的自动封装。                * new BeanPropertyRowMapper&lt;类型&gt;(类型.class)        * queryForObject(): 查询结果，将结果封装为对象            * 一般用于聚合函数的查询     4. 练习：        * 需求：            1. 修改1号数据的 salary 为 10000            2. 添加一条记录            3. 删除刚才添加的记录            4. 查询id为1的记录，将其封装为Map集合            5. 查询所有的记录，将其封装为List集合            6. 查询所有记录，将其封装为Emp对象的List集合            7. 查询总的记录数</code></pre><hr><h2 id="Day-06-内容："><a href="#Day-06-内容：" class="headerlink" title="Day 06 内容："></a>Day 06 内容：</h2><pre><code>1. web概念概述2. HTML</code></pre><h3 id="web概念概述"><a href="#web概念概述" class="headerlink" title="web概念概述"></a>web概念概述</h3><pre><code>* JavaWeb：    * 使用Java语言开发基于互联网的项目* 软件的架构：    1. C/S：Client/Server 客户端/服务器端        * 在用户本地有一个客户端程序，在远程有一个服务器端程序        * 如：QQ，迅雷...        * 优点：            1. 用户体验好        * 缺点：            1. 开发、安装、部署、维护麻烦    2. B/S：Browser/Server 浏览器/服务器端        * 只需要一个浏览器，用户通过不同的网址(URL)，可以访问远程不同的服务器端程序        * 优点：            1. 开发、安装、部署、维护简单        * 缺点：            1. 如果应用过大，用户的体验可能会受到影响            2. 对硬件要求过高* B/S架构详解    * 资源分类：        1. 静态资源：            * 使用静态网页开发技术发布的资源            * 特点：                * 所有用户访问，得到的结果是一样的                * 如：文本、图片、音频、视频，HTML,CSS,JavaScript                * 如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器，浏览器中内置了静态资源的解析引擎        2. 动态资源：            * 使用动态网页技术发布的资源            * 特点：                * 所有用户访问，得到的结果可能不一样                * 如：jsp/servlet,php,asp...                * 如果用户请求的是动态资源，那么服务器将会执行动态资源，转换为静态资源，再发送给浏览器    * 我们要学习动态资源，必须先学习静态资源！    * 静态资源：        * HTML：用于搭建基础网页，展示页面的内容        * CSS：用于美化页面，布局页面        * JavaScript：控制页面的元素，让页面有一些动态的效果</code></pre><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><pre><code>1. 概念：是最基础的网页开发语言    * Hyper Text Markup Language 超文本标记语言        * 超文本：            * 超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。        * 标记语言：            * 由标签构成的语言。&lt;标签名称&gt; 如html, xml            * 标记语言不是编程语言2. 快速入门：    * 语法：        1. html文档后缀名 .html 或者 .htm        2. 标签分为            1. 围堵标签：有开始标签和结束标签。如 &lt;html&gt; &lt;/html&gt;            2. 自闭和标签：开始标签和结束标签在一起。 如 &lt;br /&gt;        3. 标签可以嵌套：            需要正确嵌套，不能你中有我，我中有你            错误: &lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;            正确: &lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;        4. 在开始标签中可以定义属性。属性是由键值对组成，值需要用引号(单双都可)引起来        5. html的标签不区分大小写，建议使用小写。3. 标签学习：    1. 文件标签：构成html最基本的标签        * html:html文档的根标签        * head:头标签。用于指定html文档的一些属性。引入外部的资源        * title:标题标签        * body：体标签        * &lt;!DOCTYPE html&gt;:html5中定义改文档是html文档    2. 文本标签：和文本有关的标签        * 注释：&lt;!-- --&gt;        * &lt;h1&gt; to &lt;h6&gt;：标题标签            * h1~h6字体大小主键递减        * &lt;p&gt;：段落标签        * &lt;br&gt;：换行标签        * &lt;hr&gt;：展示一条水平线            * 属性：                * color：颜色                * width：宽度                * size：高度                * align：对齐方式                    * center：居中                    * left：左对齐                    * right：右对齐        * &lt;b&gt;：字体加粗        * &lt;i&gt;：字体斜体        * &lt;font&gt;：字体标签            * 属性：                * color：颜色                * size：大小                * face：字体        * &lt;center&gt;：文本居中        * 属性定义：            * color：                1. 英文单词：red,green,blue                2. rgb(值1, 值2, 值3):值的范围：0~255    如 rgb(0,0,2555)                3. #值1值2值3：值的范围：00~FF。 如: #FF00FF            * width:                1. 数值：width=&apos;20&apos;，数值的单位，默认是 px(像素)                2. 数值% ：占比相对于父元素的比例        * 案例            ...    3. 图片标签        * img：展示图片            * 属性：                * src：指定图片位置            * 相对路径：                * 以.开头的路径                    * ./: 代表当前目录    ./image/1.jpg                    * ../: 代表上一级目录    4. 列表标签：        * 有序列表：            * ol            * li        * 无序标签：            * ul            * li    5. 链接标签        * a：定义一个超链接            * 属性：                * href：指定访问资源的URL(统一资源定位符)                * target：指定打开资源的方式                    * _self：默认值，在当前页面打开                    * _blank：在空白页面打开    6. div和span：        * div：每个div占满一整行。块级标签        * span：文本信息在一行展示，行内标签，内联标签。    7. 语义化标签：html5中为了提高程序的可读性，提供了一些标签        1. &lt;header&gt;: 页眉        2. &lt;footer&gt;: 页脚    8. 表格标签        * table：定义表格            * width：宽度            * border：边框            * cellpadding：定义内容和单元格的距离            * cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条。            * bgcolor：背景色            * align：对齐方式        * tr：定义行            * bgcolor：背景色            * align：对齐方式        * td：定义单元格            * colspan：合并行            * rowspan：合并列        * th：定义表头单元格        * &lt;caption&gt;：表格标题        * &lt;thead&gt;：表示表格的头部分        * &lt;tbody&gt;：表示表格的体部分        * &lt;tfoot&gt;：表示表格的脚部分</code></pre><h3 id="案例：旅游网站首页"><a href="#案例：旅游网站首页" class="headerlink" title="案例：旅游网站首页"></a>案例：旅游网站首页</h3><pre><code>1. 确定使用table来完成布局2. 如果某一行只有一个单元格，则使用&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;3. 如果某一行有多个单元格，则使用    &lt;tr&gt;        &lt;td&gt;            &lt;table&gt;&lt;/table&gt;        &lt;/td&gt;    &lt;/tr&gt;</code></pre><hr><h2 id="Day-07-内容："><a href="#Day-07-内容：" class="headerlink" title="Day 07 内容："></a>Day 07 内容：</h2><pre><code>1. HTML标签：表单标签2. CSS：</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java自学总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb初探</title>
      <link href="/2020/06/25/summer%20study/"/>
      <url>/2020/06/25/summer%20study/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb初探"><a href="#JavaWeb初探" class="headerlink" title="JavaWeb初探"></a>JavaWeb初探</h1><h2 id="Day-01"><a href="#Day-01" class="headerlink" title="Day 01"></a>Day 01</h2><p><em>25/06/2020</em></p><h3 id="JAVA反射"><a href="#JAVA反射" class="headerlink" title="JAVA反射"></a>JAVA反射</h3><h4 id="获取Class实例："><a href="#获取Class实例：" class="headerlink" title="获取Class实例："></a>获取Class实例：</h4><ul><li><p>通过静态变量class获取，即直接通过类名获取</p></li><li><p>通过调用Class.forName(name)方法获取，传递类完整名称为参数</p></li><li><p>通过实例变量的getClass()方法获取</p></li></ul><p>Class实例在JVM中是唯一的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line">Class c1 = String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class c2 = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">String s = <span class="string">"hello"</span>;</span><br><span class="line">Class c3 = s.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可直接通过==符号判断两Class实例是否相同</span></span><br><span class="line"><span class="keyword">boolean</span> b = (c1 == c2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h4><ul><li>Field getField(name)：根据字段名获取某个public的field（包括父类）</li><li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li><li>Field[] getFields()：获取所有public的field（包括父类）</li><li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String num;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line">Field f1 = Student.class.getField("age");</span><br><span class="line">Field f2 = Student.class.getDeclaredField("num"); // 访问私有变量不能直接使用getField()方法</span><br></pre></td></tr></table></figure><p>Field对象的一些方法</p><ul><li><code>getName()</code>：返回字段名称，例如，<code>&quot;name&quot;</code>；</li><li><code>getType()</code>：返回字段类型，也是一个<code>Class</code>实例，例如，<code>String.class</code>；</li><li><code>getModifiers()</code>：返回字段的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li></ul><p>通过Field实例获取或修改字段的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还是上面Student的例子</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">f1 = s.getclass().getField(<span class="string">"age"</span>);</span><br><span class="line">f2 = s.getclass().getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">Object value = f1.get(s); <span class="comment">// 获取age字段的值 此处为0</span></span><br><span class="line">f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object value = f2.get(s); <span class="comment">// 要想获得private修饰字段的值，需要使用setAccessible方法 不过这也不是万能的 有些是可以限制的</span></span><br><span class="line">f1.set(s, <span class="number">15</span>); <span class="comment">// 设置字段age的值 设置为15</span></span><br><span class="line">f2.set(s, <span class="string">"hello"</span>); <span class="comment">// 同理</span></span><br></pre></td></tr></table></figure><h4 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h4><ul><li><code>Method getMethod(name, Class...)</code>：获取某个<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个<code>Method</code>（不包括父类）</li><li><code>Method[] getMethods()</code>：获取所有<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（不包括父类）</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> a, String s)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Method m1 = Student.class.getMethod("get");</span><br><span class="line">Method m2 = Student.class.getDeclaredMethod("set", int.class, String.class); // 后面的可变参数代表该方法的参数列表</span><br></pre></td></tr></table></figure><p>Method对象的一些方法：</p><ul><li><code>getName()</code>：返回方法名称，例如：<code>&quot;getScore&quot;</code>；</li><li><code>getReturnType()</code>：返回方法返回值类型，也是一个Class实例，例如：<code>String.class</code>；</li><li><code>getParameterTypes()</code>：返回方法的参数类型，是一个Class数组，例如：<code>{String.class, int.class}</code>；</li><li><code>getModifiers()</code>：返回方法的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li></ul><p>invoke()方法，对Mehtod实例调用该方法，相当于调用Method对应的实例的方法，第一个参数为对象实例，后面跟可变参数，即该方法的参数列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m1.invoke(); <span class="comment">// 相当于student.get()</span></span><br><span class="line">m2.setAccessible(<span class="keyword">true</span>); <span class="comment">// 和Field同理</span></span><br><span class="line">m2.invoke(<span class="number">1</span>, <span class="string">"jack"</span>);</span><br></pre></td></tr></table></figure><p>关于多态：</p><p>即在子类重写了父类方法时，反射机制又是如何呢？也同样遵循多态的原则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"p"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"c"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Method m = P.class.getMethod("prin");</span><br><span class="line">m.invoke(<span class="keyword">new</span> P()); <span class="comment">// p</span></span><br><span class="line">m.invoke(<span class="keyword">new</span> C()); <span class="comment">// c</span></span><br></pre></td></tr></table></figure><h4 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h4><p>通过反射创建实例：</p><ul><li><code>newInstance()方法</code>，要求该构造方法为public无参数构造方法</li><li>通过Constructor对象来实现能够调用任意的构造方法</li></ul><p>对于构造Constructor对象的方法：</p><ul><li><code>getConstructor(Class...)</code>：获取某个<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructor(Class...)</code>：获取某个<code>Constructor</code>；</li><li><code>getConstructors()</code>：获取所有<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructors()</code>：获取所有<code>Constructor</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student s = Student<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line"><span class="comment">// Constructor</span></span><br><span class="line">Constructor c = Student<span class="class">.<span class="keyword">class</span>.<span class="title">getConstructor</span>(<span class="title">Student</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">// 同样对于私有构造方法 需要调用setAccessible(true)方法</span></span><br><span class="line">Student s2 = (Student) c.newInstance(); <span class="comment">// 这里的newInstance方法可以传递参数 具体根据构造方法来对应</span></span><br></pre></td></tr></table></figure><h4 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h4><p>获取父类Class实例：</p><p>getSuperClass()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class i = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class n = i.getSuperClass(); <span class="comment">// 获取父类 也就是Number</span></span><br><span class="line">Class s = n.getSuperClass().getSuperClass(); <span class="comment">// 如果已经不存在父类 则返回null</span></span><br></pre></td></tr></table></figure><p>获取接口：</p><p>getInterfaces()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class i[] = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>.<span class="title">getInterfaces</span>()</span>; <span class="comment">// 因为存在多个接口 所以返回Class数组 </span></span><br><span class="line"><span class="comment">// 如果想获得父接口 也需要使用getInterfaces()方法 接口使用getSuperClass()方法会返回null</span></span><br></pre></td></tr></table></figure><p>两个Class对象判断是否为继承关系：</p><p>使用isAssignableFrom()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Number<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">Integer</span>.<span class="title">class</span>)</span>; <span class="comment">// true，因为Integer可以赋值给Number</span></span><br><span class="line"><span class="comment">// 可以类比instanceof</span></span><br></pre></td></tr></table></figure><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>可以在运行期动态创建某个<code>interface</code>的实例。</p><p>JDK提供的动态创建接口对象的方式，就叫动态代理。</p><p>即可以实现在不编写实现类的情况下，创建接口的实例。利用Proxy.newProxyInstance()方法</p><p>在运行期动态创建一个<code>interface</code>实例的方法如下：</p><ol><li>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</li><li>通过Proxy.newProxyInstance()创建interface实例，它需要3个参数：<ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li></ol></li><li>将返回的<code>Object</code>强制转型为接口。</li></ol><p>但实质其实就是JDK帮我们自动编写了一个上述类（不需要源码，可以直接生成字节码），并不存在可以直接实例化接口的黑魔法。</p><p>参考：廖雪峰博客-Java</p><hr><h2 id="Day-02"><a href="#Day-02" class="headerlink" title="Day 02"></a>Day 02</h2><p><em>26/06/2020</em></p><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>定义：XML全称为Extensible Markup Language，意思是可扩展的标记语言。XML语法上和HTML比较相似，但HTML中的元素是固定的，而XML的标签是可以由用户自定义的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--部分xml 例子--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"1001"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangSan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">teacher</span> <span class="attr">name</span>=<span class="string">"liSi"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wife</span> <span class="attr">id</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">wife</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">teacher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h4><p>文档声明：</p><ul><li><p>文档声明必须为<code>&lt;?xml</code>开头，以<code>?&gt;</code>结束；</p></li><li><p>文档声明必须从文档的0行0列位置开始；</p></li><li><p>文档声明只有三个属性：</p><ul><li><p>versioin：指定XML文档版本。必须属性，因为我们不会选择1.1，只会选择1.0；</p></li><li><p>encoding：指定当前文档的编码。可选属性，默认值是utf-8；</p></li><li><p>standalone：指定文档独立性。可选属性，默认值为yes，表示当前文档是独立文档。如果为no表示当前文档不是独立的文档，会依赖外部文件。</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&gt;</span><br></pre></td></tr></table></figure><p><strong>元素</strong></p><p>元素是XML文档中最重要的组成部分：</p><ul><li><p>普通元素的结构：开始标签、元素体、结束标签，例如：<code>&lt;hello&gt;大家好&lt;/hello&gt;</code>；</p></li><li><p>元素体：元素体可以是元素，也可以是文本，例如：<code>&lt;b&gt;&lt;a&gt;你好&lt;/a&gt;&lt;/b&gt;</code>，其中<code>&lt;b&gt;</code>元素的元素体是<code>&lt;a&gt;</code>元素，而<code>&lt;a&gt;</code>元素的元素体是文本；</p></li><li><p>空元素：空元素只有开始标签，而没有结束标签，例如：<code>&lt;c/&gt;</code>，但元素必须自己闭合。</p></li></ul><p>元素属性：</p><ul><li><p>属性是元素的一部分，它必须出现在元素的开始标签中；</p></li><li><p>属性的定义格式：属性名=属性值，其中属性值必须使用单引或双引；</p></li><li><p>一个元素可以有0~N个属性，但一个元素中不能出现同名属性；</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"1001"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--.......--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>转义</strong></p><p>转义字符：例如<code>&lt;</code>,<code>&gt;</code>等等这类符号，需要使用相应的转义字符来代替。例如：<code>&lt;</code>用<code>&amp;lt;</code>代替。</p><p>CDATA段：由于使用转义字符会大大降低XML文档可读性，使用CDATA段就不会有这种问题，格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&lt;![CDATA[&lt;a&gt;]]&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在CDATA段中不能包含”]]&gt;”，即CDATA段的结束定界符。</p><p><strong>处理指令</strong></p><p>处理指令，简称PI（Processing instruction）。处理指令用来指挥解析器如何解析XML文档内容。</p><p>例如，在XML文档中可以使用xml-stylesheet指令，通知XML解析器，应用css文件显示xml文档内容。</p><p>放于文档声明下方</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="gbk"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/css" href="a.css"?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>格式</strong></p><p>格式良好的XML就是格式正确的XML文档，只有XML的格式是良好的，XML解释器才能解释它。下面是对格式良好XML文档的要求：</p><ul><li><p>必须要有XML文档声明；</p></li><li><p>必须且仅能有一个根元素；</p></li><li><p>元素和属性的命名必须遵循XML要求：</p><ul><li><p>XML命名区分大小写，例如<code>&lt;a&gt;</code>和<code>&lt;A&gt;</code>是两上不同的元素；</p></li><li><p>名称中可以包含：字母、数字、下划线、减号，但不能以数字、减号开头；</p></li><li><p>不能以xml开头，无论是大写还是小写都不可以，例如<code>&lt;xml&gt;</code>、<code>&lt;Xml&gt;</code>、<code>&lt;XML&gt;</code>都是错误的；</p></li><li><p>不能包含空格，例如<code>&lt;ab cd&gt;</code>是错误的。</p></li></ul></li><li><p>元素之间必须合理包含，例如：<code>&lt;a&gt;&lt;b&gt;xxx&lt;/b&gt;&lt;/a&gt;</code>是合理的，而<code>&lt;a&gt;&lt;b&gt;xxx&lt;/a&gt;&lt;/b&gt;</code>就是错误的包含。</p></li></ul><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>定义：DTD（Document Type Definition），文档类型定义，用来约束XML文档。或者可以把DTD理解为创建XML文档的结构！例如可以用DTD要求XML文档的根元素名为<code>&lt;students&gt;</code>，<code>&lt;students&gt;</code>中可以有1~N个<code>&lt;student&gt;</code>，<code>&lt;student&gt;</code>子元素为<code>&lt;name&gt;</code>、<code>&lt;age&gt;</code>和<code>&lt;sex&gt;</code>，<code>&lt;student&gt;</code>元素还有number属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--例子--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">students</span> (<span class="attr">student</span>+)&gt;</span><span class="comment">&lt;!--students元素包含1-n个student元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">student</span> (<span class="attr">name</span>,<span class="attr">age</span>,<span class="attr">sex</span>)&gt;</span><span class="comment">&lt;!--内容依次为name age sex三个元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">name</span> (#<span class="attr">PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义name元素内容为文本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">age</span> (#<span class="attr">PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义age元素内容为文本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">sex</span> (#<span class="attr">PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义sex元素内容为文本--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>内部DTD：在XML文档内部嵌入DTD，只对当前XML文档有效；</p></li><li><p>外部DTD：独立的DTD文件，扩展名为.dtd；</p><ul><li><p>本地DTD：DTD文件在本地，不在网络上。自己项目，或本公司内部使用的；</p></li><li><p>公共DTD：DTD文件在网络上，不在本地。都是大公司或组织发布的，共大家使用！</p></li></ul></li></ul><p>内部DTD</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" standalone="yes" ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内部DTD例子--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE students [</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT students (student+)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT student (name, age, sex)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT name (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT age (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT sex (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangSan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>位置：内部DTD在文档声明下面，在根元素上面；</p></li><li><p>语法格式：放到<code>&lt;!DOCTYPE 根元素名称[ ]&gt;</code>之间；</p></li><li><p>只对当前XML文档有效；</p></li></ul><p>本地DTD</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" standalone="no" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE students SYSTEM "students.dtd"&gt;</span><span class="comment">&lt;!--此处为dtd文件路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangSan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>位置：本地硬盘上；</p></li><li><p>语法格式：直接定义元素或属性即可；</p></li><li><p>本地所有XML文档都可以引用这个dtd文件；</p></li></ul><p>公共DTD</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" standalone="no" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE students PUBLIC "-//qdmmy6//DTD ST 1.0//ZH" "http://www.qdmmy6.com/xml/dtds/st.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangSan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p>格式为：<code>&lt;!DOCTYPE 根元素 PUBLIC &quot;DTD名称&quot; &quot;DTD网址&quot;&gt;</code></p><h4 id="DTD语法"><a href="#DTD语法" class="headerlink" title="DTD语法"></a>DTD语法</h4><h5 id="定义元素"><a href="#定义元素" class="headerlink" title="定义元素"></a>定义元素</h5><p>定义元素语法：<code>&lt;!ELEMENT 元素名 元素描述&gt;</code></p><ul><li><p><code>&lt;!ELEMENT name (#PCDATA)&gt;</code>，定义名为name的元素，内容为文本类型。</p></li><li><p><code>&lt;!ELEMENT student (name,age,sex)&gt;</code>，定义名为student元素，内容依次为name、age、sex元素；</p></li><li><p><code>&lt;!ELEMENT student ANY&gt;</code>，定义名为student元素，内容任意；</p></li><li><p><code>&lt;!ELEMENT student EMPTY&gt;</code>，定义名为student元素，不能有内容，即空元素，注意空元素是可以有属性的。 </p></li></ul><p>子元素出现次数</p><p>可以使用<code>*</code>、<code>+</code>、<code>?</code>来指定子元素出现的次数</p><p><code>*</code>：可以出现0~N次；<code>+</code>：可以出现1~N次；<code>?</code>：可以出现0~1次。</p><p>例如：<code>&lt;!ELEMENT student(name,age?,hobby*,grade+) &gt;</code>，定义student元素，第一子元素为name，必须且仅能出现一次，age是可有可无的，hobby可以出现0<del>N次，grade可以出现1</del>N次。</p><p>枚举类型子元素</p><p><code>&lt;!ELEMENT student (name | age | sex)&gt;</code>，表示student子元素为name、age、sex其中之一，必须仅且能选择其一。</p><h5 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h5><p>定义属性的语法：</p><p><code>&lt;!ATTLIST 元素名 属性名 属性类型 设置说明&gt;</code></p><p>例如：<code>&lt;!ATTLIST student number CDATA #REQUIRED&gt;</code>，给student元素定义属性number，类型为文本，这个默认是必须的。</p><p>属性设置说明：</p><p><code>#REQUIRED</code>：说明属性是必须的；<code>#IMPLIED</code>：说明属性是可选的；<code>默认值</code>：在不给出属性值时，使用默认值。</p><p> 属性的类型：</p><ul><li><p><code>CDATA</code>：文本类型；</p></li><li><p><code>Enumerated</code>：枚举类型；</p></li><li><p><code>ID</code>：ID类型，ID类型的属性用来标识元素的唯一性，即元素的ID属性值不能与其他元素的ID属性值相同；</p></li><li><p><code>IDREF</code>：ID引用类型，用来指定另一个元素，与另一个元素建立关联关系，IDREF类型的属性值必须是另一个元素的ID。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--例子--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">students</span> (<span class="attr">student</span>+) &gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">student</span> <span class="attr">EMPTY</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> <span class="attr">student</span> <span class="attr">number</span> <span class="attr">ID</span> #<span class="attr">REQUIRED</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> <span class="attr">student</span> <span class="attr">name</span> <span class="attr">CDATA</span> #<span class="attr">REQUIRED</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> <span class="attr">student</span> <span class="attr">sex</span> (<span class="attr">male</span> | <span class="attr">female</span>) "<span class="attr">male</span>" &gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> <span class="attr">student</span> <span class="attr">friend</span> <span class="attr">IDREF</span> #<span class="attr">IMPLIED</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--上面为students.dtd文件内容--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE students SYSTEM "students.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"itcast_001"</span> <span class="attr">name</span>=<span class="string">"zhangSan"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"itcast_002"</span> <span class="attr">name</span>=<span class="string">"liSi"</span> <span class="attr">sex</span>=<span class="string">"male"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"itcast_003"</span> <span class="attr">name</span>=<span class="string">"wangWu"</span> <span class="attr">sex</span>=<span class="string">"female"</span> <span class="attr">friend</span>=<span class="string">"itcast_002"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="定义实体"><a href="#定义实体" class="headerlink" title="定义实体"></a>定义实体</h5><p>将多而长的字符串定义为用简单符号表示的实体，从而在使用时只用使用该符号就可以了，方便且简洁。</p><p>实体分为两种：一般实体和参数实体。</p><ul><li><p>一般实体：在XML文档中使用；</p><ul><li>定义一般实体：<code>&lt;!ENTITY 实体名 &quot;实体值&quot;&gt;</code>，例如：<code>&lt;!ENTITY 大美女 &quot;白冰&quot;&gt;</code>；</li><li>一般实体引用：<code>&amp;实体名;</code>，例如<code>&lt;xxx&gt;&amp;大美女;&lt;/xxx&gt;</code>。</li></ul></li><li><p>参数实体：在DTD使用。</p><ul><li>定义参数实体：<code>&lt;!ENTITY % 实体名 &quot;实体值&quot;&gt;</code>，”%”与实体名之间的空格是必须的；例如：<code>&lt;!ENTITY % friend &quot;student friend IDREF #IMPLIED&quot;&gt;</code></li><li>参数实体引用：<code>%实体名;</code>；例如：<code>&lt;!ATTLIST %friend;&gt;</code></li></ul></li></ul><p>参数实体是在DTD内部使用，而不是在XML中使用。在内部DTD中使用参数实体会有诸多限制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--参数实体例子--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">students</span> (<span class="attr">student</span>+) &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">student</span> <span class="attr">EMPTY</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> <span class="attr">student</span> <span class="attr">number</span> <span class="attr">ID</span> #<span class="attr">REQUIRED</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> <span class="attr">student</span> <span class="attr">name</span> <span class="attr">CDATA</span> #<span class="attr">REQUIRED</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> <span class="attr">student</span> <span class="attr">sex</span> (<span class="attr">male</span> | <span class="attr">female</span>) "<span class="attr">male</span>"&gt;</span></span><br><span class="line">&lt;!ENTITY % friend "&lt;!ATTLIST student friend IDREF #IMPLIED&gt;"&gt;&lt;!--定义--&gt;</span><br><span class="line">%friend;<span class="comment">&lt;!--使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">itcast</span> "北京传智播客教育科技有限公司"&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><p>特点：</p><ul><li><p>Schema是新的XML文档约束；</p></li><li><p>Schema要比DTD强大很多；</p></li><li><p>Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--students.xsd--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.itcast.cn/xml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">targetNamespace</span>=<span class="string">"http://www.itcast.cn/xml"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span><span class="comment">&lt;!--指定名称空间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"students"</span> <span class="attr">type</span>=<span class="string">"studentsType"</span>/&gt;</span><span class="comment">&lt;!--定义studentsType类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"studentsType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"student"</span> <span class="attr">type</span>=<span class="string">"studentType"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span><span class="comment">&lt;!--指定其包含的student元素数目--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"studentType"</span>&gt;</span><span class="comment">&lt;!--定义studentType类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span><span class="comment">&lt;!--指定其元素按顺序出现--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"ageType"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">type</span>=<span class="string">"sexType"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">type</span>=<span class="string">"numberType"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span><span class="comment">&lt;!--指定其包含的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"sexType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"male"</span>/&gt;</span><span class="comment">&lt;!--指定枚举选项--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"female"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"ageType"</span>&gt;</span><span class="comment">&lt;!--定义ageType类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:minInclusive</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:maxInclusive</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span><span class="comment">&lt;!--指定范围--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"numberType"</span>&gt;</span><span class="comment">&lt;!--定义numberType类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">"ITCAST_\d&#123;4&#125;"</span>/&gt;</span><span class="comment">&lt;!--正则表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--students.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span> <span class="attr">xmlns</span>=<span class="string">"http://www.itcast.cn/xml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.itcast.cn/xml students.xsd"</span> &gt;</span><span class="comment">&lt;!--指定约束文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"ITCAST_1001"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangSan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"ITCAST_1002"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>liSi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>25<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="schema名称空间"><a href="#schema名称空间" class="headerlink" title="schema名称空间"></a>schema名称空间</h4><p>名称空间定义：如果一个XML文档中使用多个Schema文件，而这些Schema文件中定义了相同名称的元素时就会出现名字冲突。这就像一个Java文件中使用了import java.util.*和import java.sql.*时，在使用Date类时，那么就不明确Date是哪个包下的Date了。</p><p>总之名称空间就是用来处理元素和属性的名称冲突问题，与Java中的包是同一用途。如果每个元素和属性都有自己的名称空间，那么就不会出现名字冲突问题，就像是每个类都有自己所在的包一样，那么类名就不会出现冲突。</p><h5 id="目标名称空间"><a href="#目标名称空间" class="headerlink" title="目标名称空间"></a>目标名称空间</h5><p>在XSD文件中为定义的元素指定名称，即指定目标名称空间。这需要给<code>&lt;xsd:schema&gt;</code>元素添加<code>targetNamespace</code>属性。</p><p>例如：<code>&lt;xsd:schema targetNamespace=&quot;http://www.itcast.cn/xml&quot;&gt;</code></p><p>名称空间可以是任意字符串，但通常我们会使用公司的域名作为名称空间，这与Java中的包名使用域名的倒序是一样的！千万不要以为这个域名是真实的，它可以是不存在的域名。</p><p>如果每个公司发布的Schema都随意指定名称空间，如a、b之类的，那么很可能会出现名称空间的名字冲突，所以还是使用域名比较安全，因为域名是唯一的。</p><p>当使用了<code>targetNamespace</code>指定目标名称空间后，那么当前XSD文件中定义的元素和属性就在这个名称空间之中了。</p><h5 id="XML指定XSD文件"><a href="#XML指定XSD文件" class="headerlink" title="XML指定XSD文件"></a>XML指定XSD文件</h5><p>在XML文件中需要指定XSD约束文件，这需要使用在根元素中使用<code>schemaLocation</code>属性来指定XSD文件的路径，以及目标名称空间。格式为：<code>schemaLocation=&quot;目标名称空间 XSD文件路径&quot;</code></p><p>例如：<code>&lt;students schemaLocation=&quot;http://www.itcast.cn/xml students.xsd&quot;&gt;</code></p><p><code>schemaLocation</code>是用来指定XSD文件的路径，也就是说为当前XML文档指定约束文件。但它不只要指定XSD文件的位置，还要指定XSD文件的目标名称空间。</p><p>其中<code>http://www.itcast.cn/xml</code>为目标名称空间，<code>students.xsd</code>为XSD文件的位置，它们中间使用空白符（空格或换行）分隔。</p><p>也可以指定多个XSD文件，格式为：</p><p><code>schemaLocation=&quot;目标名称空间1 XSD文件路径1 目标名称空间2 XSD文件路径2&quot;</code></p><p>下面是spring配置文件的例子，它一共指定两个XSD文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="定义名称空间"><a href="#定义名称空间" class="headerlink" title="定义名称空间"></a>定义名称空间</h5><p>现在我们已经知道一个XML中可以指定多个XSD文件，例如上面Spring的配置文件中就指定了多个XSD文件，那么如果我在<code>&lt;beans&gt;</code>元素中给出一个子元素<code>&lt;bean&gt;</code>，你知道它是哪个名称空间中的么？显然是无法知道的。</p><p>所以只是使用<code>schemaLocation</code>指定XSD是不够的，它只是导入了这个XSD及XSD的名称空间而已。<code>schemaLocation</code>的作用就相当于Java中导入Jar包的作用！最终还是在Java文件中使用import来指定包名的。</p><p><code>xmlns</code>是用来指定名称空间前缀的，所谓前缀就是”简称”，例如中华人民共和国简称中国一样，然后我们在每个元素前面加上前缀，就可以处理名字冲突了。</p><p>格式为：<code>xmln:前缀=&quot;名称空间&quot;</code></p><p>注意，使用<code>xmlns</code>指定的名称空间必须是在<code>schemaLocation</code>中存在的名称空间。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:b</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line">xmlns:aop="http://www.springframework.org/schema/aop"&lt;!--这里指定了两个前缀--&gt;</span><br><span class="line">    xsi:schemaLocation="http://www.springframework.org/schema/beans </span><br><span class="line">                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span><br><span class="line">                      http://www.springframework.org/schema/aop </span><br><span class="line">                      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">b:bean</span>&gt;</span><span class="tag">&lt;/<span class="name">b:bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="默认名称空间"><a href="#默认名称空间" class="headerlink" title="默认名称空间"></a>默认名称空间</h5><p>在一个XML文件中，可以指定一个名称空间没有前缀，那么在当前XML文档中没有前缀的元素就来自默认名称空间。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line">xmlns="http://www.springframework.org/schema/beans"&lt;!--默认名称空间--&gt;</span><br><span class="line">xmlns:aop="http://www.springframework.org/schema/aop"</span><br><span class="line">    xsi:schemaLocation="http://www.springframework.org/schema/beans </span><br><span class="line">                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span><br><span class="line">                      http://www.springframework.org/schema/aop </span><br><span class="line">                      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span><span class="comment">&lt;!--使用默认名称空间--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="W3C的元素和属性"><a href="#W3C的元素和属性" class="headerlink" title="W3C的元素和属性"></a>W3C的元素和属性</h5><p>如果我们的XML文件中需要使用W3C提供的元素和属性，那么可以不在schemaLocation属性中指定XSD文件的位置，但一定要定义名称空间，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;!--指定名称空间--&gt;</span><br><span class="line">      xsi:schemaLocation="http://www.springframework.org/schema/beans </span><br><span class="line">                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span><br><span class="line">                      http://www.springframework.org/schema/aop </span><br><span class="line">                      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"&gt;</span><br><span class="line"><span class="comment">&lt;!--这里无需指定--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面定义了一个名称空间，前缀为xsi，名称空间为<code>http://www.w3.org/2001/XMLSchema-instance</code>。这个名称空间无需在<code>schemaLocation</code>中存在。</p><p>你可能已经发现了，<code>schemaLocation</code>这个属性其实是w3c定义的属性，与元素一定，属性也需要指定”出处”，<code>xsi:schemaLocation</code>中的<code>xsi</code>就是名称空间前缀。也就是说，上面我们在没有指定<code>xsi</code>名称空间时，就直接使用<code>schemaLocation</code>是错误的。也就是在上面其他的例子中，我们是没有指明<code>xsi</code>代表什么的，所以就是错误的，因为不存在<code>xsi</code>这个前缀。</p><h3 id="XML解析器"><a href="#XML解析器" class="headerlink" title="XML解析器"></a>XML解析器</h3><h4 id="DOM-and-SAX-简介"><a href="#DOM-and-SAX-简介" class="headerlink" title="DOM and SAX 简介"></a>DOM and SAX 简介</h4><p>定义：XML是保存数据的文件，XML中保存的数据也需要被程序读取然后使用。那么程序使用什么来读取XML文件中的数据呢？XML解析器！例如.properties文件的解析器是Properties类一样！</p><p>XML不只被Java语言使用，还被C++、C#、Javascript等等语言使用，所以解析XML不是一门语言的工作！</p><p>主流的XML解析有两种标准：DOM和SAX。它们是标准，是思想，不是真正的解析器，它们是跨语言的！！！</p><ul><li><p>DOM（Document Object Model）：W3C组织提供的解析XML文档的标准接口；</p></li><li><p>SAX（Simple API for XML）：社区讨论的产物，是一种事实上的标准。</p></li></ul><p>Apache的xerces组件实现了DOM和SAX，所以在我们在Java中解析XML需要使用xerces。所以我们称xerces是DOM、SAX解析器。</p><p><strong>DOM解析原理</strong></p><p>DOM要求解析器把整个XML文档装载到一个Document对象中。即使用DOM解析器解析XML文档的结果就是一个Document对象。</p><p>一个XML文档解析后对应一个Document对象，可以通过Document对象获取根元素，然后在通过根元素获取根元素的子元素…，这说明DOM解析方式保留了元素之间的结构关系！</p><ul><li><p>优点：元素与元素之间的结构关系保留了下来；</p></li><li><p>缺点：如果XML文档过大，那么把整个XML文档装载进内存，可能会出现内存溢出的现象！</p></li></ul><p><strong>SAX解析原理</strong></p><p>DOM解析后的结果是一个Document对象，而SAX解析没有结果！SAX要求在开始解析之前用户提供一个接口的实现对象，然后把接口实现对象传递给SAX解析器，然后在SAX解析器的过程中不断调用实现对象的方法。</p><ul><li><p>DOM是解析时把数据放到了Document对象中，然后用户从Document中获取需要的数据；</p></li><li><p>SAX要求用户参与到解析过程中来，把想要做的事情写到接口实现对象中，然后SAX在解析过程中来调用接口实现对象的方法。</p></li></ul><p>SAX解析器会在解析XML文档的过程中，在发生特定事件时，调用接口中特定的方法。例如在SAX解析到某个元素的开始标签时，输出元素名称！其中解析到开始标签就是特定的事件，而输出元素名称，就是接口中方法的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口中方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span></span>;<span class="comment">// 开始解析时调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span></span>;<span class="comment">// 结束解析时调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attibutes atts)</span></span>;<span class="comment">// 遇到元素开始标签调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span><span class="comment">// 遇到元素结束标签调用</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span></span>;<span class="comment">// 遇到文本内容调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ignorableWhitespace</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span></span>;<span class="comment">// 遇到元素和元素之间空白调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processingInstruction</span><span class="params">(String target, String data)</span></span>;<span class="comment">// 遇到处理指令时调用</span></span><br></pre></td></tr></table></figure><p>接口的实现由我们来完成，然后我们需要把接口实现类对象”交给”SAX解析器，然后让SAX开始解析。SAX会在特定事件发生时，调用接口中的方法，完成我们交给它的任务。</p><ul><li><p>优点：适合解析大XML文件（内存空间占用小），因为是解析一行处理一行，处理完了就不需要在保留数据了；</p></li><li><p>缺点：因为是解析一行处理一行，解析之后数据就丢失了，所以元素与元素之间的结构关系没有保留下来。</p></li></ul><p><strong>JAXP</strong></p><p>JAXP（Java API for XML Processing）是由Java提供的，JAXP是对所有像xerces一样的解析的提供统一接口的API。</p><p>当我们使用JAXP完成解析工作时，还需要为JAXP指定xerces或其他解析器，当需要更换解析器时，无需修改代码，只需要修改配置即可。</p><p>JAXP不是解析器，但使用它可以方便的切换解析器。所以在我们的程序中只会使用JAXP，而不会直接使用Xeces。</p><p><strong>JDOM和DOM4j</strong></p><p>DOM和SAX是跨语言的XML解析准备，在Java中使用并不方便。而JDOM和DOM4j是专门为Java语言提供的解析工具！使用起来很方便，所以真实开发中使用JDOM或DOM4J比较多。</p><p>又因为DOM4J与JDOM比较结果为DOM4j完胜，所以这里只会对DOM4j介绍，而不会介绍JDOM。</p><h4 id="DOM-和-SAX-解析"><a href="#DOM-和-SAX-解析" class="headerlink" title="DOM 和 SAX 解析"></a>DOM 和 SAX 解析</h4><p>DOM中的核心概念就是节点，在XML文档中的元素、属性、文本、处理指令，在DOM中都是节点！ </p><h5 id="JAXP-DOM"><a href="#JAXP-DOM" class="headerlink" title="JAXP-DOM"></a>JAXP-DOM</h5><p>使用DOM解析XML的目标就是获取到Document对象，然后在从Document中获取到需要的数据。Document对象就是XML文档在内存中的样子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Document对象 三步</span></span><br><span class="line">DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();<span class="comment">// 获取工厂</span></span><br><span class="line">DocumentBuilder builder = factory.newDocumentBuilder();<span class="comment">// 获取解析器</span></span><br><span class="line">Document document = builder.parse(<span class="keyword">new</span> File(<span class="string">"students.xml"</span>));<span class="comment">// 解析xml获得Document</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历Document</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> <span class="keyword">throws</span> SAXException, IOException, ParserConfigurationException </span>&#123;</span><br><span class="line">    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">    DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">    Document document = builder.parse(<span class="keyword">new</span> File(<span class="string">"src/students.xml"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取根元素</span></span><br><span class="line">    Element rootEle = document.getDocumentElement();</span><br><span class="line">    <span class="comment">// 获取元素的所有子节点</span></span><br><span class="line">    NodeList nodeList = rootEle.getChildNodes();</span><br><span class="line">    <span class="comment">// 循环遍历所有节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">        <span class="comment">// 获取其中每个节点</span></span><br><span class="line">        Node node = nodeList.item(i);</span><br><span class="line">        <span class="comment">// 判断节点的类型是否为元素</span></span><br><span class="line">        <span class="keyword">if</span>(node.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">            <span class="comment">// 强转成元素类型</span></span><br><span class="line">            Element stuEle = (Element) node;</span><br><span class="line">            <span class="comment">// 获取元素的名称</span></span><br><span class="line">            String eleName = stuEle.getNodeName();</span><br><span class="line">            <span class="comment">// 获取元素的number属性值</span></span><br><span class="line">            String number = stuEle.getAttribute(<span class="string">"number"</span>);</span><br><span class="line">            <span class="comment">// 获取名为name的子元素，因为返回值为NodeList，</span></span><br><span class="line">            <span class="comment">// 所以需要使用item(0)方法获取第一个name子元素</span></span><br><span class="line">            <span class="comment">// getTextContent()是获取节点的文本内容</span></span><br><span class="line">            String name = stuEle.getElementsByTagName(<span class="string">"name"</span>).item(<span class="number">0</span>).getTextContent();</span><br><span class="line">            String age = stuEle.getElementsByTagName(<span class="string">"age"</span>).item(<span class="number">0</span>).getTextContent();</span><br><span class="line">            String sex = stuEle.getElementsByTagName(<span class="string">"sex"</span>).item(<span class="number">0</span>).getTextContent();</span><br><span class="line"></span><br><span class="line">            System.out.println(eleName + <span class="string">":[number="</span> + number + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", sex="</span> + sex + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JAXP-SAX"><a href="#JAXP-SAX" class="headerlink" title="JAXP-SAX"></a>JAXP-SAX</h5><p>使用SAX解析XML文档需要先给出DefaultHandler的子类，重写其中的方法。然后在使用SAX开始解析时把DefaultHandler子类对象传递给SAX解析器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyContentHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始解析..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"解析结束..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName,</span></span></span><br><span class="line"><span class="function"><span class="params">Attributes atts)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">System.out.println(qName + <span class="string">"元素解析开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">System.out.println(qName + <span class="string">"元素解析结束"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">System.out.print(<span class="keyword">new</span> String(ch, start, length).trim());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用SAX解析首先需要获取工厂，再通过工厂获取解析器对象，然后使用解析对象完成解析工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">SAXParser parser = factory.newSAXParser();</span><br><span class="line">parser.parse(<span class="keyword">new</span> File(<span class="string">"src/students.xml"</span>), <span class="keyword">new</span> MyContentHandler());</span><br></pre></td></tr></table></figure><h4 id="DOM4j-解析"><a href="#DOM4j-解析" class="headerlink" title="DOM4j 解析"></a>DOM4j 解析</h4><p>DOM4J是针对Java开发人员专门提供的XML文档解析规范，它不同与DOM，但与DOM相似。DOM4J针对Java开发人员而设计，所以对于Java开发人员来说，使用DOM4J要比使用DOM更加方便。</p><p>在DOM4J中，也有Node、Document、Element等接口，结构上与DOM中的接口比较相似。但它们是不同的类：</p><p><img src="https://i.loli.net/2020/06/26/lHTBAeoknaLsbif.jpg" alt="img"></p><p>Node</p><ul><li><p>Attribute：表示属性节点；</p></li><li><p>Branch：表示可以包含子元素的节点：</p><ul><li>Document：表示整个文档；</li><li>Element：表示元素节点；</li></ul></li><li><p>CharacterData：表示文本节点：</p><ul><li>Text：表示文本内容；</li><li>CDATA：表示CDATA段内容；</li><li>Comment：表示注释内容。</li></ul></li></ul><p>再次强调，DOM和DOM4J是不同的，DOM中的Document是org.w3c.Document，而DOM4J中的Document是org.dom4j.Document，它们是不同的类，其他Node、Element也是一样。</p><h5 id="读取、保存、创建Document"><a href="#读取、保存、创建Document" class="headerlink" title="读取、保存、创建Document"></a>读取、保存、创建Document</h5><p>使用dom4j需要导入：</p><ul><li><p>dom4j.jar</p></li><li><p>jaxen.jar</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取</span></span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">Document doc = reader.read(<span class="string">"src/students.xml"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存xml文档</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建格式化器，使用\t缩进，添加换行</span></span><br><span class="line">OutputFormat format = <span class="keyword">new</span> OutputFormat(<span class="string">"\t"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 清空数据中原有的换行</span></span><br><span class="line">format.setTrimText(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 创建XML输出流对象</span></span><br><span class="line">XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileWriter(<span class="string">"src/a.xml"</span>), format);</span><br><span class="line"><span class="comment">// 输出Document</span></span><br><span class="line">writer.write(doc);</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Document</span></span><br><span class="line">Document doc = DocumentHelper.createDocument();</span><br></pre></td></tr></table></figure><p>遍历Document</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">    SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">    Document doc = reader.read(<span class="string">"src/students.xml"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取根元素</span></span><br><span class="line">    Element rootEle = doc.getRootElement();</span><br><span class="line">    <span class="comment">// 获取根元素的所有子元素</span></span><br><span class="line">    List&lt;Element&gt; eleList = rootEle.elements();</span><br><span class="line">    <span class="comment">// 遍历元素集合</span></span><br><span class="line">    <span class="keyword">for</span> (Element stuEle : eleList) &#123;</span><br><span class="line">        <span class="comment">// 获取元素名称</span></span><br><span class="line">        String eleName = stuEle.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取元素的number属性值</span></span><br><span class="line">        String number = stuEle.attributeValue(<span class="string">"number"</span>);</span><br><span class="line">        <span class="comment">// 获取元素的name子元素内容</span></span><br><span class="line">        String name = stuEle.elementText(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">// 获取元素的age子元素内容</span></span><br><span class="line">        String age = stuEle.elementText(<span class="string">"age"</span>);</span><br><span class="line">        <span class="comment">// 获取元素的sex子元素内容</span></span><br><span class="line">        String sex = stuEle.elementText(<span class="string">"sex"</span>);</span><br><span class="line">        System.out.println(eleName + <span class="string">": [number="</span> + number + <span class="string">", name="</span></span><br><span class="line">                           + name + <span class="string">", age="</span> + age + <span class="string">", sex="</span> + sex + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加student元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">Document doc = reader.read(<span class="string">"src/students.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取根元素&lt;students&gt;</span></span><br><span class="line">Element root = doc.getRootElement();</span><br><span class="line"><span class="comment">// 为root添加名为student的子元素，并返回这个新添加的子元素</span></span><br><span class="line">Element stuEle = root.addElement(<span class="string">"student"</span>);</span><br><span class="line"><span class="comment">// 给元素添加属性number，值为123</span></span><br><span class="line">stuEle.addAttribute(<span class="string">"number"</span>, <span class="string">"123"</span>);</span><br><span class="line"><span class="comment">// 添加子元素name，并设置name子元素的文本内容为wangWu</span></span><br><span class="line">stuEle.addElement(<span class="string">"name"</span>).setText(<span class="string">"wangWu"</span>);</span><br><span class="line">stuEle.addElement(<span class="string">"age"</span>).setText(<span class="string">"30"</span>);</span><br><span class="line">stuEle.addElement(<span class="string">"sex"</span>).setText(<span class="string">"male"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建格式化器，使用\t缩进，添加换行</span></span><br><span class="line">OutputFormat format = <span class="keyword">new</span> OutputFormat(<span class="string">"\t"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 清空数据中原有的换行</span></span><br><span class="line">format.setTrimText(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 创建XML输出流对象</span></span><br><span class="line">XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileWriter(<span class="string">"src/a.xml"</span>), format);</span><br><span class="line"><span class="comment">// 输出Document</span></span><br><span class="line">writer.write(doc);</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure><p>查询元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">Document doc = reader.read(<span class="string">"src/students.xml"</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * selectSingNode()方法的参数是XPath</span></span><br><span class="line"><span class="comment"> * XPath是在XML文档中查找的一门表达式语言</span></span><br><span class="line"><span class="comment"> * "//"表示查找整个XML文档</span></span><br><span class="line"><span class="comment"> * student表示查找名为student的元素</span></span><br><span class="line"><span class="comment"> * []表示条件</span></span><br><span class="line"><span class="comment"> * @number表示number属性</span></span><br><span class="line"><span class="comment"> * @number='ITCAST_1001'表示条件为number属性等于ITCAST_1001</span></span><br><span class="line"><span class="comment"> * selectSingNode()方法在查找到多个满足XPath的元素时，只返回第一个。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Element stuEle1 = (Element)doc.selectSingleNode(<span class="string">"//student[@number='ITCAST_1001']"</span>);</span><br><span class="line"><span class="comment">// 把元素转换成字符串</span></span><br><span class="line">System.out.println(stuEle1.asXML());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找name子元素内容为liSi的student元素</span></span><br><span class="line">Element stuEle2 = (Element) doc.selectSingleNode(<span class="string">"//student[name='liSi']"</span>);</span><br><span class="line">System.out.println(stuEle2.asXML());</span><br></pre></td></tr></table></figure><p>修改元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">Document doc = reader.read(<span class="string">"src/students.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找元素</span></span><br><span class="line">Element stuEle = (Element)doc.selectSingleNode(<span class="string">"//student[@number='ITCAST_1001']"</span>);</span><br><span class="line"><span class="comment">// 修改student元素的name子元素内容为"张三"</span></span><br><span class="line">stuEle.element(<span class="string">"name"</span>).setText(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建格式化器，使用\t缩进，添加换行</span></span><br><span class="line">OutputFormat format = <span class="keyword">new</span> OutputFormat(<span class="string">"\t"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 清空数据中原有的换行</span></span><br><span class="line">format.setTrimText(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 创建XML输出流对象</span></span><br><span class="line">XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileWriter(<span class="string">"src/a.xml"</span>), format);</span><br><span class="line"><span class="comment">// 输出Document</span></span><br><span class="line">writer.write(doc);</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure><p>删除学生元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">Document doc = reader.read(<span class="string">"src/students.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找元素</span></span><br><span class="line">Element stuEle = (Element)doc.selectSingleNode(<span class="string">"//student[@number='ITCAST_1001']"</span>);</span><br><span class="line"><span class="comment">// 获取父元素来删除元素</span></span><br><span class="line">stuEle.getParent().remove(stuEle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建格式化器，使用\t缩进，添加换行</span></span><br><span class="line">OutputFormat format = <span class="keyword">new</span> OutputFormat(<span class="string">"\t"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 清空数据中原有的换行</span></span><br><span class="line">format.setTrimText(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 创建XML输出流对象</span></span><br><span class="line">XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileWriter(<span class="string">"src/a.xml"</span>), format);</span><br><span class="line"><span class="comment">// 输出Document</span></span><br><span class="line">writer.write(doc);</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure><h5 id="DOM4j-API-介绍"><a href="#DOM4j-API-介绍" class="headerlink" title="DOM4j API 介绍"></a>DOM4j API 介绍</h5><p>Node方法：</p><ul><li><p>String asXML()：把当前节点转换成字符串，如果当前Node是Document，那么就会把整个XML文档返回；</p></li><li><p>String getName()：获取当前节点名字；Document的名字就是绑定的XML文档的路径；Element的名字就是元素名称；Attribute的名字就是属性名；</p></li><li><p>Document getDocument()：返回当前节点所在的Document对象；</p></li><li><p>short getNodeType()：获取当前节点的类型；</p></li><li><p>String getNodeTypeName()：获取当前节点的类型名称，例如当前节点是Document的话，那么该方法返回Document；</p></li><li><p>String getStringValue()：获取当前节点的子孙节点中所有文本内容连接成的字符串；</p></li><li><p>String getText()：获取当前节点的文本内容。如果当前节点是Text等文本节点，那么本方法返回文本内容；例如当前节点是Element，那么当前节点的内容不是子元素，而是纯文本内容，那么返回文本内容，否则返回空字符串；</p></li><li><p>void setDocument(Document doc)：给当前节点设置文档元素；</p></li><li><p>void setParent(Element parent)：给当前节点设置父元素；</p></li><li><p>void setText(String text)：给当前节点设置文本内容；</p></li></ul><p>Branch方法：</p><ul><li>void add(Element e)：添加子元素；</li><li>void add(Node node)：添加子节点；</li><li>void add(Comment comment)：添加注释；</li><li>Element addElement(String eleName)：通过名字添加子元素，返回值为子元素对象；</li><li>void clearContent()：清空所有子内容；</li><li>List content()：获取所有子内容，与获取所有子元素的区别是，<name>liSi</name>元素没有子元素，但有子内容；</li><li>Element elementById(String id)：如果元素有名为”ID”的属性，那么可以使用这个方法来查找；</li><li>int indexOf(Node node)：查找子节点在子节点列表中的下标位置；</li><li>Node node(int index)：通过下标获取子节点；</li><li>int nodeCount()：获取子节点的个数；</li><li>Iterator nodeIterator()：获取子节点列表的迭代器对象；</li><li>boolean remove(Node node)：移除指定子节点；</li><li>boolean remove(Commont commont)：移除指定注释；</li><li>boolean remove(Element e)：移除指定子元素；</li><li>void setContent(List content) ：设置子节点内容；</li></ul><p>Document方法：</p><ul><li>Element getRootElement()：获取根元素；</li><li>void setRootElement()：设置根元素；</li><li>String getXmlEncoding()：获取XML文档的编码；</li><li>void setXmlEncoding()：设置XML文档的编码；</li></ul><p>Element方法：</p><ul><li>void add(Attribute attr)：添加属性节点；</li><li>void add(CDATA cdata)：添加CDATA段节点；</li><li>void add(Text Text)：添加Text节点；</li><li>Element addAttribute(String name, String value)：添加属性，返回值为当前元素本身；</li><li>Element addCDATA(String cdata)：添加CDATA段节点；</li><li>Element addComment(String comment)：添加属性节点；</li><li>Element addText(String text)：添加Text节点；</li><li>void appendAttributes(Element e)：把参数元素e的所有属性添加到当前元素中；</li><li>Attribute attribute(int index)：获取指定下标位置上的属性对象；</li><li>Attribute attribute(String name)：通过指定属性名称获取属性对象；</li><li>int attributeCount()：获取属性个数；</li><li>Iterator attributeIterator()：获取当前元素属性集合的迭代器；</li><li>List attributes()：获取当前元素的属性集合；</li><li>String attributeValue(String name)：获取当前元素指定名称的属性值；</li><li>Element createCopy()：clone当前元素对象，但不会copy父元素。也就是说新元素没有父元素，但有子元素；</li><li>Element element(String name)：获取当前元素第一个名称为name的子元素；</li><li>Iterator elementIterator()：获取当前元素的子元素集合的迭代器；</li><li>Iterator elementIterator(String name)：获取当前元素中指定名称的子元素集合的迭代器；</li><li>List elements()：获取当前元素子元素集合；</li><li>List elements(String name)：获取当前元素指定名称的子元素集合；</li><li>String elementText(String name)：获取当前元素指定名称的第一个元素文件内容；</li><li>String elementTextTrime(String name)：同上，只是去除了无用空白；</li><li>boolean isTextOnly()：当前元素是否为纯文本内容元素；</li><li>boolean remove(Attribute attr)：移除属性；</li><li>boolean remove(CDATA cdata)：移除CDATA；</li><li>boolean remove(Text text)：移除Text。</li></ul><p>DocumentHelper静态方法介绍：</p><ul><li>static Document createDocument()：创建Dcoument对象；</li><li>static Element createElement(String name)：创建指定名称的元素对象；</li><li>static Attribute createAttrbute(Element owner, String name, String value)：创建属性对象；</li><li>static Text createText(String text)：创建属性对象；</li><li>static Document parseText(String text)：通过给定的字符串生成Document对象；</li></ul><hr><h2 id="Day-03"><a href="#Day-03" class="headerlink" title="Day 03"></a>Day 03</h2><p><em>27/06/2020</em></p><h4 id="C-S"><a href="#C-S" class="headerlink" title="C/S"></a>C/S</h4><ul><li><p>C/S结构即客户端/服务器（Client/Server），例如QQ；</p></li><li><p>需要编写服务器端程序，以及客户端程序，例如我们安装的就是QQ的客户端程序；</p></li><li><p>缺点：软件更新时需要同时更新客户端和服务器端两端，比较麻烦；</p></li><li><p>优点：安全性比较好。</p></li></ul><h4 id="B-S"><a href="#B-S" class="headerlink" title="B/S"></a>B/S</h4><ul><li>B/S结构即浏览器/服务器（Browser/Server）；</li><li>优点：只需要编写服务器端程序；</li><li>缺点：安全性较差。</li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>Tomcat的目录结构</p><ul><li><p>bin：该目录下存放的是二进制可执行文件，如果是安装版，那么这个目录下会有两个exe文件：tomcat6.exe、tomcat6w.exe，前者是在控制台下启动Tomcat，后者是弹出UGI窗口启动Tomcat；如果是解压版，那么会有startup.bat和shutdown.bat文件，startup.bat用来启动Tomcat，但需要先配置JAVA_HOME环境变量才能启动，shutdawn.bat用来停止Tomcat；</p></li><li><p>conf：这是一个非常非常重要的目录，这个目录下有四个最为重要的文件：</p><ul><li>server.xml：配置整个服务器信息。例如修改端口号，添加虚拟主机等；下面会详细介绍这个文件；</li><li>tomcatusers.xml：存储tomcat用户的文件，这里保存的是tomcat的用户名及密码，以及用户的角色信息。可以按着该文件中的注释信息添加tomcat用户，然后就可以在Tomcat主页中进入Tomcat Manager页面了；</li><li>web.xml：部署描述符文件，这个文件中注册了很多MIME类型，即文档类型。这些MIME类型是客户端与服务器之间说明文档类型的，如用户请求一个html网页，那么服务器还会告诉客户端浏览器响应的文档是text/html类型的，这就是一个MIME类型。客户端浏览器通过这个MIME类型就知道如何处理它了。当然是在浏览器中显示这个html文件了。但如果服务器响应的是一个exe文件，那么浏览器就不可能显示它，而是应该弹出下载窗口才对。MIME就是用来说明文档的内容是什么类型的！</li><li>context.xml：对所有应用的统一配置，通常我们不会去配置它。</li></ul></li><li><p>lib：Tomcat的类库，里面是一大堆jar文件。如果需要添加Tomcat依赖的jar文件，可以把它放到这个目录中，当然也可以把应用依赖的jar文件放到这个目录中，这个目录中的jar所有项目都可以共享之，但这样你的应用放到其他Tomcat下时就不能再共享这个目录下的Jar包了，所以建议只把Tomcat需要的Jar包放到这个目录下；</p></li><li><p>logs：这个目录中都是日志文件，记录了Tomcat启动和关闭的信息，如果启动Tomcat时有错误，那么异常也会记录在日志文件中。</p></li><li><p>temp：存放Tomcat的临时文件，这个目录下的东西可以在停止Tomcat后删除！</p></li><li><p>webapps：存放web项目的目录，其中每个文件夹都是一个项目；如果这个目录下已经存在了目录，那么都是tomcat自带的。项目。其中ROOT是一个特殊的项目，在地址栏中没有给出项目目录时，对应的就是ROOT项目。<code>http://localhost:8080/examples</code>，进入示例项目。其中examples就是项目名，即文件夹的名字。</p></li><li><p>work：运行时生成的文件，最终运行的文件都在这里。通过webapps中的项目生成的！可以把这个目录下的内容删除，再次运行时会生再次生成work目录。当客户端用户访问一个JSP文件时，Tomcat会通过JSP生成Java文件，然后再编译Java文件生成class文件，生成的java和class文件都会存放到这个目录下。</p></li><li><p>LICENSE：许可证。</p></li><li><p>NOTICE：说明文件。</p></li></ul><h4 id="Web-应用"><a href="#Web-应用" class="headerlink" title="Web 应用"></a>Web 应用</h4><h5 id="静态应用"><a href="#静态应用" class="headerlink" title="静态应用"></a>静态应用</h5><ul><li>在webapps下创建一个hello目录；</li><li>在webapps\hello\下创建index.html；</li><li>启动tomcat；</li><li>打开浏览器访问<code>http://localhost:8080/hello/index.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="动态应用"><a href="#动态应用" class="headerlink" title="动态应用"></a>动态应用</h5><ul><li>在webapps下创建hello1目录；</li><li>在webapps\hello1\下创建WEB-INF目录；</li><li>在webapps\hello1\WEB-INF\下创建web.xml；</li><li>在webapps\hello1\下创建index.html。</li><li>打开浏览器访问<code>http://localhost:8080/hello/index.html</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="tag"><span class="string">http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整的Web应用还需要在WEB-INF目录下创建：</p><ul><li>classes；</li><li>lib目录；</li></ul><p>webapps</p><p>|- hello</p><p>​    |-index.html</p><p>​    |-WEB-INF</p><p>​        |-web.xml</p><p>​        |-classes</p><p>​        |-lib</p><ul><li>hello：应用目录，hello就是应用的名称；</li><li>index.html：应用资源。应用下可以有多个资源，例如css、js、html、jsp等，也可以把资源放到文件夹中，例如：hello\html\index.html，这时访问URL为：<a href="http://localhost:8080/hello/html/index.html；" target="_blank" rel="noopener">http://localhost:8080/hello/html/index.html；</a></li><li>WEB-INF：这个目录名称必须是大写，这个目录下的东西是无法通过浏览器直接访问的，也就是说放到这里的东西是安全的；</li><li>web.xml：应用程序的部署描述符文件，可以在该文件中对应用进行配置，例如配置应用的首页</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>classes：存放class文件的目录；</p></li><li><p>lib：存放jar包的目录；</p></li></ul><h5 id="配置外部应用"><a href="#配置外部应用" class="headerlink" title="配置外部应用"></a>配置外部应用</h5><p>也可以把应用放到Tomcat之外，这就是外部应用了。例如我们把上面写的hello应用从webapps目录中剪切到C盘下，即C:/hello。现在hello这个Web应用已经不在Tomcat中了，这时我们需要在tomcat中配置外部应用的位置，配置的方式一共有两种：</p><ul><li>conf/server.xml：打开server.xml文件，找到<code>&lt;Host&gt;</code>元素，在其中添加<code>&lt;Context&gt;</code>元素，代码如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span> <span class="attr">appBse</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"itcast_hello"</span> <span class="attr">docBse</span>=<span class="string">"C:/hello/"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1）path：指定当前应用的名称</p><p>2）docBase：指定应用的物理位置</p><p>3）浏览器访问路径：<code>http://localhost:8080/itcast_hello/index.html</code></p><ul><li>conf/catalana/localhost：在该目录下创建itcast_hello.xml文件，在该文件中编写<code>&lt;Context&gt;</code>元素，代码如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"C:/hello/"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>1）文件名：指定当前应用的名称；</p><p>2）docBase：指定应用的物理位置；</p><p>3）浏览器访问路径：<code>http://localhost:8080/itcast_hello/index.html</code></p><h5 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Servier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;Server&gt;</code>：根元素，表示整个服务器的配置信息；</li><li><code>&lt;Service&gt;</code>：<code>&lt;Server&gt;</code>的子元素，在<code>&lt;Server&gt;</code>中只能有一个<code>&lt;Service&gt;</code>元素，它表示服务；</li><li><code>&lt;Connector&gt;</code>：<code>&lt;Service&gt;</code>的子元素，在<code>&lt;Service&gt;</code>中可以有N个<code>&lt;Connector&gt;</code>元素，它表示连接。</li><li><code>&lt;Engine&gt;</code>：<code>&lt;Service&gt;</code>的子元素，在<code>&lt;Service&gt;</code>中只能有一<code>&lt;Engine&gt;</code>元素，该元素表示引擎，它是<code>&lt;Service&gt;</code>组件的核心。</li><li><code>&lt;Host&gt;</code>：<code>&lt;Engine&gt;</code>的子元素，在<code>&lt;Engine&gt;</code>中可以有N个<code>&lt;Host&gt;</code>元素，每个<code>&lt;Host&gt;</code>元素表示一个虚拟主机。所谓虚拟主机就像是真的主机一样，每个主机都有自己的主机名和项目目录。例如<code>&lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot;&gt;</code>表示主机名为localhost，这个主机的项目存放在webapps目录中。访问这个项目下的主机时，需要使用localhost主机名，项目都存放在webapps目录下。</li><li><code>&lt;Context&gt;</code>：<code>&lt;Host&gt;</code>元素的子元素，在<code>&lt;Host&gt;</code>中可以有N个<code>&lt;Context&gt;</code>元素，每个<code>&lt;Context&gt;</code>元素表示一个应用。如果应用在<code>&lt;Host&gt;</code>的appBase指定的目录下，那么可以不配置<code>&lt;Context&gt;</code>元素，如果是外部应用，那么就必须配置<code>&lt;Context&gt;</code>。如果要为应用指定资源，也需要配置<code>&lt;Context&gt;</code>元素。</li></ul><p>我们可以把<code>&lt;Server&gt;</code>看作是一个大酒店：</p><ul><li><p><code>&lt;Service&gt;</code>：酒店的服务部门；</p></li><li><p><code>&lt;Connector&gt;</code>：服务员；</p></li><li><p><code>&lt;Engine&gt;</code>：后厨；</p></li><li><p><code>&lt;Host&gt;</code>：后厨中的一个区，例如川菜区是一个<code>&lt;Host&gt;</code>、粤菜区是一个<code>&lt;Host&gt;</code>；</p></li><li><p><code>&lt;Context&gt;</code>：后厨的一个厨师。</p></li></ul><p>用户发出一个请求：<code>http://localhost:8080/hello/index.jsp</code>。发现是http/1.1协议，而且还是8080端口，所以就交给了处理这一请求的”服务员（处理HTTP请求的<code>&lt;Connector&gt;</code>）”，”服务员”再把请求交给了”后厨（<code>&lt;Engine&gt;</code>）”，因为请求是要一盘水煮鱼，所以由”川菜区（<code>&lt;Host&gt;</code>）”负责，因为”大老王师傅<code>&lt;Context&gt;</code>“做水煮鱼最地道，所以由它完成。</p><ul><li><code>&lt;Connector&gt;</code>：关心请求中的http、和8080；</li><li><code>&lt;Host&gt;</code>：关心localhost；</li><li><code>&lt;Context&gt;</code>：关心hello</li></ul><h5 id="映射虚拟主机"><a href="#映射虚拟主机" class="headerlink" title="映射虚拟主机"></a>映射虚拟主机</h5><p>我们的目标是，在浏览器中输出：<code>http://www.itcast.cn</code>就可以访问我们的项目。</p><p>完成这一目标，我们需要做三件事：</p><ul><li><p>修改端口号为80，这一点应该没有问题吧；</p></li><li><p>在本机上可以解析域名为127.0.0.1，这需要修改C:\WINDOWS\system32\drivers\etc\hosts文件，添加对<code>http://www.itcast.cn</code>和127.0.01的绑定关系；</p></li><li><p>在server.xml文件中添加一个<code>&lt;Host&gt;</code>（主机）。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"www.itcast.cn"</span> <span class="attr">appBase</span>=<span class="string">"F:/itcastapps"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>name=&quot;www.itcast.cn&quot;</code>：指定虚拟主机名为<code>www.itcast.cn</code>；</li><li>appBase=”F:/itcastapps”：指定当前虚拟主机的应用程序存放目录为F:/itcastapps。</li><li>在itcastapps目录下创建名为ROOT的应用，因为一个主机只可以有一个名为ROOT的应用，名为ROOT的应用在浏览器中访问是可以不给出应用名称。</li></ul><h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><p>HTTP（hypertext transport protocol），即超文本传输协议。这个协议详细规定了浏览器和万维网服务器之间互相通信的规则。</p><p>HTTP就是一个通信规则，通信规则规定了客户端发送给服务器的内容格式，也规定了服务器发送给客户端的内容格式。其实我们要学习的就是这个两个格式！客户端发送给服务器的格式叫”请求协议”；服务器发送给客户端的格式叫”响应协议”。  </p><h4 id="URL-和-URI"><a href="#URL-和-URI" class="headerlink" title="URL 和 URI"></a>URL 和 URI</h4><p>URL：统一资源定位符，就是一个网址，例如：<code>http://www.itcast.cn</code>就是一个URL。<code>/hello/index.html</code>也是一个URL，URL必须是一个真实存在的网址。</p><p>URI：统一资源标识符：比URI包含了URL，URI的范围更加宽泛，URI可以是一个不存在的网址。在网络上用来标签资源的都是URI，例如<code>zhangSan@163.com</code>也是URI。</p><h4 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h4><p>请求协议的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求首行；  </span><br><span class="line">请求头信息；  </span><br><span class="line">空行；  </span><br><span class="line">请求体。</span><br></pre></td></tr></table></figure><p>浏览器发送给服务器的内容就这个格式的，如果不是这个格式服务器将无法解读！在HTTP协议中，请求有很多请求方法，其中最为常用的就是GET和POST。不同的请求方法之间的区别，后面会一点一点的介绍。</p><h4 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h4><p>响应协议的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">响应首行；</span><br><span class="line">响应头信息；</span><br><span class="line">空行；</span><br><span class="line">响应体。</span><br></pre></td></tr></table></figure><p>响应内容是由服务器发送给浏览器的内容，浏览器会根据响应内容来显示。</p><hr><h2 id="Day-04"><a href="#Day-04" class="headerlink" title="Day 04"></a>Day 04</h2><p><em>28/06/2020</em></p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p>Servlet是JavaWeb的三大组件之一，它属于动态资源。Servlet的作用是处理请求，服务器会把接收到的请求交给Servlet来处理，在Servlet中通常需要：</p><ul><li>接收请求数据；</li><li>处理请求；</li><li>完成响应。</li></ul><p>　　例如客户端发出登录请求，或者输出注册请求，这些请求都应该由Servlet来完成处理！Servlet需要我们自己来编写，每个Servlet必须实现<code>javax.servlet.Servlet</code>接口。</p><h4 id="实现Servlet的方式"><a href="#实现Servlet的方式" class="headerlink" title="实现Servlet的方式"></a>实现Servlet的方式</h4><p>实现Servlet有三种方式：</p><ul><li>实现javax.servlet.Servlet接口；</li><li>继承javax.servlet.GenericServlet类；</li><li>继承javax.servlet.http.HttpServlet类；</li></ul><p>通常我们会去继承HttpServlet类来完成我们的Servlet，但学习Servlet还要从javax.servlet.Servlet接口开始学习。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Servlet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><p>开始第一个Servlet应用！首先在webapps目录下创建helloservlet目录，它就是我们的应用目录了，然后在helloservlet目录中创建准备JavaWeb应用所需内容：</p><ul><li><p>创建/helloservlet/WEB-INF目录；</p></li><li><p>创建/helloservlet/WEB-INF/classes目录；</p></li><li><p>创建/helloservlet/WEB-INF/lib目录；</p></li><li><p>创建/helloservlet/WEB-INF/web.xml文件；</p></li></ul><p>接下来我们开始准备完成Servlet，完成Servlet需要分为两步：</p><ul><li><p>编写Servlet类；</p></li><li><p>在web.xml文件中配置Servlet；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloServlet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello servlet!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们暂时忽略Servlet中其他四个方法，只关心service()方法，因为它是用来处理请求的方法。我们在该方法内给出一条输出语句！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml 重要 背--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloworld<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在web.xml中配置Servlet的目的其实只有一个，就是把访问路径与一个Servlet绑定到一起，上面配置是把访问路径：”/helloworld”与”cn.itcast.servlet.HelloServlet”绑定到一起。</p><ul><li><p><code>&lt;servlet&gt;</code>：指定HelloServlet这个Servlet的名称为hello；</p></li><li><p><code>&lt;servlet-mapping&gt;</code>：指定/helloworld访问路径所以访问的Servlet名为hello。</p></li><li><p><code>&lt;servlet&gt;</code>和<code>&lt;servlet-mapping&gt;</code>通过<code>&lt;servlet-name&gt;</code>这个元素关联在一起了！</p></li></ul><p>接下来，我们编译HelloServlet，注意，编译HelloServlet时需要导入servlet-api.jar，因为Servlet.class等类都在servlet-api.jar中。</p><p>javac -classpath F:/tomcat6/lib/servlet-api.jar -d . HelloServlet.java</p><p>然后把HelloServlet.class放到/helloworld/WEB-INF/classes/目录下，然后启动Tomcat，在浏览器中访问：<code>http://localhost:8080/helloservlet/helloworld</code>即可在控制台上看到输出！</p><ul><li>/helloservlet/WEB-INF/classes/cn/itcast/servlet/HelloServlet.class；</li></ul><h3 id="Servlet接口"><a href="#Servlet接口" class="headerlink" title="Servlet接口"></a>Servlet接口</h3><h4 id="Servlet-的生命周期"><a href="#Servlet-的生命周期" class="headerlink" title="Servlet 的生命周期"></a>Servlet 的生命周期</h4><p>所谓xxx的生命周期，就是说xxx的出生、服务，以及死亡。Servlet生命周期也是如此！与Servlet的生命周期相关的方法有：</p><ul><li><p>void init(ServletConfig)；</p></li><li><p>void service(ServletRequest,ServletResponse)；</p></li><li><p>void destroy()；</p><h5 id="init"><a href="#init" class="headerlink" title="init"></a>init</h5></li></ul><p>服务器会在Servlet第一次被访问时创建Servlet，或者是在服务器启动时创建Servlet。如果服务器启动时就创建Servlet，那么还需要在web.xml文件中配置。也就是说默认情况下，Servlet是在第一次被访问时由服务器创建的。</p><p>而且一个Servlet类型，服务器只创建一个实例对象，例如在我们首次访问<code>http://localhost:8080/helloservlet/helloworld</code>时，服务器通过”/helloworld”找到了绑定的Servlet名称为cn.itcast.servlet.HelloServlet，然后服务器查看这个类型的Servlet是否已经创建过，如果没有创建过，那么服务器才会通过反射来创建HelloServlet的实例。当我们再次访问<code>http://localhost:8080/helloservlet/helloworld</code>时，服务器就不会再次创建HelloServlet实例了，而是直接使用上次创建的实例。</p><p>在Servlet被创建后，服务器会马上调用Servlet的<code>void init(ServletConfig)</code>方法。请记住， Servlet出生后马上就会调用<code>init()</code>方法，而且一个Servlet的一生。这个方法只会被调用一次。这好比小孩子出生后马上就要去剪脐带一样，而且剪脐带一生只有一次。</p><p>我们可以把一些对Servlet的初始化工作放到init方法中！</p><h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><p>当服务器每次接收到请求时，都会去调用Servlet的<code>service()</code>方法来处理请求。服务器接收到一次请求，就会调用<code>service()</code>方法一次，所以<code>service()</code>方法是会被调用多次的。正因为如此，所以我们才需要把处理请求的代码写到<code>service()</code>方法中！</p><h5 id="destroy"><a href="#destroy" class="headerlink" title="destroy"></a>destroy</h5><p>Servlet是不会轻易离去的，通常都是在服务器关闭时Servlet才会离去！在服务器被关闭时，服务器会去销毁Servlet，在销毁Servlet之前服务器会先去调用Servlet的<code>destroy()</code>方法，我们可以把Servlet的临终遗言放到<code>destroy()</code>方法中，例如对某些资源的释放等代码放到<code>destroy()</code>方法中。</p><h4 id="Servlet-接口相关类型"><a href="#Servlet-接口相关类型" class="headerlink" title="Servlet 接口相关类型"></a>Servlet 接口相关类型</h4><p>在Servlet接口中还存在三个我们不熟悉的类型：</p><ul><li><p>ServletRequest：<code>service()</code> 方法的参数，它表示请求对象，它封装了所有与请求相关的数据，它是由服务器创建的；</p></li><li><p>ServletResponse：<code>service()</code>方法的参数，它表示响应对象，在<code>service()</code>方法中完成对客户端的响应需要使用这个对象；</p></li><li><p>ServletConfig：<code>init()</code>方法的参数，它表示Servlet配置对象，它对应Servlet的配置信息，那对应web.xml文件中的<code>&lt;servlet&gt;</code>元素。</p></li></ul><h5 id="ServletRequest和ServletResponse"><a href="#ServletRequest和ServletResponse" class="headerlink" title="ServletRequest和ServletResponse"></a>ServletRequest和ServletResponse</h5><p>ServletRequest和ServletResponse是Servlet#<code>service()</code> 方法的两个参数，一个是请求对象，一个是响应对象，可以从ServletRequest对象中获取请求数据，可以使用ServletResponse对象完成响应。你以后会发现，这两个对象就像是一对恩爱的夫妻，永远不分离，总是成对出现。</p><p>ServletRequest和ServletResponse的实例由服务器创建，然后传递给service()方法。如果在service() 方法中希望使用HTTP相关的功能，那么可以把ServletRequest和ServletResponse强转成HttpServletRequest和HttpServletResponse。这也说明我们经常需要在service()方法中对ServletRequest和ServletResponse进行强转，这是很心烦的事情。不过后面会有一个类来帮我们解决这一问题的。</p><p>HttpServletRequest方法：</p><ul><li><p>String getParameter(String paramName)：获取指定请求参数的值；</p></li><li><p>String getMethod()：获取请求方法，例如GET或POST；</p></li><li><p>String getHeader(String name)：获取指定请求头的值；</p></li><li><p>void setCharacterEncoding(String encoding)：设置请求体的编码！因为GET请求没有请求体，所以这个方法只只对POST请求有效。当调用<code>request.setCharacterEncoding(&quot;utf-8&quot;)</code>之后，再通过getParameter()方法获取参数值时，那么参数值都已经通过了转码，即转换成了UTF-8编码。所以，这个方法必须在调用getParameter()方法之前调用！</p></li></ul><p>HttpServletResponse方法：</p><ul><li><p>PrintWriter getWriter()：获取字符响应流，使用该流可以向客户端输出响应信息。例如<code>response.getWriter().print(&quot;&lt;h1&gt;Hello JavaWeb!&lt;/h1&gt;&quot;)</code>；</p></li><li><p>ServletOutputStream getOutputStream()：获取字节响应流，当需要向客户端响应字节数据时，需要使用这个流，例如要向客户端响应图片；</p></li><li><p>void setCharacterEncoding(String encoding)：用来设置字符响应流的编码，例如在调用<code>setCharacterEncoding(&quot;utf-8&quot;)</code>;之后，再<code>response.getWriter()</code>获取字符响应流对象，这时的响应流的编码为utf-8，使用response.getWriter()输出的中文都会转换成utf-8编码后发送给客户端；</p></li><li><p>void setHeader(String name, String value)：向客户端添加响应头信息，例如<code>setHeader(&quot;Refresh&quot;, &quot;3;url=http://www.itcast.cn&quot;)</code>，表示3秒后自动刷新到<code>http://www.itcast.cn</code>；</p></li><li><p>void setContentType(String contentType)：该方法是<code>setHeader(&quot;content-type&quot;, &quot;xxx&quot;)</code>的简便方法，即用来添加名为content-type响应头的方法。content-type响应头用来设置响应数据的MIME类型，例如要向客户端响应jpg的图片，那么可以<code>setContentType(&quot;image/jepg&quot;)</code>，如果响应数据为文本类型，那么还要台同时设置编码，例如<code>setContentType(&quot;text/html;chartset=utf-8&quot;)</code>表示响应数据类型为文本类型中的html类型，并且该方法会调用<code>setCharacterEncoding(&quot;utf-8&quot;)</code>方法；</p></li><li><p>void sendError(int code, String errorMsg)：向客户端发送状态码，以及错误消息。例如给客户端发送404：<code>response(404, &quot;您要查找的资源不存在！&quot;)</code>。</p></li></ul><h5 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h5><p>ServletConfig对象对应web.xml文件中的<code>&lt;servlet&gt;</code>元素。例如你想获取当前Servlet在web.xml文件中的配置名，那么可以使用servletConfig.getServletName()方法获取！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>One<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        cn.itcast.servlet.OneServlet</span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ServletConfig对象是由服务器创建的，然后传递给Servlet的init()方法，你可以在init()方法中使用它！</p><ul><li><p>String getServletName()：获取Servlet在web.xml文件中的配置名称，即<code>&lt;servlet-name&gt;</code>指定的名称；</p></li><li><p>ServletContext getServletContext()：用来获取ServletContext对象，ServletContext会在后面讲解；</p></li><li><p>String getInitParameter(String name)：用来获取在web.xml中配置的初始化参数，通过参数名来获取参数值；</p></li><li><p>Enumeration getInitParameterNames()：用来获取在web.xml中配置的所有初始化参数名称；</p></li></ul><p>在<code>&lt;servlet&gt;</code>元素中还可以配置初始化参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>One<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.servlet.OneServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>paramName1<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>paramValue1<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>paramName2<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>paramValue2<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在OneServlet中，可以使用ServletConfig对象的getInitParameter()方法来获取初始化参数，例如：</p><p><code>String value1 = servletConfig.getInitParameter(&quot;paramName1&quot;);//获取到paramValue1</code></p><h3 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h3><p>GenericServlet是Servlet接口的实现类，我们可以通过继承GenericServlet来编写自己的Servlet。下面是GenericServlet类的源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GenericServlet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>,</span></span><br><span class="line"><span class="class">        <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericServlet</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameterNames();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        getServletContext().log(getServletName() + <span class="string">": "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">        getServletContext().log(getServletName() + <span class="string">": "</span> + message, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getServletName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在GenericServlet中，定义了一个ServletConfig config实例变量，并在init(ServletConfig)方法中把参数ServletConfig赋给了实例变量。然后在该类的很多方法中使用了实例变量config。</p><p>如果子类覆盖了GenericServlet的init(StringConfig)方法，那么this.config=config这一条语句就会被覆盖了，也就是说GenericServlet的实例变量config的值为null，那么所有依赖config的方法都不能使用了。如果真的希望完成一些初始化操作，那么去覆盖GenericServlet提供的init()方法，它是没有参数的init()方法，它会在init(ServletConfig)方法中被调用。</p><p>GenericServlet还实现了ServletConfig接口，所以可以直接调用getInitParameter()、getServletContext()等ServletConfig的方法。</p><h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>HttpServlet类是GenericServlet的子类，它提供了对HTTP请求的特殊支持，所以通常我们都会通过继承HttpServlet来完成自定义的Servlet。</p><p>HttpServlet类中提供了service(HttpServletRequest,HttpServletResponse)方法，这个方法是HttpServlet自己的方法，不是从Servlet继承来的。在HttpServlet的service(ServletRequest,ServletResponse)方法中会把ServletRequest和ServletResponse强转成HttpServletRequest和HttpServletResponse，然后调用service(HttpServletRequest,HttpServletResponse)方法，这说明子类可以去覆盖service(HttpServletRequest,HttpServletResponse)方法即可，这就不用自己去强转请求和响应对象了。</p><p>其实子类也不用去覆盖service(HttpServletRequest,HttpServletResponse)方法，因为HttpServlet还要做另一步简化操作，下面会介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HttpServlet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ……</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-HTTP request or response"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        service(request, response);</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doGet-和doPost"><a href="#doGet-和doPost" class="headerlink" title="doGet()和doPost()"></a>doGet()和doPost()</h4><p>在HttpServlet的service(HttpServletRequest,HttpServletResponse)方法会去判断当前请求是GET还是POST，如果是GET请求，那么会去调用本类的doGet()方法，如果是POST请求会去调用doPost()方法，这说明我们在子类中去覆盖doGet()或doPost()方法即可。</p><h3 id="Servlet-细节"><a href="#Servlet-细节" class="headerlink" title="Servlet 细节"></a>Servlet 细节</h3><h4 id="Servlet与线程安全"><a href="#Servlet与线程安全" class="headerlink" title="Servlet与线程安全"></a>Servlet与线程安全</h4><p>因为一个类型的Servlet只有一个实例对象，那么就有可能会现时出一个Servlet同时处理多个请求，那么Servlet是否为线程安全的呢？答案是：”不是线程安全的”。这说明Servlet的工作效率很高，但也存在线程安全问题！</p><p>所以我们不应该在Servlet中随意创建成员变量，因为可能会存在一个线程对这个成员变量进行写操作，另一个线程对这个成员变量进行读操作。</p><h4 id="让服务器在启动时就创建Servlet"><a href="#让服务器在启动时就创建Servlet" class="headerlink" title="让服务器在启动时就创建Servlet"></a>让服务器在启动时就创建Servlet</h4><p>默认情况下，服务器会在某个Servlet第一次收到请求时创建它。也可以在web.xml中对Servlet进行配置，使服务器启动时就创建Servlet。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.servlet.Hello1Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.servlet.Hello2Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello3<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.servlet.Hello3Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello3<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;servlet&gt;</code>元素中配置<code>&lt;load-on-startup&gt;</code>元素可以让服务器在启动时就创建该Servlet，其中<code>&lt;load-on-startup&gt;</code>元素的值必须是大于等于0的整数，它的使用是服务器启动时创建Servlet的顺序。上例中，根据<code>&lt;load-on-startup&gt;</code>的值可以得知服务器创建Servlet的顺序为Hello1Servlet、Hello2Servlet、Hello3Servlet。</p><h4 id="lt-url-pattern-gt"><a href="#lt-url-pattern-gt" class="headerlink" title="&lt;url-pattern&gt;"></a><code>&lt;url-pattern&gt;</code></h4><p><code>&lt;url-pattern&gt;</code>是<code>&lt;servlet-mapping&gt;</code>的子元素，用来指定Servlet的访问路径，即URL。它必须是以”/“开头！</p><p>1）可以在<code>&lt;servlet-mapping&gt;</code>中给出多个<code>&lt;url-pattern&gt;</code>，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>AServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/AServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/BServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么这说明一个Servlet绑定了两个URL，无论访问/AServlet还是/BServlet，访问的都是AServlet。</p><p>2）还可以在<code>&lt;url-pattern&gt;</code>中使用通配符，所谓通配符就是星号”*“，星号可以匹配任何URL前缀或后缀，使用通配符可以命名一个Servlet绑定一组URL，例如：</p><ul><li><p><code>&lt;url-pattern&gt;/servlet/*&lt;url-patter&gt;</code>：/servlet/a、/servlet/b，都匹配/servlet/*；</p></li><li><p><code>&lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</code>：/abc/def/ghi.do、/a.do，都匹配*.do；</p></li><li><p><code>&lt;url-pattern&gt;/*&lt;url-pattern&gt;</code>：匹配所有URL；</p></li></ul><p>请注意，通配符要么为前缀，要么为后缀，不能出现在URL中间位置，也不能只有通配符。例如：<code>/*.do</code>就是错误的，因为星号出现在URL的中间位置上了。<em>.</em>也是不对的，因为一个URL中最多只能出现一个通配符。</p><p>注意，通配符是一种模糊匹配URL的方式，如果存在更具体的<code>&lt;url-pattern&gt;</code>，那么访问路径会去匹配具体的<code>&lt;url-pattern&gt;</code>。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.servlet.Hello1Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.servlet.Hello2Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当访问路径为<code>http://localhost:8080/hello/servlet/hello1</code>时，因为访问路径即匹配hello1的<code>&lt;url-pattern&gt;</code>，又匹配hello2的<code>&lt;url-pattern&gt;</code>，但因为hello1的<code>&lt;url-pattern&gt;</code>中没有通配符，所以优先匹配，即设置hello1。</p><h4 id="web-xml文件的继承（了解）"><a href="#web-xml文件的继承（了解）" class="headerlink" title="web.xml文件的继承（了解）"></a>web.xml文件的继承（了解）</h4><p>每个完整的JavaWeb应用中都需要有web.xml，但我们不知道所有的web.xml文件都有一个共同的父文件，它在Tomcat的conf/web.xml路径。</p><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>服务器会为每个应用创建一个ServletContext对象：</p><ul><li><p>ServletContext对象的创建是在服务器启动时完成的；</p></li><li><p>ServletContext对象的销毁是在服务器关闭时完成的。</p></li></ul><p>ServletContext对象的作用是在整个Web应用的动态资源之间共享数据！例如在AServlet中向ServletContext对象中保存一个值，然后在BServlet中就可以获取这个值，这就是共享数据了。</p><h4 id="获取ServletContext"><a href="#获取ServletContext" class="headerlink" title="获取ServletContext"></a>获取ServletContext</h4><p>在Servlet中获取ServletContext对象：</p><ul><li><p>在void init(ServletConfig config)中：<code>ServletContext context = config.getServletContext();</code>，ServletConfig类的getServletContext()方法可以用来获取ServletContext对象；</p></li><li><p>在GenericeServlet或HttpServlet中获取ServletContext对象：</p></li><li><p>GenericServlet类有getServletContext()方法，所以可以直接使用this.getServletContext()来获取；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> </span>&#123;</span><br><span class="line">        ServletContext context = config.getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="域对象的功能"><a href="#域对象的功能" class="headerlink" title="域对象的功能"></a>域对象的功能</h4><p>ServletContext是JavaWeb四大域对象之一：</p><ul><li><p>PageContext；</p></li><li><p>ServletRequest；</p></li><li><p>HttpSession；</p></li><li><p>ServletContext；</p></li></ul><p>所有域对象都有存取数据的功能，因为域对象内部有一个Map，用来存储数据，下面是ServletContext对象用来操作数据的方法：</p><ul><li><p>void setAttribute(String name, Object value)：用来存储一个对象，也可以称之为存储一个域属性，例如：servletContext.setAttribute(“xxx”, “XXX”)，在ServletContext中保存了一个域属性，域属性名称为xxx，域属性的值为XXX。请注意，如果多次调用该方法，并且使用相同的name，那么会覆盖上一次的值，这一特性与Map相同；</p></li><li><p>Object getAttribute(String name)：用来获取ServletContext中的数据，当前在获取之前需要先去存储才行，例如：String value = (String)servletContext.getAttribute(“xxx”);，获取名为xxx的域属性；</p></li><li><p>void removeAttribute(String name)：用来移除ServletContext中的域属性，如果参数name指定的域属性不存在，那么本方法什么都不做；</p></li><li><p>Enumeration getAttributeNames()：获取所有域属性的名称；</p></li></ul><h4 id="获取应用初始化参数"><a href="#获取应用初始化参数" class="headerlink" title="获取应用初始化参数"></a>获取应用初始化参数</h4><p>还可以使用ServletContext来获取在web.xml文件中配置的应用初始化参数！注意，应用初始化参数与Servlet初始化参数不同：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>paramName1<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>paramValue1<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>paramName2<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>paramValue2<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">String value1 = context.getInitParameter(<span class="string">"paramName1"</span>);</span><br><span class="line">String value2 = context.getInitParameter(<span class="string">"paramName2"</span>);</span><br><span class="line">System.out.println(value1 + <span class="string">", "</span> + value2);</span><br><span class="line"></span><br><span class="line">Enumeration names = context.getInitParameterNames();</span><br><span class="line"><span class="keyword">while</span>(names.hasMoreElements()) &#123;</span><br><span class="line">    System.out.println(names.nextElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取资源相关方法"><a href="#获取资源相关方法" class="headerlink" title="获取资源相关方法"></a>获取资源相关方法</h4><p><img src="https://i.loli.net/2020/06/28/pL6JzPvrkig4COR.png" alt></p><h5 id="获取真实路径"><a href="#获取真实路径" class="headerlink" title="获取真实路径"></a>获取真实路径</h5><p>还可以使用ServletContext对象来获取Web应用下的资源，例如在hello应用的根目录下创建a.txt文件，现在想在Servlet中获取这个资源，就可以使用ServletContext来获取。</p><ul><li><p>获取a.txt的真实路径：String realPath = servletContext.getRealPath(“/a.txt”)，realPath的值为a.txt文件的绝对路径：F:\tomcat6\webapps\hello\a.txt；</p></li><li><p>获取b.txt的真实路径：String realPath = servletContext.getRealPath(“/WEB-INF/b.txt”)；</p></li></ul><h5 id="获取资源流"><a href="#获取资源流" class="headerlink" title="获取资源流"></a>获取资源流</h5><p>不只可以获取资源的路径，还可以通过ServletContext获取资源流，即把资源以输入流的方式获取：</p><ul><li><p>获取a.txt资源流：InputStream in = servletContext.getResourceAsStream(“/a.txt”)；</p></li><li><p>获取b.txt资源流：InputStream in = servletContext.getResourceAsStream(“/WEB-INF/b.txt”)；</p></li></ul><h5 id="获取指定目录下所有资源路径"><a href="#获取指定目录下所有资源路径" class="headerlink" title="获取指定目录下所有资源路径"></a>获取指定目录下所有资源路径</h5><p>还可以使用ServletContext获取指定目录下所有资源路径，例如获取/WEB-INF下所有资源的路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set set = context.getResourcePaths(<span class="string">"/WEB-INF"</span>);</span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure><h4 id="访问量统计"><a href="#访问量统计" class="headerlink" title="访问量统计"></a>访问量统计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ServletContext application  = <span class="keyword">this</span>.getServletContext();<span class="comment">// 获取ServletContext对象</span></span><br><span class="line">Integer count = (Integer)application.getAttribute(<span class="string">"count"</span>);<span class="comment">// 获取对象的count属性</span></span><br><span class="line"><span class="keyword">if</span>(count == <span class="keyword">null</span>) &#123;<span class="comment">// 如果不存在 则创建访问量 并置1</span></span><br><span class="line">    count = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().print(<span class="string">"&lt;h1&gt;本页面一共被访问"</span> + count + <span class="string">"次！&lt;/h1&gt;"</span>);<span class="comment">// 向客户端返访问次数</span></span><br><span class="line">application.setAttribute(<span class="string">"count"</span>, count);<span class="comment">// 保存</span></span><br></pre></td></tr></table></figure><h3 id="获取类路径资源"><a href="#获取类路径资源" class="headerlink" title="获取类路径资源"></a>获取类路径资源</h3><p>这里要讲的是获取类路径下的资源，对于JavaWeb应用而言，就是获取classes目录下的资源。</p><p><img src="https://i.loli.net/2020/06/28/qF9RrU4kuT8ZGCb.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = <span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">"/xxx.txt"</span>);</span><br><span class="line">System.out.println(IOUtils.toString(in));</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">InputStream in = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"xxx.txt"</span>);</span><br><span class="line">System.out.println(IOUtils.toString(in));</span><br></pre></td></tr></table></figure><ul><li><p>Class类的getResourceAsStream(String path)：</p><ul><li>路径以”/“开头，相对classes路径；</li><li>路径不以”/“开头，相对当前class文件所有路径，例如在cn.itcast.servlet.MyServlet中执行，那么相对/classes/cn/itcast/servlet/路径；</li></ul></li><li><p>ClassLoader类的getResourceAsStream(String path)：</p><ul><li>相对classes路径；</li></ul></li></ul><hr><h2 id="Day-05"><a href="#Day-05" class="headerlink" title="Day 05"></a>Day 05</h2><p><em>29/06/2020</em></p><p><img src="https://i.loli.net/2020/06/29/qwGEeM6o1KBzSgk.png" alt="2.png"></p><h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3><p>response是Servlet.service方法的一个参数，类型为javax.servlet.http.HttpServletResponse。在客户端发出每个请求时，服务器都会创建一个response对象，并传入给Servlet.service()方法。response对象是用来对客户端进行响应的，这说明在service()方法中使用response对象可以完成对客户端的响应工作。</p><p>response对象的功能分为以下四种：</p><ul><li>设置响应头信息；</li><li>发送状态码；</li><li>设置响应正文；</li><li>重定向；</li></ul><h4 id="响应正文"><a href="#响应正文" class="headerlink" title="响应正文"></a>响应正文</h4><p>response是响应对象，向客户端输出响应正文（响应体）可以使用response的响应流，repsonse一共提供了两个响应流对象：</p><ul><li><p>PrintWriter out = response.getWriter()：获取字符流；</p></li><li><p>ServletOutputStream out = response.getOutputStream()：获取字节流；</p></li></ul><p>当然，如果响应正文内容为字符，那么使用response.getWriter()，如果响应内容是字节，例如下载时，那么可以使用response.getOutputStream()。</p><p>注意，在一个请求中，不能同时使用这两个流！也就是说，要么你使用repsonse.getWriter()，要么使用response.getOutputStream()，但不能同时使用这两个流。不然会抛出<code>IllegalStateException</code>异常。</p><h5 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h5><ul><li>字符编码</li></ul><p>在使用response.getWriter()时需要注意默认字符编码为ISO-8859-1，如果希望设置字符流的字符编码为utf-8，可以使用response.setCharaceterEncoding(“utf-8”)来设置。这样可以保证输出给客户端的字符都是使用UTF-8编码的！</p><p>但客户端浏览器并不知道响应数据是什么编码的！如果希望通知客户端使用UTF-8来解读响应数据，那么还是使用response.setContentType(“text/html;charset=utf-8”)方法比较好，因为这个方法不只会调用response.setCharaceterEncoding(“utf-8”)，还会设置content-type响应头，客户端浏览器会使用content-type头来解读响应数据。</p><ul><li>缓冲区</li></ul><p>response.getWriter()是PrintWriter类型，所以它有缓冲区，缓冲区的默认大小为8KB。也就是说，在响应数据没有输出8KB之前，数据都是存放在缓冲区中，而不会立刻发送到客户端。当Servlet执行结束后，服务器才会去刷新流，使缓冲区中的数据发送到客户端。</p><p>如果希望响应数据马上发送给客户端：</p><ul><li>向流中写入大于8KB的数据；</li><li>调用response.flushBuffer()方法来手动刷新缓冲区；</li></ul><h4 id="设置响应头"><a href="#设置响应头" class="headerlink" title="设置响应头"></a>设置响应头</h4><p>可以使用response对象的setHeader()方法来设置响应头！使用该方法设置的响应头最终会发送给客户端浏览器！</p><ul><li><p>response.setHeader(“content-type”, “text/html;charset=utf-8”)：设置content-type响应头，该头的作用是告诉浏览器响应内容为html类型，编码为utf-8。而且同时会设置response的字符流编码为utf-8，即response.setCharaceterEncoding(“utf-8”)；</p></li><li><p><code>response.setHeader(&quot;Refresh&quot;,&quot;5; URL=http://www.itcast.cn&quot;)</code>：5秒后自动跳转到传智主页。</p></li></ul><h4 id="设置状态码及其他方法"><a href="#设置状态码及其他方法" class="headerlink" title="设置状态码及其他方法"></a>设置状态码及其他方法</h4><ul><li><p>response.setContentType(“text/html;charset=utf-8”)：等同与调用response.setHeader(“content-type”, “text/html;charset=utf-8”)；</p></li><li><p>response.setCharacterEncoding(“utf-8”)：设置字符响应流的字符编码为utf-8； </p></li><li><p>response.setStatus(200)：设置状态码；</p></li><li><p>response.sendError(404, “您要查找的资源不存在”)：当发送错误状态码时，Tomcat会跳转到固定的错误页面去，但可以显示错误信息。</p></li></ul><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>当你访问<code>http://www.sun.com</code>时，你会发现浏览器地址栏中的URL会变成<code>http://www.oracle.com/us/sun/index.html</code>，这就是重定向了。</p><p>重定向是服务器通知浏览器去访问另一个地址，即再发出另一个请求。</p><p>响应码为200表示响应成功，而响应码为302表示重定向。所以完成重定向的第一步就是设置响应码为302。</p><p>因为重定向是通知浏览器再第二个请求，所以浏览器需要知道第二个请求的URL，所以完成重定向的第二步是设置Location头，指定第二个请求的URL地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, <span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的作用是：当访问AServlet后，会通知浏览器重定向到传智主页。客户端浏览器解析到响应码为302后，就知道服务器让它重定向，所以它会马上获取响应头Location，然后发出第二个请求。</p><h5 id="更便捷的重定向"><a href="#更便捷的重定向" class="headerlink" title="更便捷的重定向"></a>更便捷的重定向</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.sendRedirect(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>response.sendRedirect()方法会设置响应头为302，以设置Location响应头。</p><p>如果要重定向的URL是在同一个服务器内，那么可以使用相对路径，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.sendRedirect(<span class="string">"/hello/BServlet"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重定向的URL地址为：<code>http://localhost:8080/hello/BServlet</code></p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ul><li>重定向是两次请求；</li><li>重定向的URL可以是其他应用，不局限于当前应用；</li><li>重定向的响应头为302，并且必须要有Location响应头；</li><li>重定向就不要再使用response.getWriter()或response.getOutputStream()输出数据，不然可能会出现异常；</li></ul><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p>request是Servlet.service()方法的一个参数，类型为javax.servlet.http.HttpServletRequest。在客户端发出每个请求时，服务器都会创建一个request对象，并把请求数据封装到request中，然后在调用Servlet.service()方法时传递给service()方法，这说明在service()方法中可以通过request对象来获取请求数据。</p><p>request的功能可以分为以下几种：</p><ul><li><p>封装了请求头数据；</p></li><li><p>封装了请求正文数据，如果是GET请求，那么就没有正文；</p></li><li><p>request是一个域对象，可以把它当成Map来添加获取数据；</p></li><li><p>request提供了请求转发和请求包含功能。</p></li></ul><h4 id="域方法"><a href="#域方法" class="headerlink" title="域方法"></a>域方法</h4><p>request是域对象！在JavaWeb中一共四个域对象，其中ServletContext就是域对象，它在整个应用中只创建一个ServletContext对象。request其中一个，request可以在一个请求中共享数据。</p><p>一个请求会创建一个request对象，如果在一个请求中经历了多个Servlet，那么多个Servlet就可以使用request来共享数据。现在我们还不知道如何在一个请求中经历多个Servlet，后面在学习请求转发和请求包含后就知道了。</p><p>下面是request的域方法：</p><ul><li><p>void setAttribute(String name, Object value)：用来存储一个对象，也可以称之为存储一个域属性，例如：servletContext.setAttribute(“xxx”, “XXX”)，在request中保存了一个域属性，域属性名称为xxx，域属性的值为XXX。请注意，如果多次调用该方法，并且使用相同的name，那么会覆盖上一次的值，这一特性与Map相同；</p></li><li><p>Object getAttribute(String name)：用来获取request中的数据，当前在获取之前需要先去存储才行，例如：String value = (String)request.getAttribute(“xxx”);，获取名为xxx的域属性；</p></li><li><p>void removeAttribute(String name)：用来移除request中的域属性，如果参数name指定的域属性不存在，那么本方法什么都不做；</p></li><li><p>Enumeration getAttributeNames()：获取所有域属性的名称；</p></li></ul><h4 id="request获取请求头数据"><a href="#request获取请求头数据" class="headerlink" title="request获取请求头数据"></a>request获取请求头数据</h4><p>request与请求头相关的方法有：</p><ul><li><p>String getHeader(String name)：获取指定名称的请求头；</p></li><li><p>Enumeration getHeaderNames()：获取所有请求头名称；</p></li><li><p>int getIntHeader(String name)：获取值为int类型的请求头。</p></li></ul><h4 id="request其他方法"><a href="#request其他方法" class="headerlink" title="request其他方法"></a>request其他方法</h4><p>request中还提供了与请求相关的其他方法，有些方法是为了我们更加便捷的方法请求头数据而设计，有些是与请求URL相关的方法。</p><ul><li><p>int getContentLength()：获取请求体的字节数，GET请求没有请求体，没有请求体返回-1；</p></li><li><p>String getContentType()：获取请求类型，如果请求是GET，那么这个方法返回null；如果是POST请求，那么默认为application/x-www-form-urlencoded，表示请求体内容使用了URL编码；</p></li><li><p>String getMethod()：返回请求方法，例如：GET</p></li><li><p>Locale getLocale()：返回当前客户端浏览器的Locale。java.util.Locale表示国家和言语，这个东西在国际化中很有用；</p></li><li><p>String getCharacterEncoding()：获取请求体编码，如果没有setCharacterEncoding()，那么返回null，表示使用ISO-8859-1编码；</p></li><li><p>void setCharacterEncoding(String code)：设置请求编码，只对请求体有效！注意，对于GET而言，没有请求体！！！所以此方法只能对POST请求中的参数有效！</p></li><li><p>String getContextPath()：返回上下文路径，例如：/hello</p></li><li><p>String getQueryString()：返回请求URL中的参数，例如：name=zhangSan</p></li><li><p>String getRequestURI()：返回请求URI路径，例如：/hello/oneServlet</p></li><li><p>StringBuffer getRequestURL()：返回请求URL路径，例如：<a href="http://localhost/hello/oneServlet，即返回除了参数以外的路径信息；" target="_blank" rel="noopener">http://localhost/hello/oneServlet，即返回除了参数以外的路径信息；</a></p></li><li><p>String getServletPath()：返回Servlet路径，例如：/oneServlet</p></li><li><p>String getRemoteAddr()：返回当前客户端的IP地址；</p></li><li><p>String getRemoteHost()：返回当前客户端的主机名，但这个方法的实现还是获取IP地址；</p></li><li><p>String getScheme()：返回请求协议，例如：http；</p></li><li><p>String getServerName()：返回主机名，例如：localhost</p></li><li><p>int getServerPort()：返回服务器端口号，例如：8080</p></li></ul><p><img src="https://i.loli.net/2020/06/29/WPFQOAz9i1ENkKC.png" alt="2.png"></p><p>eg. 可以使用request.getRemoteAddr()方法获取客户端的IP地址，然后判断IP是否为禁用IP。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String ip = request.getRemoteAddr();</span><br><span class="line">System.out.println(ip);</span><br><span class="line"><span class="keyword">if</span>(ip.equals(<span class="string">"127.0.0.1"</span>)) &#123;</span><br><span class="line">    response. getWriter().print(<span class="string">"您的IP已被禁止！"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response.getWriter().print(<span class="string">"Hello!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="request获取请求参数"><a href="#request获取请求参数" class="headerlink" title="request获取请求参数"></a>request获取请求参数</h4><p>最为常见的客户端传递参数方式有两种：</p><ul><li><p>浏览器地址栏直接输入：一定是GET请求；</p></li><li><p>超链接：一定是GET请求；</p></li><li><p>表单：可以是GET，也可以是POST，这取决与<code>&lt;form&gt;</code>的method属性值；</p></li></ul><p>GET请求和POST请求的区别：</p><ul><li><p>GET请求：</p><ul><li><p>请求参数会在浏览器的地址栏中显示，所以不安全；</p></li><li><p>请求参数长度限制长度在1K之内；</p></li><li><p>GET请求没有请求体，无法通过request.setCharacterEncoding()来设置参数的编码；</p></li></ul></li><li><p>POST请求：</p><ul><li><p>请求参数不会显示浏览器的地址栏，相对安全；</p></li><li><p>请求参数长度没有限制；</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/hello/ParamServlet?p1=v1&amp;p2=v2"</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/hello/ParamServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    参数1：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    参数2：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p2"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是使用request获取请求参数的API：</p><ul><li>String getParameter(String name)：通过指定名称获取参数值；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String v1 = request.getParameter(<span class="string">"p1"</span>);</span><br><span class="line">    String v2 = request.getParameter(<span class="string">"p2"</span>);</span><br><span class="line">    System.out.println(<span class="string">"p1="</span> + v1);</span><br><span class="line">    System.out.println(<span class="string">"p2="</span> + v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String v1 = request.getParameter(<span class="string">"p1"</span>);</span><br><span class="line">    String v2 = request.getParameter(<span class="string">"p2"</span>);</span><br><span class="line">    System.out.println(<span class="string">"p1="</span> + v1);</span><br><span class="line">    System.out.println(<span class="string">"p2="</span> + v2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>String[] getParameterValues(String name)：当多个参数名称相同时，可以使用方法来获取；</p></li><li><p>Enumeration getParameterNames()：获取所有参数的名字；</p></li><li><p>Map getParameterMap()：获取所有参数封装到Map中，其中key为参数名，value为参数值，因为一个参数名称可能有多个值，所以参数值是String[]，而不是String。</p></li></ul><h4 id="请求转发与请求包含"><a href="#请求转发与请求包含" class="headerlink" title="请求转发与请求包含"></a>请求转发与请求包含</h4><p>无论是请求转发还是请求包含，都表示由多个Servlet共同来处理一个请求。例如Servlet1来处理请求，然后Servlet1又转发给Servlet2来继续处理这个请求。</p><h5 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h5><p>在AServlet中，把请求转发到BServlet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"AServlet"</span>);</span><br><span class="line">RequestDispatcher rd = request.getRequestDispatcher(<span class="string">"/BServlet"</span>);</span><br><span class="line">rd.forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// --------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BServlet"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="请求包含"><a href="#请求包含" class="headerlink" title="请求包含"></a>请求包含</h5><p>在AServlet中，把请求包含到BServlet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"AServlet"</span>);</span><br><span class="line">RequestDispatcher rd = request.getRequestDispatcher(<span class="string">"/BServlet"</span>);</span><br><span class="line">rd.include (request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BServlet"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="请求转发与请求包含比较"><a href="#请求转发与请求包含比较" class="headerlink" title="请求转发与请求包含比较"></a>请求转发与请求包含比较</h5><ul><li><p>如果在AServlet中请求转发到BServlet，那么在AServlet中就不允许再输出响应体，即不能再使用response.getWriter()和response.getOutputStream()向客户端输出，这一工作应该由BServlet来完成；如果是使用请求包含，那么没有这个限制；</p></li><li><p>请求转发虽然不能输出响应体，但还是可以设置响应头的，例如：response.setContentType(“text/html;charset=utf-8”);</p></li><li><p>请求包含大多是应用在JSP页面中，完成多页面的合并；</p></li><li><p>请求转发大多是应用在Servlet中，转发目标大多是JSP页面；</p></li></ul><p><img src="https://i.loli.net/2020/06/29/w7TlOmZHXcECJY3.png" alt="2.png"></p><h5 id="请求转发与重定向比较"><a href="#请求转发与重定向比较" class="headerlink" title="请求转发与重定向比较"></a>请求转发与重定向比较</h5><ul><li><p>请求转发是一个请求，而重定向是两个请求；</p></li><li><p>请求转发后浏览器地址栏不会有变化，而重定向会有变化，因为重定向是两个请求；</p></li><li><p>请求转发的目标只能是本应用中的资源，重定向的目标可以是其他应用；</p></li><li><p>请求转发对AServlet和BServlet的请求方法是相同的，即要么都是GET，要么都是POST，因为请求转发是一个请求；</p></li><li><p>重定向的第二个请求一定是GET；</p></li></ul><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>与路径相关的操作</p><ul><li><p>超链接</p></li><li><p>表单</p></li><li><p>转发</p></li><li><p>包含</p></li><li><p>重定向</p></li><li><p><code>&lt;url-pattern&gt;</code></p></li><li><p>ServletContext获取资源</p></li><li><p>Class获取资源</p></li><li><p>ClassLoader获取资源</p></li></ul><h4 id="客户端路径"><a href="#客户端路径" class="headerlink" title="客户端路径"></a>客户端路径</h4><p>超链接、表单、重定向都是客户端路径，客户端路径可以分为三种方式：</p><ul><li><p>绝对路径；</p></li><li><p>以”/“开头的相对路径；</p></li><li><p>不以”/“开头的相对路径；</p></li></ul><p>例如：<code>http://localhost:8080/hello1/pages/a.html</code>中的超链接和表单如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">绝对路径：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://localhost:8080/hello2/index.html"</span>&gt;</span>链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">客户端路径：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/hello3/pages/index.html"</span>&gt;</span>链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">相对路径：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span>&gt;</span>链接3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">绝对路径：</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8080/hello2/index.html"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"表单1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">客户端路径：</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/hello2/index.html"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"表单2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">相对路径：</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"index.html"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"表单3"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>链接1和表单1：没什么可说的，它使用绝对路径；</p></li><li><p>链接2和表单2：以”/“开头，相对主机，与当前a.html的主机相同，即最终访问的页面为<code>http://localhost:8080/hello2/index.html</code>；</p></li><li><p>链接3和表单3：不以”/“开头，相对当前页面的路径，即a.html所有路径，即最终访问的路径为：<code>http://localhost:8080/hello1/pages/index.html</code>；</p></li></ul><h5 id="建议使用”-“"><a href="#建议使用”-“" class="headerlink" title="建议使用”/“"></a>建议使用”/“</h5><p>强烈建议使用”/“开头的路径，这说明在页面中的超链接和表单都要以”/“开头，后面是当前应用的名称，再是访问路径：</p><p><code>&lt;form action=&quot;/hello/servlet/AServlet&quot;&gt;</code></p><p><code>&lt;/form&gt;</code></p><p><code>&lt;a href=&quot;/hello/b.html&quot;&gt;链接&lt;/a&gt;</code></p><p>其中/hello是当前应用名称，这也说明如果将来修改了应用名称，那么页面中的所有路径也要修改，这一点确实是个问题。这一问题的处理方案会在学习了JSP之后讲解！</p><p>在Servlet中的重定向也建议使用”/“开头。同理，也要给出应用的名称！例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"/hello/BServlet"</span>);</span><br></pre></td></tr></table></figure><p>其中/hello是当前应用名，如果将来修改了应用名称，那么也要修改所有重定向的路径，这一问题的处理方案是使用request.getContextPath()来获取应用名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(request.getContextPath() + <span class="string">"/BServlet"</span>);</span><br></pre></td></tr></table></figure><h4 id="服务器端路径"><a href="#服务器端路径" class="headerlink" title="服务器端路径"></a>服务器端路径</h4><p>服务器端路径必须是相对路径，不能是绝对路径。但相对路径有两种形式：</p><ul><li><p>以”/“开头；</p></li><li><p>不以”/“开头；</p></li></ul><p>其中请求转发、请求包含都是服务器端路径，服务器端路径与客户端路径的区别是：</p><ul><li><p>客户端路径以”/“开头：相对当前主机；</p></li><li><p>服务器端路径以”/“开头：相对当前应用；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/BServlet"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设访问AServlet的路径为：<code>http://localhost:8080/hello/servlet/AServlet</code></p><p>因为路径以”/“开头，所以相对当前应用，即<code>http://localhost:8080/hello/BServlet</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.getRequestDispatcher(<span class="string">"BServlet"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设访问AServlet的路径为：<code>http://localhost:8080/hello/servlet/AServlet</code></p><p>因为路径不以”/“开头，所以相对当前应用，即<code>http://localhost:8080/hello/servlet/BServlet</code>。</p><h4 id="lt-url-pattern-gt-路径"><a href="#lt-url-pattern-gt-路径" class="headerlink" title="&lt;url-pattern&gt;路径"></a><code>&lt;url-pattern&gt;</code>路径</h4><p><code>&lt;url-pattern&gt;</code>必须使用”/“开头，并且相对的是当前应用。</p><h4 id="ServletContext获取资源"><a href="#ServletContext获取资源" class="headerlink" title="ServletContext获取资源"></a>ServletContext获取资源</h4><p>必须是相对路径，可以”/“开头，也可以不使用”/“开头，但无论是否使用”/“开头都是相对当前应用路径。</p><p>例如在AServlet中获取资源，AServlet的路径路径为：<code>http://localhost:8080/hello/servlet/AServlet</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String path1 = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"a.txt"</span>);</span><br><span class="line">String path2 = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/a.txt"</span>);</span><br><span class="line">System.out.println(path1);</span><br><span class="line">System.out.println(path2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>path1和path2是相同的结果：<code>http://localhost:8080/hello/a.txt</code></p><h4 id="Class获取资源"><a href="#Class获取资源" class="headerlink" title="Class获取资源"></a>Class获取资源</h4><p>Class获取资源也必须是相对路径，可以”/“开头，也可以不使用”/“开头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">InputStream in = Demo.class.getResourceAsStream("/a.txt");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">InputStream in = Demo.class.getResourceAsStream("a.txt");</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中fun1()方法获取资源时以”/“开头，那么相对的是当前类路径，即/hello/WEB-INF/classes/a.txt文件；</p><p>其中fun2()方法获取资源时没有以”/“开头，那么相对当前Demo.class所在路径，因为Demo类在cn.itcast包下，所以资源路径为：/hello/WEB-INF/classes/cn/itcast/a.txt。</p><h4 id="ClassLoader获取资源"><a href="#ClassLoader获取资源" class="headerlink" title="ClassLoader获取资源"></a>ClassLoader获取资源</h4><p>ClassLoader获取资源也必须是相对路径，可以”/“开头，也可以不使用”/“开头。但无论是否以”/“开头，资源都是相对当前类路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">InputStream in = Demo.class.getClassLoader().getResourceAsStream("/a.txt");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">InputStream in = Demo.class.getClassLoader().getResourceAsStream("a.txt");</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fun1()和fun2()方法的资源都是相对类路径，即classes目录，即/hello/WEB-INF/classes/a.txt</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="请求编码"><a href="#请求编码" class="headerlink" title="请求编码"></a>请求编码</h4><h5 id="直接在地址栏中给出中文"><a href="#直接在地址栏中给出中文" class="headerlink" title="直接在地址栏中给出中文"></a>直接在地址栏中给出中文</h5><p>请求数据是由客户端浏览器发送服务器的，请求数据的编码是由浏览器决定的。例如在浏览器地址栏中给出：<code>http://localhost:8080/hello/AServlet?name=传智</code>，那么其中”传智”是什么编码的呢？不同浏览器使用不同的编码，所以这是不确定的！</p><ul><li><p>IE：使用GB2312；</p></li><li><p>FireFox：使用GB2312；</p></li><li><p>Chrome：使用UTF-8； </p></li></ul><p>通常没有哪个应用要求用户在浏览器地址栏中输入请求数据的，所以大家只需了解一下即可。</p><h5 id="在页面中发出请求"><a href="#在页面中发出请求" class="headerlink" title="在页面中发出请求"></a>在页面中发出请求</h5><p>通常向服务器发送请求数据都需要先请求一个页面，然后用户在页面中输入数据。页面中有超链接和表单，通过超链接和表单就可以向服务器发送数据了。</p><p>因为页面是服务器发送到客户端浏览器的，所以这个页面本身的编码由服务器决定。而用户在页面中输入的数据也是由页面本身的编码决定的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/hello/servlet/AServlet"</span>&gt;</span></span><br><span class="line">  名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/hello/servlet/AServlet?name=传智"</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当用户在index.html页面中输入数据时，都是UTF-8列表的。因为这个页面本身就是UTF-8编码的！</p><p><strong>页面的编译就是页面中输入数据的编码。</strong></p><h5 id="GET请求解读编码"><a href="#GET请求解读编码" class="headerlink" title="GET请求解读编码"></a>GET请求解读编码</h5><p>当客户端通过GET请求发送数据给服务器时，使用request.getParameter()获取的数据是被服务器误认为ISO-8859-1编码的，也就是说客户端发送过来的数据无论是UTF-8还是GBK，服务器都认为是ISO-8859-1，这就说明我们需要在使用request.getParameter()获取数据后，再转发成正确的编码。</p><p>例如客户端以UTF-8发送的数据，使用如下转码方式：</p><p>String name = request.getParameter(“name”);</p><p>name = new String(name.getBytes(“iso-8859-1”), “utf-8”);</p><h5 id="POST请求解读编码"><a href="#POST请求解读编码" class="headerlink" title="POST请求解读编码"></a>POST请求解读编码</h5><p>当客户端通过POST请求发送数据给服务器时，可以在使用request.getParameter()获取请求参数之前先通过request.setCharacterEncoding()来指定编码，然后再使用reuqest.getParameter()方法来获取请求参数，那么就是用指定的编码来读取了。</p><p>也就是说，如果是POST请求，服务器可以指定编码！但如果没有指定编码，那么默认还是使用ISO-8859-1来解读。</p><p>request.setCharacterEncoding(“utf-8”);</p><p>String name = request.getParameter(“name”);</p><h4 id="响应编码"><a href="#响应编码" class="headerlink" title="响应编码"></a>响应编码</h4><p>响应：服务器发送给客户端数据！响应是由response对象来完成，如果响应的数据不是字符数据，那么就无需去考虑编码问题。当然，如果响应的数据是字符数据，那么就一定要考虑编码的问题了。</p><p>response.getWriter().print(“传智”);</p><p>上面代码因为没有设置repsonse.getWriter()字符流的编码，所以服务器使用默认的编码（ISO-8859-1）来处理，因为ISO-8859-1不支持中文，所以一定会出现乱码的。</p><p>所以在使用response.getWriter()发送数据之前，一定要设置response.getWriter()的编码，这需要使用response.setCharacterEncoding()方法：</p><p>response.setCharacterEncoding(“utf-8”);</p><p>response.getWriter().print(“传智”);</p><p>上面代码因为在使用response.getWriter()输出之前已经设置了编码，所以输出的数据为utf-8编码。但是，因为没有告诉浏览器使用什么编码来读取响应数据，所以很可能浏览器会出现错误的解读，那么还是会出现乱码的。当然，通常浏览器都支持来设置当前页面的编码，如果用户在看到编码时，去设置浏览器的编码，如果设置的正确那么乱码就会消失。但是我们不能让用户总去自己设置编码，而且应该直接通知浏览器，服务器发送过来的数据是什么编码，这样浏览器就直接使用服务器告诉他的编码来解读！这需要使用content-type响应头。</p><p>response.setContentType(“text/html;charset=utf-8”);</p><p>response.getWriter().print(“传智”);</p><p>上面代码使用setContentType()方法设置了响应头content-type编码为utf-8，这不只是在响应中添加了响应头，还等于调用了一次response.setCharacterEncoding(“utf-8”)，也就是说，通过我们只需要调用一次response.setContentType(“text/html;charset=utf-8”)即可，而无需再去调用response.setCharacterEncoding(“utf-8”)了。</p><p>在静态页面中，使用<code>&lt;meta&gt;</code>来设置content-type响应头，例如：</p><p><code>&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</code></p><h4 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h4><p>通过页面传输数据给服务器时，如果包含了一些特殊字符是无法发送的。这时就需要先把要发送的数据转换成URL编码格式，再发送给服务器。</p><p>其实需要我们自己动手给数据转换成URL编码的只有GET超链接，因为表单发送数据会默认使用URL编码，也就是说，不用我们自己来编码。</p><p>例如：”传智”这两个字通过URL编码后得到的是：”%E4%BC%A0%E6%99%BA”。URL编码是先需要把”传智”转换成字节，例如我们现在使用UTF-8把”传智”转换成字符，得到的结果是：”[-28, -68, -96, -26, -103, -70]”，然后再把所有负数加上256，得到[228, 188, 160, 230, 153, 186]，再把每个int值转换成16进制，得到[E4, BC, A0, E6, 99, BA]，最后再每个16进制的整数前面加上”%”。</p><p>通过URL编码，把”传智”转换成了”%E4%BC%A0%E6%99%BA”，然后发送给服务器！服务器会自动识别出数据是使用URL编码过的，然后会自动把数据转换回来。</p><p>当然，在页面中我们不需要自己去通过上面的过程把”传智”转换成”%E4%BC%A0%E6%99%BA”，而是使用Javascript来完成即可。当后面我们学习了JSP后，就不用再使用Javascript了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">_go</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        location = <span class="string">"/day05_2/AServlet?name="</span> + <span class="built_in">encodeURIComponent</span>(<span class="string">"传智+播客"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为URL默认只支持ISO-8859-1，这说明在URL中出现中文和一些特殊字符可能无法发送到服务器。所以我们需要对包含中文或特殊字符的URL进行URL编码。</p><p>服务器会自动识别数据是否使用了URL编码，如果使用了服务器会自动把数据解码，无需我们自己动手解码。</p><p>String s = “传智”;</p><p>s = URLEncoder.encode(s, “utf-8”);// %E4%BC%A0%E6%99%BA</p><p>s = URLDecoderdecode(s, “utf-8”);//传智</p><hr><h2 id="Day-06"><a href="#Day-06" class="headerlink" title="Day 06"></a>Day 06</h2><p><em>30/06/2020</em></p><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><p>JSP（Java Server Pages）是JavaWeb服务器端的<strong>动态资源</strong>。它与html页面的作用是相同的，<strong>显示数据和获取数据</strong>。</p><p>JSP = html + Java脚本（代码片段） + JSP动作标签</p><h4 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h4><h5 id="JSP-脚本"><a href="#JSP-脚本" class="headerlink" title="JSP 脚本"></a>JSP 脚本</h5><p>JSP脚本就是Java代码片段，它分为三种：</p><ul><li><p><code>&lt;%...%&gt;</code>：Java语句；</p></li><li><p><code>&lt;%=…%&gt;</code>：Java表达式；</p></li><li><p><code>&lt;%!...%&gt;</code>：Java定义类成员；</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">&lt;title&gt;JSP演示&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;JSP演示&lt;/h1&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    <span class="comment">// Java语句</span></span><br><span class="line">    String s1 = <span class="string">"hello jsp"</span>;</span><br><span class="line">    <span class="comment">// 不会输出到客户端，而是在服务器端的控制台打印</span></span><br><span class="line">    System.out.println(s1);</span><br><span class="line">    %&gt;</span><br><span class="line">  &lt;!-- 输出到客户端浏览器上 --&gt;</span><br><span class="line">    输出变量：&lt;%=s1 %&gt;&lt;br/&gt;</span><br><span class="line">    输出<span class="keyword">int</span>类型常量：&lt;%=<span class="number">100</span> %&gt;&lt;br/&gt;</span><br><span class="line">    输出String类型常量：&lt;%=<span class="string">"你好"</span> %&gt;&lt;br/&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    使用表达式输出常量是很傻的一件事，因为可以直接使用html即可，下面是输出上面的常量：&lt;br/&gt;</span><br><span class="line">    <span class="number">100</span>&lt;br/&gt;</span><br><span class="line">    你好   </span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="内置对象-out"><a href="#内置对象-out" class="headerlink" title="内置对象 out"></a>内置对象 out</h5><p>out对象在JSP页面中无需创建就可以使用，它的作用是用来向客户端输出。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;out.jsp&lt;/h1&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    <span class="comment">//向客户端输出</span></span><br><span class="line">    out.print(<span class="string">"你好！"</span>);</span><br><span class="line">    </span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>其中<code>&lt;%=…%&gt;</code>与<code>out.print()</code>功能是相同的！它们都是向客户端输出，例如：</p><p><code>&lt;%=s1%&gt;</code>等同于<code>&lt;% out.print(s1); %&gt;</code></p><p><code>&lt;%=&quot;hello&quot;%&gt;</code>等同于<code>&lt;% out.print(&quot;hello&quot;); %&gt;</code>，也等同于直接在页面中写hello一样。</p><h5 id="多个-lt-gt-可以通用"><a href="#多个-lt-gt-可以通用" class="headerlink" title="多个&lt;%...%&gt;可以通用"></a>多个<code>&lt;%...%&gt;</code>可以通用</h5><p>在一个JSP中多个&lt;%…%&gt;是相通的。例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;out.jsp&lt;/h1&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    String s = <span class="string">"hello"</span>;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    out.print(s);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>循环打印表格：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;表格&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table border=<span class="string">"1"</span> width=<span class="string">"50%"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            %&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;%=i+1 %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;user&lt;%=i %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%=100 + 1 %&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP-原理"><a href="#JSP-原理" class="headerlink" title="JSP 原理"></a>JSP 原理</h4><p>JSP是一种特殊的Servlet，当JSP页面首次被访问时，容器（Tomcat）会先把JSP编译成Servlet，然后再去执行Servlet。所以JSP其实就是一个Servlet！</p><p><img src="https://i.loli.net/2020/06/30/Te17gIh5qb2FHWE.png" alt="2.png"></p><h5 id="JSP真身存放目录"><a href="#JSP真身存放目录" class="headerlink" title="JSP真身存放目录"></a>JSP真身存放目录</h5><p>JSP生成的Servlet存放在${CATALANA}/work目录下，我经常开玩笑的说，它是JSP的”真身”。我们打开看看其中的内容，了解一下JSP的”真身”。</p><p>你会发现，在JSP中的静态信息（例如<code>&lt;html&gt;</code>等）在”真身”中都是使用out.write()完成打印！这些静态信息都是作为字符串输出给了客户端。</p><p>JSP的整篇内容都会放到名为<code>_jspService</code>的方法中！你可能会说<code>&lt;@page&gt;</code>不在”真身”中，<code>&lt;%@page&gt;</code>我们明天再看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(<span class="keyword">final</span> javax.servlet.http.HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, javax.servlet.ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;</span><br><span class="line">    javax.servlet.http.HttpSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletContext application;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletConfig config;</span><br><span class="line">    javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;</span><br><span class="line">    javax.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">    javax.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">      <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">      _jspx_page_context = pageContext;</span><br><span class="line">      application = pageContext.getServletContext();</span><br><span class="line">      config = pageContext.getServletConfig();</span><br><span class="line">      session = pageContext.getSession();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">      _jspx_out = out;</span><br><span class="line"></span><br><span class="line">…<span class="comment">// JSP页面中的内容都会在这个位置出现！这时上面所说的对象已经创建完了，所以在JSP页面中是可以使用的。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h4><p>JSP脚本一共三种形式：</p><ul><li><p><code>&lt;%...%&gt;</code>：内容会直接放到”真身”中；</p></li><li><p><code>&lt;%=…%&gt;</code>：内容会放到out.print()中，作为out.print()的参数；</p></li><li><p><code>&lt;%!…%&gt;</code>：内容会放到_jspService()方法之外，被类直接包含；</p></li></ul><p>前面已经讲解了<code>&lt;%...%&gt;</code>和<code>&lt;%=…%&gt;</code>，但还没有讲解<code>&lt;%!...%&gt;</code>的作用！</p><p>现在我们已经知道了，JSP其实就是一个类，一个Servlet类。<code>&lt;%!...%&gt;</code>的作用是在类中添加方法或成员的，所以<code>&lt;%!...%&gt;</code>中的内容不会出现在<code>_jspService()</code>中。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello JSP!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h4><p>我们现在已经知道JSP是需要先编译成.java，再编译成.class的。其中<code>&lt;%-- ... --%&gt;</code>中的内容在JSP编译成.java时会被忽略的，即JSP注释。</p><p>也可以在JSP页面中使用html注释：<code>&lt;!-- … --&gt;</code>，但这个注释在JSP编译成的.java中是存在的，它不会被忽略，而且会被发送到客户端浏览器。但是在浏览器显示服务器发送过来的html时，因为<code>&lt;!-- … --&gt;</code>是html的注释，所以浏览器是不会显示它的。</p><p><img src="https://i.loli.net/2020/06/30/5Cr37imLUd9pPsl.png" alt="2.png"></p><h3 id="会话跟踪技术"><a href="#会话跟踪技术" class="headerlink" title="会话跟踪技术"></a>会话跟踪技术</h3><h4 id="什么是会话跟踪技术"><a href="#什么是会话跟踪技术" class="headerlink" title="什么是会话跟踪技术"></a>什么是会话跟踪技术</h4><p>我们需要先了解一下什么是会话！可以把会话理解为客户端与服务器之间的一次会晤，在一次会晤中可能会包含多次请求和响应。例如你给10086打个电话，你就是客户端，而10086服务人员就是服务器了。从双方接通电话那一刻起，会话就开始了，到某一方挂断电话表示会话结束。在通话过程中，你会向10086发出多个请求，那么这多个请求都在一个会话中。</p><p>在JavaWeb中，客户向某一服务器发出第一个请求开始，会话就开始了，直到客户关闭了浏览器会话结束。</p><p>在一个会话的多个请求中共享数据，这就是会话跟踪技术。例如在一个会话中的请求如下：</p><ul><li><p>请求银行主页；</p></li><li><p>请求登录（请求参数是用户名和密码）；</p></li><li><p>请求转账（请求参数与转账相关的数据）；</p></li><li><p>请求信誉卡还款（请求参数与还款相关的数据）。</p></li></ul><p>在这上会话中当前用户信息必须在这个会话中共享的，因为登录的是张三，那么在转账和还款时一定是相对张三的转账和还款！这就说明我们必须在一个会话过程中有共享数据的能力。</p><h4 id="会话路径技术使用Cookie或session完成"><a href="#会话路径技术使用Cookie或session完成" class="headerlink" title="会话路径技术使用Cookie或session完成"></a>会话路径技术使用Cookie或session完成</h4><p>我们知道HTTP协议是无状态协议，也就是说每个请求都是独立的！无法记录前一次请求的状态。但HTTP协议中可以使用Cookie来完成会话跟踪！</p><p>在JavaWeb中，使用session来完成会话跟踪，session底层依赖Cookie技术。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><h4 id="Cookie概述"><a href="#Cookie概述" class="headerlink" title="Cookie概述"></a>Cookie概述</h4><p>Cookie翻译成中文是小甜点，小饼干的意思。在HTTP中它表示服务器送给客户端浏览器的小甜点。其实Cookie就是一个键和一个值构成的，随着服务器端的响应发送给客户端浏览器。然后客户端浏览器会把Cookie保存起来，当下一次再访问服务器时把Cookie再发送给服务器。</p><p><img src="https://i.loli.net/2020/06/30/RhIEKGckm4Zg29a.png" alt="2.png"></p><p>Cookie是由服务器创建，然后通过响应发送给客户端的一个键值对。客户端会保存Cookie，并会标注出Cookie的来源（哪个服务器的Cookie）。当客户端向服务器发出请求时会把所有这个服务器Cookie包含在请求中发送给服务器，这样服务器就可以识别客户端了！</p><h5 id="Cookie规范"><a href="#Cookie规范" class="headerlink" title="Cookie规范"></a>Cookie规范</h5><ul><li><p>Cookie大小上限为4KB；</p></li><li><p>一个服务器最多在客户端浏览器上保存20个Cookie；</p></li><li><p>一个浏览器最多保存300个Cookie；</p></li></ul><p>上面的数据只是HTTP的Cookie规范，但在浏览器大战的今天，一些浏览器为了打败对手，为了展现自己的能力起见，可能对Cookie规范”扩展”了一些，例如每个Cookie的大小为8KB，最多可保存500个Cookie等！但也不会出现把你硬盘占满的可能！</p><p>注意，不同浏览器之间是不共享Cookie的。也就是说在你使用IE访问服务器时，服务器会把Cookie发给IE，然后由IE保存起来，当你在使用FireFox访问服务器时，不可能把IE保存的Cookie发送给服务器。</p><h5 id="Cookie与HTTP头"><a href="#Cookie与HTTP头" class="headerlink" title="Cookie与HTTP头"></a>Cookie与HTTP头</h5><p>Cookie是通过HTTP请求和响应头在客户端和服务器端传递的：</p><ul><li>Cookie：请求头，客户端发送给服务器端；<ul><li>格式：Cookie: a=A; b=B; c=C。即多个Cookie用分号离开；</li></ul></li><li>Set-Cookie：响应头，服务器端发送给客户端；<ul><li>一个Cookie对应一个Set-Cookie：</li><li>Set-Cookie: a=A</li><li>Set-Cookie: b=B</li><li>Set-Cookie: c=C</li></ul></li></ul><h5 id="Cookie的覆盖"><a href="#Cookie的覆盖" class="headerlink" title="Cookie的覆盖"></a>Cookie的覆盖</h5><p>如果服务器端发送重复的Cookie那么会覆盖原有的Cookie，例如客户端的第一个请求服务器端发送的Cookie是：Set-Cookie: a=A；第二请求服务器端发送的是：Set-Cookie: a=AA，那么客户端只留下一个Cookie，即：a=AA。</p><h5 id="Cookie第一例"><a href="#Cookie第一例" class="headerlink" title="Cookie第一例"></a>Cookie第一例</h5><p>我们这个案例是，客户端访问AServlet，AServlet在响应中添加Cookie，浏览器会自动保存Cookie。然后客户端访问BServlet，这时浏览器会自动在请求中带上Cookie，BServlet获取请求中的Cookie打印出来。</p><p><img src="https://i.loli.net/2020/06/30/TDbBVqmEUscFHMj.png" alt="2.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AServlet.java</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给客户端发送Cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">String id = UUID.randomUUID().toString();<span class="comment">//生成一个随机字符串</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"id"</span>, id);<span class="comment">//创建Cookie对象，指定名字和值</span></span><br><span class="line">response.addCookie(cookie);<span class="comment">//在响应中添加Cookie对象</span></span><br><span class="line">response.getWriter().print(<span class="string">"已经给你发送了ID"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BServlet.java</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取客户端请求中的Cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">Cookie[] cs = request.getCookies();<span class="comment">//获取请求中的Cookie</span></span><br><span class="line"><span class="keyword">if</span>(cs != <span class="keyword">null</span>) &#123;<span class="comment">//如果请求中存在Cookie</span></span><br><span class="line"><span class="keyword">for</span>(Cookie c : cs) &#123;<span class="comment">//遍历所有Cookie</span></span><br><span class="line"><span class="keyword">if</span>(c.getName().equals(<span class="string">"id"</span>)) &#123;<span class="comment">//获取Cookie名字，如果Cookie名字是id</span></span><br><span class="line">response.getWriter().print(<span class="string">"您的ID是："</span> + c.getValue());<span class="comment">//打印Cookie值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Cookie-生命"><a href="#Cookie-生命" class="headerlink" title="Cookie 生命"></a>Cookie 生命</h4><h5 id="什么是Cookie的生命"><a href="#什么是Cookie的生命" class="headerlink" title="什么是Cookie的生命"></a>什么是Cookie的生命</h5><p>Cookie不只是有name和value，Cookie还有生命。所谓生命就是Cookie在客户端的有效时间，可以通过setMaxAge(int)来设置Cookie的有效时间。</p><ul><li><p>cookie.setMaxAge(-1)：cookie的maxAge属性的默认值就是-1，表示只在浏览器内存中存活。一旦关闭浏览器窗口，那么cookie就会消失。</p></li><li><p>cookie.setMaxAge(60*60)：表示cookie对象可存活1小时。当生命大于0时，浏览器会把Cookie保存到硬盘上，就算关闭浏览器，就算重启客户端电脑，cookie也会存活1小时；</p></li><li><p>cookie.setMaxAge(0)：cookie生命等于0是一个特殊的值，它表示cookie被作废！也就是说，如果原来浏览器已经保存了这个Cookie，那么可以通过Cookie的setMaxAge(0)来删除这个Cookie。无论是在浏览器内存中，还是在客户端硬盘上都会删除这个Cookie。 </p></li></ul><h5 id="案例：显示上次访问时间"><a href="#案例：显示上次访问时间" class="headerlink" title="案例：显示上次访问时间"></a>案例：显示上次访问时间</h5><ul><li><p>创建Cookie，名为lasttime，值为当前时间，添加到response中；</p></li><li><p>在AServlet中获取请求中名为lasttime的Cookie；</p></li><li><p>如果不存在输出”您是第一次访问本站”，如果存在输出”您上一次访问本站的时间是xxx”；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AServlet.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lasttime"</span>, <span class="keyword">new</span> Date().toString());<span class="comment">// 这里可能会出现小bug</span></span><br><span class="line">    cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">    Cookie[] cs = request.getCookies();</span><br><span class="line">    String s = <span class="string">"您是首次访问本站！"</span>;</span><br><span class="line">    <span class="keyword">if</span>(cs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(Cookie c : cs) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c.getName().equals(<span class="string">"lasttime"</span>)) &#123;</span><br><span class="line">                s = <span class="string">"您上次的访问时间是："</span> + c.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response.getWriter().print(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Cookie的path"><a href="#Cookie的path" class="headerlink" title="Cookie的path"></a>Cookie的path</h4><h5 id="什么是Cookie的路径"><a href="#什么是Cookie的路径" class="headerlink" title="什么是Cookie的路径"></a>什么是Cookie的路径</h5><p>现在有WEB应用A，向客户端发送了10个Cookie，这就说明客户端无论访问应用A的哪个Servlet都会把这10个Cookie包含在请求中！但是也许只有AServlet需要读取请求中的Cookie，而其他Servlet根本就不会获取请求中的Cookie。这说明客户端浏览器有时发送这些Cookie是多余的！</p><p>可以通过设置Cookie的path来指定浏览器，在访问什么样的路径时，包含什么样的Cookie。</p><h5 id="Cookie路径与请求路径的关系"><a href="#Cookie路径与请求路径的关系" class="headerlink" title="Cookie路径与请求路径的关系"></a>Cookie路径与请求路径的关系</h5><p>下面我们来看看Cookie路径的作用：</p><p>下面是客户端浏览器保存的3个Cookie的路径：</p><p>a:　/cookietest；</p><p>b:　/cookietest/servlet；</p><p>c:　/cookietest/jsp；</p><p>下面是浏览器请求的URL：</p><p>A:　<code>http://localhost:8080/cookietest/AServlet</code>；</p><p>B:　<code>http://localhost:8080/cookietest/servlet/BServlet</code>；</p><p>C:　<code>http://localhost:8080/cookietest/jsp/CServlet</code>；</p><ul><li><p>请求A时，会在请求中包含a；</p></li><li><p>请求B时，会在请求中包含a、b；</p></li><li><p>请求C时，会在请求中包含a、c；</p></li></ul><p>也就是说，请求路径如果包含了Cookie路径，那么会在请求中包含这个Cookie，否则不会请求中不会包含这个Cookie。</p><ul><li><p>A请求的URL包含了”/cookietest”，所以会在请求中包含路径为”/cookietest”的Cookie；</p></li><li><p>B请求的URL包含了”/cookietest”，以及”/cookietest/servlet”，所以请求中包含路径为”/cookietest”和”/cookietest/servlet”两个Cookie；</p></li><li><p>B请求的URL包含了”/cookietest”，以及”/cookietest/jsp”，所以请求中包含路径为”/cookietest”和”/cookietest/jsp”两个Cookie；</p></li></ul><h5 id="设置Cookie的路径"><a href="#设置Cookie的路径" class="headerlink" title="设置Cookie的路径"></a>设置Cookie的路径</h5><p>设置Cookie的路径需要使用setPath()方法，例如：</p><p>cookie.setPath(“/cookietest/servlet”);</p><p>如果没有设置Cookie的路径，那么Cookie路径的默认值当前访问资源所在路径，例如：</p><ul><li><p>访问<code>http://localhost:8080/cookietest/AServlet</code>时添加的Cookie默认路径为/cookietest；</p></li><li><p>访问<code>http://localhost:8080/cookietest/servlet/BServlet</code>时添加的Cookie默认路径为/cookietest/servlet；</p></li><li><p>访问<code>http://localhost:8080/cookietest/jsp/BServlet</code>时添加的Cookie默认路径为/cookietest/jsp；</p></li></ul><h4 id="Cookie的domain"><a href="#Cookie的domain" class="headerlink" title="Cookie的domain"></a>Cookie的domain</h4><p>Cookie的domain属性可以让网站中二级域共享Cookie，次要！</p><p>百度你是了解的对吧！</p><p><code>http://www.baidu.com</code></p><p><code>http://zhidao.baidu.com</code></p><p><code>http://news.baidu.com</code></p><p><code>http://tieba.baidu.com</code></p><p>现在我希望在这些主机之间共享Cookie（例如在<code>www.baidu.com</code>中响应的cookie，可以在<code>news.baidu.com</code>请求中包含）。很明显，现在不是路径的问题了，而是主机的问题，即域名的问题。处理这一问题其实很简单，只需要下面两步：</p><ul><li><p>设置Cookie的path为”/“：c.setPath(“/“)；</p></li><li><p>设置Cookie的domain为”.baidu.com”：c.setDomain(“.baidu.com”)。</p></li></ul><p>当domain为”.baidu.com”时，无论前缀是什么，都会共享Cookie的。但是现在我们需要设置两个虚拟主机：<code>www.baidu.com</code>和<code>news.baidu.com</code>。</p><p>第一步：设置windows的DNS路径解析</p><p>找到C:\WINDOWS\system32\drivers\etc\hosts文件，添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">127.0.0.1       www.baidu.com</span><br><span class="line">127.0.0.1       news.baidu.com</span><br></pre></td></tr></table></figure><p>第二步：设置Tomcat虚拟主机</p><p>找到server.xml文件，添加<code>&lt;Host&gt;</code>元素，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"www.baidu.com"</span>  <span class="attr">appBase</span>=<span class="string">"F:\webapps\www"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlValidation</span>=<span class="string">"false"</span> <span class="attr">xmlNamespaceAware</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"news.baidu.com"</span>  <span class="attr">appBase</span>=<span class="string">"F:\webapps\news"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlValidation</span>=<span class="string">"false"</span> <span class="attr">xmlNamespaceAware</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>第三步：创建A项目，创建AServlet，设置Cookie。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cs = request.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cs != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie c : cs) &#123;</span><br><span class="line">        String s = c.getName() + <span class="string">": "</span> + c.getValue() + <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">        response.getWriter().print(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把B项目的WebRoot目录复制到F:\webapps\news目录下，并把WebRoot目录的名字修改为ROOT。</p><p>第五步：访问<code>www.baidu.com\AServlet</code>，然后再访问<code>news.baidu.com\BServlet</code>。</p><h4 id="Cookie保存中文"><a href="#Cookie保存中文" class="headerlink" title="Cookie保存中文"></a>Cookie保存中文</h4><p>Cookie的name和value都不能使用中文，如果希望在Cookie中使用中文，那么需要先对中文进行URL编码，然后把编码后的字符串放到Cookie中。</p><p>向客户端响应中添加Cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String name = URLEncoder.encode(<span class="string">"姓名"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">String value = URLEncoder.encode(<span class="string">"张三"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">Cookie c = <span class="keyword">new</span> Cookie(name, value);</span><br><span class="line">c.setMaxAge(<span class="number">3600</span>);</span><br><span class="line">response.addCookie(c);</span><br></pre></td></tr></table></figure><p>从客户端请求中获取Cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">Cookie[] cs = request.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cs != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie c : cs) &#123;</span><br><span class="line">        String name = URLDecoder.decode(c.getName(), <span class="string">"UTF-8"</span>);</span><br><span class="line">        String value = URLDecoder.decode(c.getValue(), <span class="string">"UTF-8"</span>);</span><br><span class="line">        String s = name + <span class="string">": "</span> + value + <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">        response.getWriter().print(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="显示曾经浏览过的商品"><a href="#显示曾经浏览过的商品" class="headerlink" title="显示曾经浏览过的商品"></a>显示曾经浏览过的商品</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--index.jsp--%&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;商品列表&lt;/h1&gt;</span><br><span class="line">    &lt;a href="/day06_3/GoodServlet?name=ThinkPad"&gt;ThinkPad&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">    &lt;a href="/day06_3/GoodServlet?name=Lenovo"&gt;Lenovo&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">    &lt;a href="/day06_3/GoodServlet?name=Apple"&gt;Apple&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">    &lt;a href="/day06_3/GoodServlet?name=HP"&gt;HP&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">    &lt;a href="/day06_3/GoodServlet?name=SONY"&gt;SONY&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">    &lt;a href="/day06_3/GoodServlet?name=ACER"&gt;ACER&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">    &lt;a href="/day06_3/GoodServlet?name=DELL"&gt;DELL&lt;/a&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    您浏览过的商品：</span><br><span class="line">    &lt;%</span><br><span class="line">    Cookie[] cs = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span>(cs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(Cookie c : cs) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c.getName().equals(<span class="string">"goods"</span>)) &#123;</span><br><span class="line">                out.print(c.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GoodServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String goodName = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">String goods = CookieUtils.getCookValue(request, <span class="string">"goods"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(goods != <span class="keyword">null</span>) &#123;</span><br><span class="line">String[] arr = goods.split(<span class="string">", "</span>);</span><br><span class="line">Set&lt;String&gt; goodSet = <span class="keyword">new</span> LinkedHashSet(Arrays.asList(arr));</span><br><span class="line">goodSet.add(goodName);</span><br><span class="line">goods = goodSet.toString();</span><br><span class="line">goods = goods.substring(<span class="number">1</span>, goods.length() - <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">goods = goodName;</span><br><span class="line">&#125;</span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"goods"</span>, goods);</span><br><span class="line">cookie.setMaxAge(<span class="number">1</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">response.sendRedirect(<span class="string">"/day06_3/index.jsp"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CookieUtils</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtils</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCookValue</span><span class="params">(HttpServletRequest request, String name)</span> </span>&#123;</span><br><span class="line">Cookie[] cs = request.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cs == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Cookie c : cs) &#123;</span><br><span class="line"><span class="keyword">if</span>(c.getName().equals(name)) &#123;</span><br><span class="line"><span class="keyword">return</span> c.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpSession"><a href="#HttpSession" class="headerlink" title="HttpSession"></a>HttpSession</h3><h4 id="HttpSession概述"><a href="#HttpSession概述" class="headerlink" title="HttpSession概述"></a>HttpSession概述</h4><p>javax.servlet.http.HttpSession接口表示一个会话，我们可以把一个会话内需要共享的数据保存到HttpSession对象中！</p><h5 id="获取HttpSession对象"><a href="#获取HttpSession对象" class="headerlink" title="获取HttpSession对象"></a>获取HttpSession对象</h5><ul><li><p>HttpSession request.getSesssion()：如果当前会话已经有了session对象那么直接返回，如果当前会话还不存在会话，那么创建session并返回；</p></li><li><p>HttpSession request.getSession(boolean)：当参数为true时，与requeset.getSession()相同。如果参数为false，那么如果当前会话中存在session则返回，不存在返回null；</p></li></ul><h5 id="HttpSession是域对象"><a href="#HttpSession是域对象" class="headerlink" title="HttpSession是域对象"></a>HttpSession是域对象</h5><p>我们已经学习过HttpServletRequest、ServletContext，它们都是域对象，现在我们又学习了一个HttpSession，它也是域对象。它们三个是Servlet中可以使用的域对象，而JSP中可以多使用一个域对象，明天我们再讲解JSP的第四个域对象。</p><ul><li><p>HttpServletRequest：一个请求创建一个request对象，所以在同一个请求中可以共享request，例如一个请求从AServlet转发到BServlet，那么AServlet和BServlet可以共享request域中的数据；</p></li><li><p>ServletContext：一个应用只创建一个ServletContext对象，所以在ServletContext中的数据可以在整个应用中共享，只要不启动服务器，那么ServletContext中的数据就可以共享；</p></li><li><p>HttpSession：一个会话创建一个HttpSession对象，同一会话中的多个请求中可以共享session中的数据；</p></li></ul><p>下面是session的域方法：</p><ul><li><p>void setAttribute(String name, Object value)：用来存储一个对象，也可以称之为存储一个域属性，例如：session.setAttribute(“xxx”, “XXX”)，在session中保存了一个域属性，域属性名称为xxx，域属性的值为XXX。请注意，如果多次调用该方法，并且使用相同的name，那么会覆盖上一次的值，这一特性与Map相同；</p></li><li><p>Object getAttribute(String name)：用来获取session中的数据，当前在获取之前需要先去存储才行，例如：String value = (String) session.getAttribute(“xxx”);，获取名为xxx的域属性；</p></li><li><p>void removeAttribute(String name)：用来移除HttpSession中的域属性，如果参数name指定的域属性不存在，那么本方法什么都不做；</p></li><li><p>Enumeration getAttributeNames()：获取所有域属性的名称；</p></li></ul><h4 id="登录案例"><a href="#登录案例" class="headerlink" title="登录案例"></a>登录案例</h4><p>需要的页面：</p><ul><li><p>login.jsp：登录页面，提供登录表单；</p></li><li><p>index1.jsp：主页，显示当前用户名称，如果没有登录，显示您还没登录；</p></li><li><p>index2.jsp：主页，显示当前用户名称，如果没有登录，显示您还没登录；</p></li></ul><p>Servlet：</p><ul><li>LoginServlet：在login.jsp页面提交表单时，请求本Servlet。在本Servlet中获取用户名、密码进行校验，如果用户名、密码错误，显示”用户名或密码错误”，如果正确保存用户名session中，然后重定向到index1.jsp；</li></ul><p>当用户没有登录时访问index1.jsp或index2.jsp，显示”您还没有登录”。如果用户在login.jsp登录成功后到达index1.jsp页面会显示当前用户名，而且不用再次登录去访问index2.jsp也会显示用户名。因为多次请求在一个会话范围，index1.jsp和index2.jsp都会到session中获取用户名，session对象在一个会话中是相同的，所以都可以获取到用户名！</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--login.jsp--%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;login.jsp&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;login.jsp&lt;/h1&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/day06_4/LoginServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> /&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--index1.jsp--%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;index1.jsp&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;h1&gt;index1.jsp&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String username = (String)session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line"><span class="keyword">if</span>(username == <span class="keyword">null</span>) &#123;</span><br><span class="line">out.print(<span class="string">"您还没有登录！"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">out.print(<span class="string">"用户名："</span> + username);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="/day06_4/index2.jsp"&gt;index2&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--index2.jsp--%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;index2.jsp&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;h1&gt;index2.jsp&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String username = (String)session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line"><span class="keyword">if</span>(username == <span class="keyword">null</span>) &#123;</span><br><span class="line">out.print(<span class="string">"您还没有登录！"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">out.print(<span class="string">"用户名："</span> + username);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="/day06_4/index1.jsp"&gt;index1&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LoginServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(username.equalsIgnoreCase(<span class="string">"itcast"</span>)) &#123;</span><br><span class="line">response.getWriter().print(<span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">response.sendRedirect(<span class="string">"/day06_4/index1.jsp"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="session的实现原理"><a href="#session的实现原理" class="headerlink" title="session的实现原理"></a>session的实现原理</h4><p>session底层是依赖Cookie的！我们来理解一下session的原理吧！</p><p>当我首次去银行时，因为还没有账号，所以需要开一个账号，我获得的是银行卡，而银行这边的数据库中留下了我的账号，我的钱是保存在银行的账号中，而我带走的是我的卡号。</p><p>当我再次去银行时，只需要带上我的卡，而无需再次开一个账号了。只要带上我的卡，那么我在银行操作的一定是我的账号！</p><p>当首次使用session时，服务器端要创建session，session是保存在服务器端，而给客户端的session的id（一个cookie中保存了sessionId）。客户端带走的是sessionId，而数据是保存在session中。</p><p>当客户端再次访问服务器时，在请求中会带上sessionId，而服务器会通过sessionId找到对应的session，而无需再创建新的session。</p><p><img src="https://i.loli.net/2020/06/30/TN62RhXb5WA8auw.png" alt="2.png"></p><h4 id="session与浏览器"><a href="#session与浏览器" class="headerlink" title="session与浏览器"></a>session与浏览器</h4><p>session保存在服务器，而sessionId通过Cookie发送给客户端，但这个Cookie的生命为-1，即只在浏览器内存中存在，也就是说如果用户关闭了浏览器，那么这个Cookie就丢失了。</p><p>当用户再次打开浏览器访问服务器时，就不会有sessionId发送给服务器，那么服务器会认为你没有session，所以服务器会创建一个session，并在响应中把sessionId中到Cookie中发送给客户端。　　　　　</p><p>你可能会说，那原来的session对象会怎样？当一个session长时间没人使用的话，服务器会把session删除了！这个时长在Tomcat中配置是30分钟，可以在${CATALANA}/conf/web.xml找到这个配置，当然你也可以在自己的web.xml中覆盖这个配置！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>session失效时间也说明一个问题！如果你打开网站的一个页面开始长时间不动，超出了30分钟后，再去点击链接或提交表单时你会发现，你的session已经丢失了！</p><h4 id="session其他常用API"><a href="#session其他常用API" class="headerlink" title="session其他常用API"></a>session其他常用API</h4><ul><li><p>String getId()：获取sessionId；</p></li><li><p>int getMaxInactiveInterval()：获取session可以的最大不活动时间（秒），默认为30分钟。当session在30分钟内没有使用，那么Tomcat会在session池中移除这个session；</p></li><li><p>void setMaxInactiveInterval(int interval)：设置session允许的最大不活动时间（秒），如果设置为1秒，那么只要session在1秒内不被使用，那么session就会被移除；</p></li><li><p>long getCreationTime()：返回session的创建时间，返回值为当前时间的毫秒值；</p></li><li><p>long getLastAccessedTime()：返回session的最后活动时间，返回值为当前时间的毫秒值；</p></li><li><p>void invalidate()：让session失效！调用这个方法会被session失效，当session失效后，客户端再次请求，服务器会给客户端创建一个新的session，并在响应中给客户端新session的sessionId；</p></li><li><p>boolean isNew()：查看session是否为新。当客户端第一次请求时，服务器为客户端创建session，但这时服务器还没有响应客户端，也就是还没有把sessionId响应给客户端时，这时session的状态为新。</p></li></ul><h4 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h4><p>我们知道session依赖Cookie，那么session为什么依赖Cookie呢？因为服务器需要在每次请求中获取sessionId，然后找到客户端的session对象。那么如果客户端浏览器关闭了Cookie呢？那么session是不是就会不存在了呢？</p><p>其实还有一种方法让服务器收到的每个请求中都带有sessioinId，那就是URL重写！在每个页面中的每个链接和表单中都添加名为jSessionId的参数，值为当前sessionid。当用户点击链接或提交表单时也服务器可以通过获取jSessionId这个参数来得到客户端的sessionId，找到sessoin对象。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--index.jsp--%&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;URL重写&lt;/h1&gt;</span><br><span class="line">    &lt;a href='/day06_5/index.jsp;jsessionid=&lt;%=session.getId() %&gt;' &gt;主页&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">'/day06_5/index.jsp;jsessionid=&lt;%=session.getId() %&gt;'</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>也可以使用response.encodeURL()对每个请求的URL处理，这个方法会自动追加jsessionid参数，与上面我们手动添加是一样的效果。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href='&lt;%=response.encodeURL("/day06_5/index.jsp") %&gt;' &gt;主页&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">'&lt;%=response.encodeURL("/day06_5/index.jsp") %&gt;'</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>　使用response.encodeURL()更加”智能”，它会判断客户端浏览器是否禁用了Cookie，如果禁用了，那么这个方法在URL后面追加jsessionid，否则不会追加。</p><h3 id="案例：一次性图片验证码"><a href="#案例：一次性图片验证码" class="headerlink" title="案例：一次性图片验证码"></a>案例：一次性图片验证码</h3><h4 id="验证码有啥用"><a href="#验证码有啥用" class="headerlink" title="验证码有啥用"></a>验证码有啥用</h4><p>在我们注册时，如果没有验证码的话，我们可以使用URLConnection来写一段代码发出注册请求。甚至可以使用while(true)来注册！那么服务器就废了！</p><p>验证码可以去识别发出请求的是人还是程序！当然，如果聪明的程序可以去分析验证码图片！但分析图片也不是一件容易的事，因为一般验证码图片都会带有干扰线，人都看不清，那么程序一定分析不出来。</p><h4 id="VerifyCode类"><a href="#VerifyCode类" class="headerlink" title="VerifyCode类"></a>VerifyCode类</h4><p>现在我们已经有了cn.itcast.utils.VerifyCode类，这个类可以生成验证码图片！下面来看一个小例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建验证码类</span></span><br><span class="line">    VerifyCode vc = <span class="keyword">new</span> VerifyCode();</span><br><span class="line">    <span class="comment">// 获取随机图片</span></span><br><span class="line">    BufferedImage image = vc.getImage();</span><br><span class="line">    <span class="comment">// 获取刚刚生成的随机图片上的文本</span></span><br><span class="line">    String text = vc.getText();</span><br><span class="line">    System.out.println(text);</span><br><span class="line">    <span class="comment">// 保存图片</span></span><br><span class="line">    FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"F:/xxx.jpg"</span>);</span><br><span class="line">    VerifyCode.output(image, out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在页面中显示动态图片"><a href="#在页面中显示动态图片" class="headerlink" title="在页面中显示动态图片"></a>在页面中显示动态图片</h4><p>我们需要写一个VerifyCodeServlet，在这个Servlet中我们生成动态图片，然后它图片写入到response.getOutputStream()流中！然后让页面的<img>元素指定这个VerifyCodServlet即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VerifyCodeServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerifyCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">VerifyCode vc = <span class="keyword">new</span> VerifyCode();</span><br><span class="line">BufferedImage image = vc.getImage();</span><br><span class="line">String text = vc.getText();</span><br><span class="line">System.out.println(<span class="string">"text:"</span> + text);</span><br><span class="line">VerifyCode.output(image, response.getOutputStream());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--index.jsp--%&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function">function <span class="title">_change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> imgEle = document.getElementById(<span class="string">"vCode"</span>);</span><br><span class="line">        imgEle.src = <span class="string">"/day06_6/VerifyCodeServlet?"</span> + <span class="keyword">new</span> Date().getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">...  </span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;验证码&lt;/h1&gt;</span><br><span class="line">    &lt;img id=<span class="string">"vCode"</span> src=<span class="string">"/day06_6/VerifyCodeServlet"</span>/&gt;</span><br><span class="line">    &lt;a href="javascript:_change()"&gt;看不清，换一张&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="在注册页面中使用验证码"><a href="#在注册页面中使用验证码" class="headerlink" title="在注册页面中使用验证码"></a>在注册页面中使用验证码</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/day06_6/RegistServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    验证码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"code"</span> size=<span class="string">"3"</span>/&gt;</span><br><span class="line">    &lt;img id=<span class="string">"vCode"</span> src=<span class="string">"/day06_6/VerifyCodeServlet"</span>/&gt;</span><br><span class="line">    &lt;a href="javascript:_change()"&gt;看不清，换一张&lt;/a&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="RegistServlet"><a href="#RegistServlet" class="headerlink" title="RegistServlet"></a>RegistServlet</h4><p>修改VerifyCodeServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerifyCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">VerifyCode vc = <span class="keyword">new</span> VerifyCode();</span><br><span class="line">BufferedImage image = vc.getImage();</span><br><span class="line">request.getSession().setAttribute(<span class="string">"vCode"</span>, vc.getText());</span><br><span class="line">VerifyCode.output(image, response.getOutputStream());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// RegisterServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String vCode = request.getParameter(<span class="string">"code"</span>); </span><br><span class="line"></span><br><span class="line">String sessionVerifyCode = (String)request.getSession().getAttribute(<span class="string">"vCode"</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(vCode.equalsIgnoreCase(sessionVerifyCode) ) &#123;</span><br><span class="line">response.getWriter().print(username + <span class="string">", 恭喜！注册成功！"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">response.getWriter().print(<span class="string">"验证码错误！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结验证码案例"><a href="#总结验证码案例" class="headerlink" title="总结验证码案例"></a>总结验证码案例</h4><ul><li><p>VerifyCodeServlet：</p><ul><li><p>生成验证码：VerifyCode vc = new VerifyCode(); BufferedImage image = vc.getImage()；</p></li><li><p>在session中保存验证码文本：request.getSession.getAttribute(“vCode”, vc.getText())；</p></li><li><p>把验证码输出到页面：VerifyCode.output(image, response.getOutputStream)；</p></li></ul></li><li><p>regist.jsp：</p><ul><li><p>表单中包含username和code字段；</p></li><li><p>在表单中给出<img>指向VerifyCodeServlet，用来在页面中显示验证码图片；</p></li><li><p>提供”看不清，换一张”链接，指向_change()函数；</p></li><li><p>提交到RegistServlet；</p></li></ul></li><li><p>RegistServlet：</p><ul><li>获取表单中的username和code；</li></ul></li><li><p>获取session中的vCode；</p><ul><li>比较code和vCode是否相同；</li></ul></li><li><p>相同说明用户输入的验证码正确，否则输入验证码错误。</p></li></ul><hr><h2 id="Day-07"><a href="#Day-07" class="headerlink" title="Day 07"></a>Day 07</h2><p><em>01/07/2020</em></p><h3 id="JSP-指令"><a href="#JSP-指令" class="headerlink" title="JSP 指令"></a>JSP 指令</h3><p>JSP指令的格式：<code>&lt;%@指令名 attr1=&quot;&quot; attr2=&quot;&quot; %&gt;</code>，一般都会把JSP指令放到JSP文件的最上方，但这不是必须的。</p><p>JSP中有三大指令：page、include、taglib，最为常用，也最为复杂的就是page指令了。</p><h4 id="page-指令"><a href="#page-指令" class="headerlink" title="page 指令"></a>page 指令</h4><p>page指令是最为常用的指定，也是属性最多的属性！</p><p>page指令没有必须属性，都是可选属性。例如&lt;%@page %&gt;，没有给出任何属性也是可以的！</p><p>在JSP页面中，任何指令都可以重复出现！</p><p><code>&lt;%@ page language=&quot;java&quot;%&gt;</code></p><p><code>&lt;%@ page import=&quot;java.util.*&quot;%&gt;</code></p><p><code>&lt;%@ page pageEncoding=&quot;utf-8&quot;%&gt;</code></p><p>这也是可以的！</p><h5 id="page指令的pageEncoding和contentType（重点）"><a href="#page指令的pageEncoding和contentType（重点）" class="headerlink" title="page指令的pageEncoding和contentType（重点）"></a>page指令的pageEncoding和contentType（重点）</h5><p>pageEncoding指定当前JSP页面的编码！这个编码是给服务器看的，服务器需要知道当前JSP使用的编码，不然服务器无法正确把JSP编译成java文件。所以这个编码只需要与真实的页面编码一致即可！在MyEclipse中，在JSP文件上点击右键，选择属性就可以看到当前JSP页面的编码了。</p><p>contentType属性与response.setContentType()方法的作用相同！它会完成两项工作，一是设置响应字符流的编码，二是设置content-type响应头。例如：<code>&lt;%@ contentType=&quot;text/html;charset=utf-8&quot;%&gt;</code>，它会使”真身”中出现response.setContentType(“text/html;charset=utf-8”)。</p><p>无论是page指令的pageEncoding还是contentType，它们的默认值都是ISO-8859-1，我们知道ISO-8859-1是无法显示中文的，所以JSP页面中存在中文的话，一定要设置这两个属性。</p><p>其实pageEncoding和contentType这两个属性的关系很”暧昧”：</p><ul><li><p>当设置了pageEncoding，而没设置contentType时： contentType的默认值为pageEncoding；</p></li><li><p>当设置了contentType，而没设置pageEncoding时： pageEncoding的默认值与contentType；</p></li></ul><p><strong>也就是说，当pageEncoding和contentType只出现一个时，那么另一个的值与出现的值相同。如果两个都不出现，那么两个属性的值都是ISO-8859-1。所以通过我们至少设置它们两个其中一个！</strong></p><h5 id="page指令的import属性"><a href="#page指令的import属性" class="headerlink" title="page指令的import属性"></a>page指令的import属性</h5><p>import是page指令中一个很特别的属性！</p><p>import属性值对应”真身”中的import语句。</p><p>import属性值可以使逗号：<code>&lt;%@page import=&quot;java.net.*,java.util.*,java.sql.*&quot;%&gt;</code></p><p>import属性是唯一可以重复出现的属性：</p><p><code>&lt;%@page import=&quot;java.util.*&quot; import=&quot;java.net.*&quot; import=&quot;java.sql.*&quot;%&gt;</code></p><p>但是，我们一般会使用多个page指令来导入多个包：</p><p><code>&lt;%@ page import=&quot;java.util.*&quot;%&gt;</code></p><p><code>&lt;%@ page import=&quot;java.net.*&quot;%&gt;</code></p><p><code>&lt;%@ page import=&quot;java.text.*&quot;%&gt;</code></p><h5 id="page指令的errorPage和isErrorPage"><a href="#page指令的errorPage和isErrorPage" class="headerlink" title="page指令的errorPage和isErrorPage"></a>page指令的errorPage和isErrorPage</h5><p>我们知道，在一个JSP页面出错后，Tomcat会响应给用户错误信息（500页面）！如果你不希望Tomcat给用户输出错误信息，那么可以使用page指令的errorPage来指定错误页！也就是自定义错误页面，例如：<code>&lt;%@page errorPage=&quot;xxx.jsp&quot;%&gt;</code>。这时，在当前JSP页面出现错误时，会请求转发到xxx.jsp页面。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--a.jsp--%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page  errorPage=<span class="string">"b.jsp"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"哈哈~"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--b.jsp--%&gt;</span><br><span class="line">&lt;%@ page pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">   &lt;h1&gt;出错啦！&lt;/h1&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在上面代码中，a.jsp抛出异常后，会请求转发到b.jsp。在浏览器的地址栏中还是a.jsp，因为是请求转发！</p><p>而且客户端浏览器收到的响应码为200，表示请求成功！如果希望客户端得到500，那么需要指定b.jsp为错误页面。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page  isErrorPage=<span class="string">"true"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">   &lt;h1&gt;出错啦！&lt;/h1&gt;</span><br><span class="line">&lt;%=exception.getMessage() %&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>注意，当isErrorPage为true时，说明当前JSP为错误页面，即专门处理错误的页面。那么这个页面中就可以使用一个内置对象exception了。其他页面是不能使用这个内置对象的！</p><p>温馨提示：<em>IE会在状态码为500时，并且响应正文的长度小于等于512B时不给予显示！而是显示”网站无法显示该页面”字样。这时你只需要添加一些响应内容即可，例如上例中的b.jsp中我给出一些内容，IE就可以正常显示了！</em></p><h6 id="web-xml中配置错误页面"><a href="#web-xml中配置错误页面" class="headerlink" title="web.xml中配置错误页面"></a>web.xml中配置错误页面</h6><p>不只可以通过JSP的page指令来配置错误页面，还可以在web.xml文件中指定错误页面。这种方式其实与page指令无关，但想来想去还是在这个位置来说明比较合适！</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.RuntimeException<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;error-page&gt;</code>有两种使用方式：</p><ul><li><p><code>&lt;error-code&gt;</code>和<code>&lt;location&gt;</code>子元素；</p></li><li><p><code>&lt;exception-type&gt;</code>和<code>&lt;location&gt;</code>子元素；</p><p>其中<code>&lt;error-code&gt;</code>是指定响应码；<code>&lt;location&gt;</code>指定转发的页面；<code>&lt;exception-type&gt;</code>是指定抛出的异常类型。</p></li><li><p>当出现404时，会跳转到error404.jsp页面；</p></li><li><p>当出现RuntimeException异常时，会跳转到error.jsp页面；</p></li><li><p>当出现非RuntimeException的异常时，会跳转到error500.jsp页面。</p></li></ul><p>这种方式会在控制台看到异常信息！而使用page指令时不会在控制台打印异常信息。</p><h5 id="page指令的authFlush和buffer"><a href="#page指令的authFlush和buffer" class="headerlink" title="page指令的authFlush和buffer"></a>page指令的authFlush和buffer</h5><p>buffer表示当前JSP的输出流（out隐藏对象）的缓冲区大小，默认为8kb。</p><p>authFlush表示在out对象的缓冲区满时如何处理！当authFlush为true时，表示缓冲区满时把缓冲区数据输出到客户端；当authFlush为false时，表示缓冲区满时，抛出异常。authFlush的默认值为true。</p><p>这两个属性一般我们也不会去特意设置，都是保留默认值！</p><h5 id="page指令的isELIgnored"><a href="#page指令的isELIgnored" class="headerlink" title="page指令的isELIgnored"></a>page指令的isELIgnored</h5><p>后面我们会讲解EL表达式语言，page指令的isELIgnored属性表示当前JSP页面是否忽略EL表达式，默认值为false，表示不忽略（即支持）。</p><h5 id="page指令的其他属性"><a href="#page指令的其他属性" class="headerlink" title="page指令的其他属性"></a>page指令的其他属性</h5><ul><li><p>language：只能是Java，这个属性可以看出JSP最初设计时的野心！希望JSP可以转换成其他语言！但是，到现在JSP也只能转换成Java代码；</p></li><li><p>info：JSP说明性信息；</p></li><li><p>isThreadSafe：默认为false，为true时，JSP生成的Servlet会去实现一个过时的标记接口SingleThreadModel，这时JSP就只能处理单线程的访问；</p></li><li><p>session：默认为true，表示当前JSP页面可以使用session对象，如果为false表示当前JSP页面不能使用session对象；</p></li><li><p>extends：指定当前JSP页面生成的Servlet的父类；</p></li></ul><h5 id="lt-jsp-config-gt-（了解）"><a href="#lt-jsp-config-gt-（了解）" class="headerlink" title="&lt;jsp-config&gt;（了解）"></a><code>&lt;jsp-config&gt;</code>（了解）</h5><p>在web.xml页面中配置<code>&lt;jsp-config&gt;</code>也可以完成很多page指定的功能！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-property-group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="comment">&lt;!--对所有jsp进行配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-ignored</span>&gt;</span>true<span class="tag">&lt;/<span class="name">el-ignored</span>&gt;</span><span class="comment">&lt;!--忽略EL表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page-encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">page-encoding</span>&gt;</span><span class="comment">&lt;!--指定页面编码为utf-8--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scripting-invalid</span>&gt;</span>true<span class="tag">&lt;/<span class="name">scripting-invalid</span>&gt;</span><span class="comment">&lt;!--禁用Java脚本！如果在JSP页面中使用了Java脚本就会抛出异常。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jsp-property-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h4><p>include指令表示静态包含！即目的是把多个JSP合并成一个JSP文件！</p><p>include指令只有一个属性：file，指定要包含的页面，例如：<code>&lt;%@include file=&quot;b.jsp&quot;%&gt;</code>。</p><p>静态包含：当hel.jsp页面包含了lo.jsp页面后，在编译hel.jsp页面时，需要把hel.jsp和lo.jsp页面合并成一个文件，然后再编译成Servlet（Java文件）。</p><p><img src="https://i.loli.net/2020/07/01/pOWiNGAd3E9mQVS.png" alt="2.png"></p><p>很明显，在ol.jsp中在使用username变量，而这个变量在hel.jsp中定义的，所以只有这两个JSP文件合并后才能使用。通过include指定完成对它们的合并！</p><h4 id="taglib指令"><a href="#taglib指令" class="headerlink" title="taglib指令"></a>taglib指令</h4><p>这个指令需要在学习了自定义标签后才会使用，现在只能做了了解而已！</p><p>在JSP页面中使用第三方的标签库时，需要使用taglib指令来”导包”。例如：</p><p><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></p><p>其中prefix表示标签的前缀，这个名称可以随便起。uri是由第三方标签库定义的，所以你需要知道第三方定义的uri。</p><h3 id="JSP-九大内置对象"><a href="#JSP-九大内置对象" class="headerlink" title="JSP 九大内置对象"></a>JSP 九大内置对象</h3><h4 id="什么是JSP九大内置对象"><a href="#什么是JSP九大内置对象" class="headerlink" title="什么是JSP九大内置对象"></a>什么是JSP九大内置对象</h4><p>在JSP中无需创建就可以使用的9个对象，它们是：</p><ul><li><p>out（JspWriter）：等同与response.getWriter()，用来向客户端发送文本数据；</p></li><li><p>config（ServletConfig）：对应”真身”中的ServletConfig；</p></li><li><p>page（当前JSP的真身类型）：当前JSP页面的”this”，即当前对象；</p></li><li><p>pageContext（PageContext）：页面上下文对象，它是最后一个没讲的域对象；</p></li><li><p>exception（Throwable）：只有在错误页面中可以使用这个对象；</p></li><li><p>request（HttpServletRequest）：即HttpServletRequest类的对象；</p></li><li><p>response（HttpServletResponse）：即HttpServletResponse类的对象；</p></li><li><p>application（ServletContext）：即ServletContext类的对象；</p></li><li><p>session（HttpSession）：即HttpSession类的对象，不是每个JSP页面中都可以使用，如果在某个JSP页面中设置<code>&lt;%@page session=&quot;false&quot;%&gt;</code>，说明这个页面不能使用session。</p></li></ul><p>在这9个对象中有很多是极少会被使用的，例如：config、page、exception基本不会使用。</p><p>在这9个对象中有两个对象不是每个JSP页面都可以使用的：exception、session。</p><p>在这9个对象中有很多前面已经学过的对象：out、request、response、application、session、config。</p><h4 id="通过”真身”来对照JSP"><a href="#通过”真身”来对照JSP" class="headerlink" title="通过”真身”来对照JSP"></a>通过”真身”来对照JSP</h4><p>我们知道JSP页面的内容出现在”真身”的<code>_jspService()方法</code>中，而在<code>_jspService()</code>方法开头部分已经创建了9大内置对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageContext pageContext = <span class="keyword">null</span>;</span><br><span class="line">    HttpSession session = <span class="keyword">null</span>;</span><br><span class="line">    ServletContext application = <span class="keyword">null</span>;</span><br><span class="line">    ServletConfig config = <span class="keyword">null</span>;</span><br><span class="line">    JspWriter out = <span class="keyword">null</span>;</span><br><span class="line">    Object page = <span class="keyword">this</span>;</span><br><span class="line">    JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">    PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">      <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">      _jspx_page_context = pageContext;</span><br><span class="line">      application = pageContext.getServletContext();</span><br><span class="line">      config = pageContext.getServletConfig();</span><br><span class="line">      session = pageContext.getSession();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">      _jspx_out = out;</span><br><span class="line"></span><br><span class="line">　　　　<span class="comment">// 从这里开始，才是JSP页面的内容</span></span><br><span class="line">   &#125;…</span><br></pre></td></tr></table></figure><h4 id="pageContext对象"><a href="#pageContext对象" class="headerlink" title="pageContext对象"></a>pageContext对象</h4><p>在JavaWeb中一共四个域对象，其中Servlet中可以使用的是request、session、application三个对象，而在JSP中可以使用pageContext、request、session、application四个域对象。</p><p>pageContext 对象是PageContext类型，它的主要功能有：</p><ul><li><p>域对象功能；</p></li><li><p>代理其它域对象功能；</p></li><li><p>获取其他内置对象；</p></li></ul><h5 id="域对象功能"><a href="#域对象功能" class="headerlink" title="域对象功能"></a>域对象功能</h5><p>pageContext也是域对象，它的范围是当前页面。它的范围也是四个域对象中最小的！</p><ul><li><p>void setAttribute(String name, Object value)；</p></li><li><p>Object getAttrbiute(String name, Object value)；</p></li><li><p>void removeAttribute(String name, Object value)；</p></li></ul><h5 id="代理其它域对象功能"><a href="#代理其它域对象功能" class="headerlink" title="代理其它域对象功能"></a>代理其它域对象功能</h5><p>还可以使用pageContext来代理其它3个域对象的功能，也就是说可以使用pageContext向request、session、application对象中存取数据，例如：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">"x"</span>, <span class="string">"X"</span>); <span class="comment">// 向pageContext中存储数据</span></span><br><span class="line">pageContext.setAttribute(<span class="string">"x"</span>, <span class="string">"XX"</span>, PageContext.REQUEST_SCOPE); <span class="comment">// 向request中存储数据</span></span><br><span class="line">pageContext.setAttribute(<span class="string">"x"</span>, <span class="string">"XXX"</span>, PageContext.SESSION_SCOPE); <span class="comment">// 向session中存储数据</span></span><br><span class="line">pageContext.setAttribute(<span class="string">"x"</span>, <span class="string">"XXXX"</span>, PageContext.APPLICATION_SCOPE); <span class="comment">// 向application中存储数据</span></span><br></pre></td></tr></table></figure><ul><li><p>void setAttribute(String name, Object value, int scope)：在指定范围中添加数据；</p></li><li><p>Object getAttribute(String name, int scope)：获取指定范围的数据；</p></li><li><p>void removeAttribute(String name, int scope)：移除指定范围的数据；</p></li><li><p>Object findAttribute(String name)：依次在page、request、session、application范围查找名称为name的数据，如果找到就停止查找。这说明在这个范围内有相同名称的数据，那么page范围的优先级最高！</p></li></ul><h5 id="获取其他内置对象"><a href="#获取其他内置对象" class="headerlink" title="获取其他内置对象"></a>获取其他内置对象</h5><p>一个pageContext对象等于所有内置对象，即1个当9个。这是因为可以使用pageContext对象获取其它8个内置对象：</p><ul><li><p>JspWriter getOut()：获取out内置对象；</p></li><li><p>ServletConfig getServletConfig()：获取config内置对象；</p></li><li><p>Object getPage()：获取page内置对象；</p></li><li><p>ServletRequest getRequest()：获取request内置对象；</p></li><li><p>ServletResponse getResponse()：获取response内置对象；</p></li><li><p>HttpSession getSession()：获取session内置对象；</p></li><li><p>ServletContext getServletContext()：获取application内置对象；</p></li><li><p>Exception getException()：获取exception内置对象；</p></li></ul><h3 id="JSP-动作标签"><a href="#JSP-动作标签" class="headerlink" title="JSP 动作标签"></a>JSP 动作标签</h3><h4 id="JSP动作标签概述"><a href="#JSP动作标签概述" class="headerlink" title="JSP动作标签概述"></a>JSP动作标签概述</h4><p>动作标签的作用是用来简化Java脚本的！</p><p>JSP动作标签是JavaWeb内置的动作标签，它们是已经定义好的动作标签，我们可以拿来直接使用。</p><p>如果JSP动作标签不够用时，还可以使用自定义标签（今天不讲）。JavaWeb一共提供了20个JSP动作标签，但有很多基本没有用，这里只介绍一些有坐标的动作标签。</p><p>JSP动作标签的格式：<code>&lt;jsp:标签名 …&gt;</code></p><h4 id="lt-jsp-include-gt"><a href="#lt-jsp-include-gt" class="headerlink" title="&lt;jsp:include&gt;"></a><code>&lt;jsp:include&gt;</code></h4><p><code>&lt;jsp:include&gt;</code>标签的作用是用来包含其它JSP页面的！你可能会说，前面已经学习了include指令了，它们是否相同呢？虽然它们都是用来包含其它JSP页面的，但它们的实现的级别是不同的！</p><p>include指令是在编译级别完成的包含，即把当前JSP和被包含的JSP合并成一个JSP，然后再编译成一个Servlet。</p><p>include动作标签是在运行级别完成的包含，即当前JSP和被包含的JSP都会各自生成Servlet，然后在执行当前JSP的Servlet时完成包含另一个JSP的Servlet。它与RequestDispatcher的include()方法是相同的！</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--hel.jsp--%&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;hel.jsp&lt;/h1&gt;</span><br><span class="line">    &lt;jsp:include page=<span class="string">"lo.jsp"</span> /&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--lo.jsp--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.println(<span class="string">"&lt;h1&gt;lo.jsp&lt;/h1&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/01/Oi2EqIUWygDaHVT.png" alt="2.png"></p><p>其实<code>&lt;jsp:include&gt;</code>在”真身”中不过是一句方法调用，即调用另一个Servlet而已。</p><h4 id="lt-jsp-forward-gt"><a href="#lt-jsp-forward-gt" class="headerlink" title="&lt;jsp:forward&gt;"></a><code>&lt;jsp:forward&gt;</code></h4><p>forward标签的作用是请求转发！forward标签的作用与RequestDispatcher#forward()方法相同。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--hel.jsp--%&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">        hel.jsp</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">    &lt;jsp:forward page=<span class="string">"lo.jsp"</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--lo.jsp--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.println(<span class="string">"&lt;h1&gt;lo.jsp&lt;/h1&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>注意，最后客户端只能看到lo.jsp的输出，而看不到hel.jsp的内容。也就是说在hel.jsp中的<code>&lt;h1&gt;hel.jsp&lt;/h1&gt;</code>是不会发送到客户端的。<code>&lt;jsp:forward&gt;</code>的作用是”别再显示我，去显示它吧！”。</p><h4 id="lt-jsp-param-gt"><a href="#lt-jsp-param-gt" class="headerlink" title="&lt;jsp:param&gt;"></a><code>&lt;jsp:param&gt;</code></h4><p>还可以在<code>&lt;jsp:include&gt;</code>和<code>&lt;jsp:forward&gt;</code>标签中使用<code>&lt;jsp:param&gt;</code>子标签，它是用来传递参数的。下面用<code>&lt;jsp:include&gt;</code>来举例说明<code>&lt;jsp:param&gt;</code>的使用。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;a.jsp&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;a.jsp&lt;/h1&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"/b.jsp"</span>&gt;</span><br><span class="line">&lt;jsp:param value=<span class="string">"zhangSan"</span> name=<span class="string">"username"</span>/&gt; &lt;%--传参--%&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;b.jsp&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;b.jsp&lt;/h1&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>); </span><br><span class="line">out.print(<span class="string">"你好："</span> + username);</span><br><span class="line">%&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><h4 id="JavaBean概述"><a href="#JavaBean概述" class="headerlink" title="JavaBean概述"></a>JavaBean概述</h4><h5 id="什么是JavaBean"><a href="#什么是JavaBean" class="headerlink" title="什么是JavaBean"></a>什么是JavaBean</h5><p>JavaBean是一种规范，也就是对类的要求。它要求Java类的成员变量提供getter/setter方法，这样的成员变量被称之为JavaBean属性。</p><p>JavaBean还要求类必须提供仅有的无参构造器，例如：public User() {…}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JavaBean属性"><a href="#JavaBean属性" class="headerlink" title="JavaBean属性"></a>JavaBean属性</h5><p>JavaBean属性是具有getter/setter方法的成员变量。</p><ul><li><p>也可以只提供getter方法，这样的属性叫只读属性；</p></li><li><p>也可以只提供setter方法，这样的属性叫只写属性；</p></li><li><p>如果属性类型为boolean类型，那么读方法的格式可以是get或is。例如名为abc的boolean类型的属性，它的读方法可以是getAbc()，也可以是isAbc()；</p></li></ul><p>JavaBean属性名要求：前两个字母要么都大写，要么都小写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String iD;<span class="comment">// wrong</span></span><br><span class="line"><span class="keyword">private</span> String ID;</span><br><span class="line"><span class="keyword">private</span> String qQ;<span class="comment">// wrong</span></span><br><span class="line"><span class="keyword">private</span> String QQ;</span><br><span class="line">    <span class="comment">// …</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaBean可能存在属性，但不存在这个成员变量，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"zhangSan"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中User类有一个名为username的只读属性！但User类并没有username这个成员变量！</p><p>还可以更变态一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String hello;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hello;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hello = username;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中User类中有一个名为username的属性，它是可读可写的属性！而Use类的成员变量名为hello！也就是说JavaBean的属性名取决于方法名称，而不是成员变量的名称。但通常没有人做这么变态的事情。</p><h4 id="内省（了解）"><a href="#内省（了解）" class="headerlink" title="内省（了解）"></a>内省（了解）</h4><p>内省的目标是得到JavaBean属性的读、写方法的反射对象，通过反射对JavaBean属性进行操作的一组API。例如User类有名为username的JavaBean属性，通过两个Method对象（一个是getUsenrmae()，一个是setUsername()）来操作User对象。</p><p>如果你还不能理解内省是什么，那么我们通过一个问题来了解内省的作用。现在我们有一个Map，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">map.put(<span class="string">"username"</span>, <span class="string">"admin"</span>);</span><br><span class="line">map.put(<span class="string">"password"</span>, <span class="string">"admin123"</span>);</span><br><span class="line"><span class="comment">// ----------------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [username="</span> + username + <span class="string">", password="</span> + password + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在需要把map的数据封装到一个User对象中！User类有两个JavaBean属性，一个叫username，另一个叫password。</p><p>你可能想到的是反射，通过map的key来查找User类的Field！这么做是没有问题的，但我们要知道类的成员变量是私有的，虽然也可以通过反射去访问类的私有的成员变量，但我们也要清楚反射访问私有的东西是有”危险”的，所以还是建议通过getUsername和setUsername来访问JavaBean属性。</p><h5 id="内省之获取BeanInfo"><a href="#内省之获取BeanInfo" class="headerlink" title="内省之获取BeanInfo"></a>内省之获取BeanInfo</h5><p>我们这里不想去对JavaBean规范做过多的介绍，所以也就不在多介绍BeanInfo的”出身”了。你只需要知道如何得到它，以及BeanInfo有什么。</p><p>通过java.beans.Introspector的getBeanInfo()方法来获取java.beans.BeanInfo实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanInfo beanInfo = Introspector.getBeanInfo(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h5 id="得到所有属性描述符（PropertyDescriptor）"><a href="#得到所有属性描述符（PropertyDescriptor）" class="headerlink" title="得到所有属性描述符（PropertyDescriptor）"></a>得到所有属性描述符（PropertyDescriptor）</h5><p>通过BeanInfo可以得到这个类的所有JavaBean属性的PropertyDescriptor对象。然后就可以通过PropertyDescriptor对象得到这个属性的getter/setter方法的Method对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PropertyDescriptor[] pds = beanInfo.getPropertyDescriptors();</span><br></pre></td></tr></table></figure><p>每个PropertyDescriptor对象对应一个JavaBean属性：</p><ul><li><p>String getName()：获取JavaBean属性名称；</p></li><li><p>Method getReadMethod：获取属性的读方法；</p></li><li><p>Method getWriteMethod：获取属性的写方法。</p></li></ul><h5 id="完成Map数据封装到User对象中"><a href="#完成Map数据封装到User对象中" class="headerlink" title="完成Map数据封装到User对象中"></a>完成Map数据封装到User对象中</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">    map.put(<span class="string">"username"</span>, <span class="string">"admin"</span>);</span><br><span class="line">    map.put(<span class="string">"password"</span>, <span class="string">"admin123"</span>);</span><br><span class="line"></span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    PropertyDescriptor[] pds = beanInfo.getPropertyDescriptors();</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">for</span>(PropertyDescriptor pd : pds) &#123;</span><br><span class="line">        String name = pd.getName();</span><br><span class="line">        String value = map.get(name);</span><br><span class="line">        <span class="keyword">if</span>(value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Method writeMethod = pd.getWriteMethod();</span><br><span class="line">            writeMethod.invoke(user, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="commons-beanutils"><a href="#commons-beanutils" class="headerlink" title="commons-beanutils"></a>commons-beanutils</h4><p>提到内省，不能不提commons-beanutils这个工具。它底层使用了内省，对内省进行了大量的简化！</p><p>使用beanutils需要的jar包：</p><ul><li><p>commons-beanutils.jar；</p></li><li><p>commons-logging.jar；</p></li></ul><h5 id="设置JavaBean属性"><a href="#设置JavaBean属性" class="headerlink" title="设置JavaBean属性"></a>设置JavaBean属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">BeanUtils.setProperty(user, <span class="string">"username"</span>, <span class="string">"admin"</span>);</span><br><span class="line">BeanUtils.setProperty(user, <span class="string">"password"</span>, <span class="string">"admin123"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure><h5 id="获取JavaBean属性"><a href="#获取JavaBean属性" class="headerlink" title="获取JavaBean属性"></a>获取JavaBean属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"admin"</span>, <span class="string">"admin123"</span>);</span><br><span class="line"></span><br><span class="line">String username = BeanUtils.getProperty(user, <span class="string">"username"</span>);</span><br><span class="line">String password = BeanUtils.getProperty(user, <span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"username="</span> + username + <span class="string">", password="</span> + password);</span><br></pre></td></tr></table></figure><h5 id="封装Map数据到JavaBean对象中"><a href="#封装Map数据到JavaBean对象中" class="headerlink" title="封装Map数据到JavaBean对象中"></a>封装Map数据到JavaBean对象中</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">map.put(<span class="string">"username"</span>, <span class="string">"admin"</span>);</span><br><span class="line">map.put(<span class="string">"password"</span>, <span class="string">"admin123"</span>);</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">BeanUtils.populate(user, map);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure><h4 id="JSP与JavaBean相关的动作标签"><a href="#JSP与JavaBean相关的动作标签" class="headerlink" title="JSP与JavaBean相关的动作标签"></a>JSP与JavaBean相关的动作标签</h4><p>在JSP中与JavaBean相关的标签有：</p><ul><li><p><code>&lt;jsp:useBean&gt;</code>：创建JavaBean对象；</p></li><li><p><code>&lt;jsp:setProperty&gt;</code>：设置JavaBean属性；</p></li><li><p><code>&lt;jsp:getProperty&gt;</code>：获取JavaBean属性；</p></li></ul><p>我们需要先创建一个JavaBean类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User.java</span></span><br><span class="line"><span class="keyword">package</span> tt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [username="</span> + username + <span class="string">", password="</span> + password + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="lt-jsp-useBean-gt"><a href="#lt-jsp-useBean-gt" class="headerlink" title="&lt;jsp:useBean&gt;"></a><code>&lt;jsp:useBean&gt;</code></h5><p><code>&lt;jsp:useBean&gt;</code>标签的作用是创建JavaBean对象：</p><ul><li><p>在当前JSP页面创建JavaBean对象；</p></li><li><p>把创建的JavaBean对象保存到域对象中；</p></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"user1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tt.User"</span> /&gt;</span><br></pre></td></tr></table></figure><p>上面代码表示在当前JSP页面中创建User类型的对象，并且把它保存到page域中了。下面我们把<code>&lt;jsp:useBean&gt;</code>标签翻译成Java代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">tt.User user1 = <span class="keyword">new</span> tt.User();</span><br><span class="line">pageContext.setAttribute(<span class="string">"user1"</span>, user1);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这说明我们可以在JSP页面中完成下面的操作：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"user1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tt.User"</span> /&gt;</span><br><span class="line">&lt;%=user1 %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.println(pageContext.getAttribute(<span class="string">"user1"</span>));</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;jsp:useBean&gt;</code>标签默认是把JavaBean对象保存到page域，还可以通过scope标签属性来指定保存的范围：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"user1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tt.User"</span> scope=<span class="string">"page"</span>/&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">"user2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tt.User"</span> scope=<span class="string">"request"</span>/&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">"user3"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tt.User"</span> scope=<span class="string">"session"</span>/&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">"user4"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tt.User"</span> scope=<span class="string">"applicatioin"</span>/&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;jsp:useBean&gt;</code>标签其实不一定会创建对象！！！其实它会先在指定范围中查找这个对象，如果对象不存在才会创建，我们需要重新对它进行翻译：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"user4"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tt.User"</span> scope=<span class="string">"applicatioin"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">tt.User user4 = (tt.User)application.getAttribute(<span class="string">"user4"</span>);</span><br><span class="line"><span class="keyword">if</span>(user4 == <span class="keyword">null</span>) &#123;</span><br><span class="line">user4 = <span class="keyword">new</span> tt.User();</span><br><span class="line">application.setAttribute(<span class="string">"user4"</span>, user4);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h5 id="lt-jsp-setProperty-gt-和-lt-jsp-getProperty-gt"><a href="#lt-jsp-setProperty-gt-和-lt-jsp-getProperty-gt" class="headerlink" title="&lt;jsp:setProperty&gt;和&lt;jsp:getProperty&gt;"></a><code>&lt;jsp:setProperty&gt;</code>和<code>&lt;jsp:getProperty&gt;</code></h5><p><code>&lt;jsp:setProperty&gt;</code>标签的作用是给JavaBean设置属性值，而<code>&lt;jsp:getProperty&gt;</code>是用来获取属性值。在使用它们之前需要先创建JavaBean：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"user1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tt.User"</span> /&gt;</span><br><span class="line">&lt;jsp:setProperty property=<span class="string">"username"</span> name=<span class="string">"user1"</span> value=<span class="string">"admin"</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty property=<span class="string">"password"</span> name=<span class="string">"user1"</span> value=<span class="string">"admin123"</span>/&gt;</span><br><span class="line"></span><br><span class="line">用户名：&lt;jsp:getProperty property=<span class="string">"username"</span> name=<span class="string">"user1"</span>/&gt;&lt;br/&gt;</span><br><span class="line">密　码：&lt;jsp:getProperty property=<span class="string">"password"</span> name=<span class="string">"user1"</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h3 id="EL（表达式语言）"><a href="#EL（表达式语言）" class="headerlink" title="EL（表达式语言）"></a>EL（表达式语言）</h3><h4 id="EL概述"><a href="#EL概述" class="headerlink" title="EL概述"></a>EL概述</h4><h5 id="EL的作用"><a href="#EL的作用" class="headerlink" title="EL的作用"></a>EL的作用</h5><p>JSP2.0要把html和css分离、要把html和javascript分离、要把Java脚本替换成标签。标签的好处是非Java人员都可以使用。</p><p>JSP2.0 – 纯标签页面，即：不包含&lt;% … %&gt;、&lt;%! … %&gt;，以及&lt;%= … %&gt;</p><p>EL（Expression Language）是一门表达式语言，它对应&lt;%=…%&gt;。我们知道在JSP中，表达式会被输出，所以EL表达式也会被输出。</p><h5 id="EL的格式"><a href="#EL的格式" class="headerlink" title="EL的格式"></a>EL的格式</h5><p>格式：${…}</p><p>例如：${1 + 2}</p><h5 id="关闭EL"><a href="#关闭EL" class="headerlink" title="关闭EL"></a>关闭EL</h5><p>如果希望整个JSP忽略EL表达式，需要在page指令中指定isELIgnored=”true”。</p><p>如果希望忽略某个EL表达式，可以在EL表达式之前添加”&quot;，例如：<code>\${1 + 2}</code>。</p><h5 id="EL运算符"><a href="#EL运算符" class="headerlink" title="EL运算符"></a>EL运算符</h5><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">加</td><td align="center"><code>${17+5}</code></td><td align="center">22</td></tr><tr><td align="center"><code>-</code></td><td align="center">减</td><td align="center"><code>${17-5}</code></td><td align="center">12</td></tr><tr><td align="center"><code>*</code></td><td align="center">乘</td><td align="center"><code>${17*5}</code></td><td align="center">85</td></tr><tr><td align="center"><code>/</code>或div</td><td align="center">除</td><td align="center"><code>${17/5}或${17 div 5}</code></td><td align="center">3</td></tr><tr><td align="center"><code>%</code>或mod</td><td align="center">取余</td><td align="center"><code>${17%5}或${17 mod 5}</code></td><td align="center">2</td></tr><tr><td align="center"><code>==</code>或eq</td><td align="center">等于</td><td align="center"><code>${5==5}或${5 eq 5}</code></td><td align="center">true</td></tr><tr><td align="center"><code>!=</code>或ne</td><td align="center">不等于</td><td align="center"><code>${5!=5}或${5 ne 5}</code></td><td align="center">false</td></tr><tr><td align="center"><code>&lt;</code>或lt</td><td align="center">小于</td><td align="center"><code>${3&lt;5}或${3 lt 5}</code></td><td align="center">true</td></tr><tr><td align="center"><code>&gt;</code>或gt</td><td align="center">大于</td><td align="center"><code>${3&gt;5}或${3 gt 5}</code></td><td align="center">false</td></tr><tr><td align="center"><code>&lt;=</code>或le</td><td align="center">小于等于</td><td align="center"><code>${3&lt;=5}或${3 le 5}</code></td><td align="center">true</td></tr><tr><td align="center"><code>&gt;=</code>或ge</td><td align="center">大于等于</td><td align="center"><code>${3&gt;=5}或${3 ge 5}</code></td><td align="center">false</td></tr><tr><td align="center">&amp;&amp;或and</td><td align="center">并且</td><td align="center"><code>${true&amp;&amp;false}或${true and false}</code></td><td align="center">false</td></tr><tr><td align="center">!或not</td><td align="center">非</td><td align="center"><code>${!true}或${not true}</code></td><td align="center">false</td></tr><tr><td align="center">||或or</td><td align="center">或者</td><td align="center">`  ${true</td><td align="center"></td></tr><tr><td align="center">empty</td><td align="center">是否为空</td><td align="center"><code>${empty &quot;&quot;}</code>，可以判断字符串、数据、集合的长度是否为0，为0返回true。empty还可以与not或!一起使用。<code>${not empty &quot;&quot;}</code></td><td align="center">true</td></tr></tbody></table><h5 id="EL不显示null"><a href="#EL不显示null" class="headerlink" title="EL不显示null"></a>EL不显示null</h5><p>当EL表达式的值为null时，会在页面上显示空白，即什么都不显示。</p><h4 id="EL表达式格式"><a href="#EL表达式格式" class="headerlink" title="EL表达式格式"></a>EL表达式格式</h4><p>先来了解一下EL表达式的格式！现在还不能演示它，因为需要学习了EL11个内置对象后才方便显示它。</p><ul><li><p>操作List和数组：<code>${list[0]}</code>、<code>${arr[0]}</code>；</p></li><li><p>操作bean的属性：<code>${person.name}</code>、<code>${person[&#39;name&#39;]}</code>，对应<code>person.getName()</code>方法；</p></li><li><p>操作Map的值：<code>${map.key}</code>、<code>${map[&#39;key&#39;]}</code>，对应<code>map.get(key)</code>。</p></li></ul><h4 id="EL内置对象"><a href="#EL内置对象" class="headerlink" title="EL内置对象"></a>EL内置对象</h4><p>EL一共11个内置对象，无需创建即可以使用。这11个内置对象中有10个是Map类型的，最后一个是pageContext对象。</p><ul><li><p>pageScope</p></li><li><p>requestScope</p></li><li><p>sessionScope</p></li><li><p>applicationScope</p></li><li><p>param；</p></li><li><p>paramValues；</p></li><li><p>header；</p></li><li><p>headerValues；</p></li><li><p>initParam；</p></li><li><p>cookie；</p></li><li><p>pageContext；</p></li></ul><h5 id="域相关内置对象（重点）"><a href="#域相关内置对象（重点）" class="headerlink" title="域相关内置对象（重点）"></a>域相关内置对象（重点）</h5><p>域内置对象一共有四个：</p><ul><li><p>pageScope：<code>${pageScope.name}</code>等同与<code>pageContext.getAttribute(&quot;name&quot;);</code></p></li><li><p>requestScope：<code>${requestScope.name}</code>等同与<code>request.getAttribute(&quot;name&quot;);</code></p></li><li><p>sessionScoep：<code>${sessionScope.name}</code>等同与<code>session.getAttribute(&quot;name&quot;);</code></p></li><li><p>applicationScope：<code>${applicationScope.name}</code>等同与<code>application.getAttribute(&quot;name&quot;);</code></p></li></ul><p>如果在域中保存的是JavaBean对象，那么可以使用EL来访问JavaBean属性。因为EL只做读取操作，所以JavaBean一定要提供get方法，而set方法没有要求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%pageContext.setAttribute(<span class="string">"p1"</span>, <span class="keyword">new</span> Person(<span class="string">"zhk"</span>, <span class="number">19</span>, <span class="string">"male"</span>));%&gt;</span><br><span class="line">$&#123;pageScope.p1.name&#125;&lt;br/&gt;</span><br><span class="line">$&#123;pageScope.p1.age&#125;&lt;br/&gt;</span><br><span class="line">$&#123;pageScope.p1.sex&#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/01/jDHpKeVcbIhOwRy.png" alt="2.png"></p><p>全域查找：${person}表示依次在pageScope、requesScopet、sessionScope、appliationScope四个域中查找名字为person的属性。</p><h5 id="请求参数相关内置对象"><a href="#请求参数相关内置对象" class="headerlink" title="请求参数相关内置对象"></a>请求参数相关内置对象</h5><p>param和paramValues这两个内置对象是用来获取请求参数的。</p><ul><li>param：Map&lt;String,String&gt;类型，param对象可以用来获取参数，与request.getParameter()方法相同。</li></ul><p><img src="https://i.loli.net/2020/07/01/DP9KeVXEvQUcJ7M.png" alt="2.png"></p><p>注意，在使用EL获取参数时，如果参数不存在，返回的是空字符串，而不是null。这一点与使用request.getParameter()方法是不同的。</p><ul><li>paramValues：paramValues是Map&lt;String, String[]&gt;类型，当一个参数名，对应多个参数值时可以使用它。</li></ul><h5 id="请求头相关内置对象"><a href="#请求头相关内置对象" class="headerlink" title="请求头相关内置对象"></a>请求头相关内置对象</h5><p>header和headerValues是与请求头相关的内置对象：</p><ul><li><p>header： Map&lt;String,String&gt;类型，用来获取请求头。</p></li><li><p>headerValues：headerValues是Map&lt;String,String[]&gt;类型。当一个请求头名称，对应多个值时，使用该对象，这里就不在赘述。</p></li></ul><h5 id="应用初始化参数相关内置对象"><a href="#应用初始化参数相关内置对象" class="headerlink" title="应用初始化参数相关内置对象"></a>应用初始化参数相关内置对象</h5><ul><li>initParam：initParam是Map&lt;String,String&gt;类型。它对应web.xml文件中的<code>&lt;context-param&gt;</code>参数。</li></ul><p><img src="https://i.loli.net/2020/07/01/HLTiF51eXWyPnrl.png" alt="2.png"></p><h5 id="Cookie相关内置对象"><a href="#Cookie相关内置对象" class="headerlink" title="Cookie相关内置对象"></a>Cookie相关内置对象</h5><ul><li>cookie：cookie是Map&lt;String,Cookie&gt;类型，其中key是Cookie的名字，而值是Cookie对象本身。</li></ul><p><img src="https://i.loli.net/2020/07/01/jNO1Iy69mvubBMT.png" alt="2.png"></p><h5 id="pageContext对象-1"><a href="#pageContext对象-1" class="headerlink" title="pageContext对象"></a>pageContext对象</h5><p>pageContext：pageContext是PageContext类型！可以使用pageContext对象调用getXXX()方法，例如pageContext.getRequest()，可以${pageContext.request}。也就是读取JavaBean属性！！！</p><table><thead><tr><th align="left">EL表达式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">${pageContext.request.queryString}</td><td align="left">pageContext.getRequest().getQueryString();</td></tr><tr><td align="left">${pageContext.request.requestURL}</td><td align="left">pageContext.getRequest().getRequestURL();</td></tr><tr><td align="left">${pageContext.request.contextPath}</td><td align="left">pageContext.getRequest().getContextPath();</td></tr><tr><td align="left">${pageContext.request.method}</td><td align="left">pageContext.getRequest().getMethod();</td></tr><tr><td align="left">${pageContext.request.protocol}</td><td align="left">pageContext.getRequest().getProtocol();</td></tr><tr><td align="left">${pageContext.request.remoteUser}</td><td align="left">pageContext.getRequest().getRemoteUser();</td></tr><tr><td align="left">${pageContext.request.remoteAddr}</td><td align="left">pageContext.getRequest().getRemoteAddr();</td></tr><tr><td align="left">${pageContext.session.new}</td><td align="left">pageContext.getSession().isNew();</td></tr><tr><td align="left">${pageContext.session.id}</td><td align="left">pageContext.getSession().getId();</td></tr><tr><td align="left">${pageContext.servletContext.serverInfo}</td><td align="left">pageContext.getServletContext().getServerInfo();</td></tr></tbody></table><h3 id="EL函数库"><a href="#EL函数库" class="headerlink" title="EL函数库"></a>EL函数库</h3><h4 id="什么EL函数库"><a href="#什么EL函数库" class="headerlink" title="什么EL函数库"></a>什么EL函数库</h4><p>EL函数库是由第三方对EL的扩展，我们现在学习的EL函数库是由JSTL添加的。JSTL明天再学！</p><p>EL函数库就是定义一些有返回值的静态方法。然后通过EL语言来调用它们！当然，不只是JSTL可以定义EL函数库，我们也可以自定义EL函数库。</p><p>EL函数库中包含了很多对字符串的操作方法，以及对集合对象的操作。例如：<code>${fn:length(“abc”)}</code>会输出3，即字符串的长度。</p><h4 id="导入函数库"><a href="#导入函数库" class="headerlink" title="导入函数库"></a>导入函数库</h4><p>因为是第三方的东西，所以需要导入。导入需要使用taglib指令！</p><p><code>&lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;</code></p><h4 id="EL函数库介绍"><a href="#EL函数库介绍" class="headerlink" title="EL函数库介绍"></a>EL函数库介绍</h4><ul><li>String toUpperCase(String input)：</li><li>String toLowerCase(String input)：</li><li>int indexOf(String input, String substring)：</li><li>boolean contains(String input, String substring)：</li><li>boolean containsIgnoreCase(String input, String substring)：</li><li>boolean startsWith(String input, String substring)：</li><li>boolean endsWith(String input, String substring)：</li><li>String substring(String input, int beginIndex, int endIndex)：</li><li>String substringAfter(String input, String substring)：</li><li>substringBefore(String input, String substring)：</li><li>String escapeXml(String input)：</li><li>String trim(String input)：</li><li>String replace(String input, String substringBefore, String substringAfter)：</li><li>String[] split(String input, String delimiters)：</li><li>int length(Object obj)：</li><li>String join(String array[], String separator)：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"fn"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</span><br><span class="line">…</span><br><span class="line">String[] strs = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">pageContext.setAttribute(<span class="string">"arr"</span>, strs);</span><br><span class="line">pageContext.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;fn:length(arr) &#125;&lt;br/&gt;&lt;!--<span class="number">3</span>--&gt;</span><br><span class="line">$&#123;fn:length(list) &#125;&lt;br/&gt;&lt;!--<span class="number">1</span>--&gt;</span><br><span class="line">$&#123;fn:toLowerCase(<span class="string">"Hello"</span>) &#125;&lt;br/&gt; &lt;!-- hello --&gt;</span><br><span class="line">$&#123;fn:toUpperCase(<span class="string">"Hello"</span>) &#125;&lt;br/&gt; &lt;!-- HELLO --&gt;</span><br><span class="line">$&#123;fn:contains(<span class="string">"abc"</span>, <span class="string">"a"</span>)&#125;&lt;br/&gt;&lt;!-- <span class="keyword">true</span> --&gt;</span><br><span class="line">$&#123;fn:containsIgnoreCase(<span class="string">"abc"</span>, <span class="string">"Ab"</span>)&#125;&lt;br/&gt;&lt;!-- <span class="keyword">true</span> --&gt;</span><br><span class="line">$&#123;fn:contains(arr, <span class="string">"a"</span>)&#125;&lt;br/&gt;&lt;!-- <span class="keyword">true</span> --&gt;</span><br><span class="line">$&#123;fn:containsIgnoreCase(list, <span class="string">"A"</span>)&#125;&lt;br/&gt;&lt;!-- <span class="keyword">true</span> --&gt;</span><br><span class="line">$&#123;fn:endsWith(<span class="string">"Hello.java"</span>, <span class="string">".java"</span>)&#125;&lt;br/&gt;&lt;!-- <span class="keyword">true</span> --&gt;</span><br><span class="line">$&#123;fn:startsWith(<span class="string">"Hello.java"</span>, <span class="string">"Hell"</span>)&#125;&lt;br/&gt;&lt;!-- <span class="keyword">true</span> --&gt;</span><br><span class="line">$&#123;fn:indexOf(<span class="string">"Hello-World"</span>, <span class="string">"-"</span>)&#125;&lt;br/&gt;&lt;!-- <span class="number">5</span> --&gt;</span><br><span class="line">$&#123;fn:join(arr, <span class="string">";"</span>)&#125;&lt;br/&gt;&lt;!-- a;b;c --&gt;</span><br><span class="line">$&#123;fn:replace(<span class="string">"Hello-World"</span>, <span class="string">"-"</span>, <span class="string">"+"</span>)&#125;&lt;br/&gt;&lt;!-- Hello+World --&gt;</span><br><span class="line">$&#123;fn:join(fn:split(<span class="string">"a;b;c;"</span>, <span class="string">";"</span>), <span class="string">"-"</span>)&#125;&lt;br/&gt;&lt;!-- a-b-c --&gt;</span><br><span class="line"></span><br><span class="line">$&#123;fn:substring(<span class="string">"0123456789"</span>, <span class="number">6</span>, <span class="number">9</span>)&#125;&lt;br/&gt;&lt;!-- <span class="number">678</span> --&gt;</span><br><span class="line">$&#123;fn:substring(<span class="string">"0123456789"</span>, <span class="number">5</span>, -<span class="number">1</span>)&#125;&lt;br/&gt;&lt;!-- <span class="number">56789</span> --&gt;</span><br><span class="line">$&#123;fn:substringAfter(<span class="string">"Hello-World"</span>, <span class="string">"-"</span>)&#125;&lt;br/&gt;&lt;!-- World --&gt;</span><br><span class="line">$&#123;fn:substringBefore(<span class="string">"Hello-World"</span>, <span class="string">"-"</span>)&#125;&lt;br/&gt;&lt;!-- Hello --&gt;</span><br><span class="line">$&#123;fn:trim(<span class="string">"     a b c     "</span>)&#125;&lt;br/&gt;&lt;!-- a b c --&gt;</span><br><span class="line">$&#123;fn:escapeXml("&lt;html&gt;&lt;/html&gt;")&#125;&lt;br/&gt; &lt;!-- &lt;html&gt;&lt;/html&gt; --&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义EL函数库"><a href="#自定义EL函数库" class="headerlink" title="自定义EL函数库"></a>自定义EL函数库</h4><ul><li><p>写一个类，写一个有返回值的静态方法；</p></li><li><p>编写itcast.tld文件，可以参数fn.tld文件来写，把itcast.tld文件放到/WEB-INF目录下；</p></li><li><p>在页面中添加taglib指令，导入自定义标签库。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ItcastFuncations.java</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.el.funcations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItcastFuncations</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"自定义EL函数库测试"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>itcast.tld（放到classes下）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short-name</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uri</span>&gt;</span>http://www.itcast.cn/jsp/functions<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function-class</span>&gt;</span>cn.itcast.el.funcations.ItcastFuncations<span class="tag">&lt;/<span class="name">function-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function-signature</span>&gt;</span>String test()<span class="tag">&lt;/<span class="name">function-signature</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"itcast"</span> uri=<span class="string">"/WEB-INF/itcast.tld"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt; </span><br><span class="line">  &lt;h1&gt;$&#123;itcast:test() &#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="Day-08"><a href="#Day-08" class="headerlink" title="Day 08"></a>Day 08</h2><p><em>02/07/2020</em></p><h3 id="JSTL-标签库"><a href="#JSTL-标签库" class="headerlink" title="JSTL 标签库"></a>JSTL 标签库</h3><h4 id="什么是JSTL"><a href="#什么是JSTL" class="headerlink" title="什么是JSTL"></a>什么是JSTL</h4><p>JSTL是apache对EL表达式的扩展（也就是说JSTL依赖EL），JSTL是标签语言！JSTL标签使用以来非常方便，它与JSP动作标签一定，只不过它不是JSP内置的标签，需要我们自己导包，以及指定标签库而已！</p><p>如果你使用MyEclipse开发JavaWeb，那么在把项目发布到Tomcat时，你会发现，MyEclipse会在lib目录下存放jstl的Jar包！如果你没有使用MyEclipse开发那么需要自己来导入这个JSTL的Jar包：jstl-1.2.jar。</p><h4 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h4><p>JSTL一共包含四大标签库：</p><ul><li><p>core：核心标签库，我们学习的重点；</p></li><li><p>fmt：格式化标签库，只需要学习两个标签即可；</p></li><li><p>sql：数据库标签库，不需要学习了，它过时了；</p></li><li><p>xml：xml标签库，不需要学习了，它过时了。</p></li></ul><h4 id="使用taglib指令导入标签库"><a href="#使用taglib指令导入标签库" class="headerlink" title="使用taglib指令导入标签库"></a>使用taglib指令导入标签库</h4><p>除了JSP动作标签外，使用其他第三方的标签库都需要：</p><ul><li><p>导包；</p></li><li><p>在使用标签的JSP页面中使用taglib指令导入标签库；</p></li></ul><p>下面是导入JSTL的core标签库：</p><p><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code> <strong>这里的/jsp需要注意*</strong></p><ul><li><p><code>prefix=&quot;c&quot;</code>：指定标签库的前缀，这个前缀可以随便给值，但大家都会在使用core标签库时指定前缀为c；</p></li><li><p><code>uri=&quot;http://java.sun.com/jstl/core&quot;</code>：指定标签库的uri，它不一定是真实存在的网址，但它可以让JSP找到标签库的描述文件；</p></li></ul><h4 id="core标签库常用标签"><a href="#core标签库常用标签" class="headerlink" title="core标签库常用标签"></a>core标签库常用标签</h4><h5 id="out和set"><a href="#out和set" class="headerlink" title="out和set"></a>out和set</h5><p>out</p><table><thead><tr><th><code>&lt;c:out value=”aaa”/&gt;</code></th><th>输出aaa字符串常量</th></tr></thead><tbody><tr><td><code>&lt;c:out value=”${aaa}”/&gt;</code></td><td>与${aaa}相同</td></tr><tr><td><code>&lt;c:out value=”${aaa}” default=”xxx”/&gt;</code></td><td>当${aaa}不存在时，输出xxx字符串</td></tr><tr><td><code>&lt;%</code><br><code>request.setAttribute(&quot;a&quot;,&quot;&lt;script&gt;alert(&#39;hello&#39;);&lt;/script&gt;&quot;);</code><br><code>%&gt;</code> <br><code>&lt;c:out value=&quot;${a }&quot;  default=&quot;xxx&quot; escapeXml=&quot;false&quot; /&gt;</code></td><td>当escapeXml为false，不会转换“&lt;”、“&gt;”。这可能会受到JavaScript攻击。</td></tr></tbody></table><p>set</p><table><thead><tr><th><code>&lt;c:set var=”a” value=”hello”/&gt;</code></th><th>在pageContext中添加name为a，value为hello的数据。</th></tr></thead><tbody><tr><td><code>&lt;c:set var=”a” value=”hello” scope=”session”/&gt;</code></td><td>在session中添加name为a，value为hello的数据。</td></tr></tbody></table><h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5><table><thead><tr><th><code>&lt;%</code><br><code>pageContext.setAttribute(&quot;a&quot;,  &quot;pageContext&quot;);</code><br><code>request.setAttribute(&quot;a&quot;,  &quot;session&quot;);</code><br><code>session.setAttribute(&quot;a&quot;,  &quot;session&quot;);</code><br><code>application.setAttribute(&quot;a&quot;,  &quot;application&quot;);</code><br><code>%&gt;</code><br><code>&lt;c:remove  var=&quot;a&quot;/&gt;</code><br><code>&lt;c:out  value=&quot;${a }&quot; default=&quot;none&quot;/&gt;</code></th><th>删除所有域中name为a的数据！</th></tr></thead><tbody><tr><td><code>&lt;c:remove var=&quot;a&quot; scope=”page”/&gt;</code></td><td>删除pageContext中name为a的数据！</td></tr></tbody></table><h5 id="url"><a href="#url" class="headerlink" title="url"></a>url</h5><p>url标签会在需要URL重写时添加sessionId。</p><table><thead><tr><th><code>&lt;c:url value=&quot;/&quot;/&gt;</code></th><th>输出上下文路径：/day08_01/</th></tr></thead><tbody><tr><td><code>&lt;c:url value=&quot;/&quot;  var=&quot;a&quot; scope=&quot;request&quot;/&gt;</code></td><td>把本该输出的结果赋给变量a。范围为request</td></tr><tr><td><code>&lt;c:url value=&quot;/AServlet&quot;/&gt;</code></td><td>输出：/day08_01/AServlet</td></tr><tr><td><code>&lt;c:url value=&quot;/AServlet&quot;&gt;</code><br>  <code>&lt;c:param name=&quot;username&quot;  value=&quot;abc&quot;/&gt;</code><br>  <code>&lt;c:param name=&quot;password&quot;  value=&quot;123&quot;/&gt;</code><br>  <code>&lt;/c:url&gt;</code></td><td>输出：/day08_01/AServlet?username=abc&amp;password=123  如果参数中包含中文，那么会自动使用URL编码！</td></tr></tbody></table><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><p>if标签的test属性必须是一个boolean类型的值，如果test的值为true，那么执行if标签的内容，否则不执行。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"a"</span> value=<span class="string">"hello"</span>/&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;not empty a &#125;"</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;a &#125;"</span>/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><h5 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h5><p>choose标签对应Java中的if/else if/else结构。when标签的test为true时，会执行这个when的内容。当所有when标签的test都为false时，才会执行otherwise标签的内容。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"score"</span> value=<span class="string">"$&#123;param.score &#125;"</span>/&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;c:when test="$&#123;score &gt; 100 || score &lt; 0&#125;"&gt;错误的分数：$&#123;score &#125;&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test="$&#123;score &gt;= 90 &#125;"&gt;A级&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test="$&#123;score &gt;= 80 &#125;"&gt;B级&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test="$&#123;score &gt;= 70 &#125;"&gt;C级&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test="$&#123;score &gt;= 60 &#125;"&gt;D级&lt;/c:when&gt;</span><br><span class="line">&lt;c:otherwise&gt;E级&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><p>forEach当前就是循环标签了，forEach标签有多种两种使用方式：</p><ul><li><p>使用循环变量，指定开始和结束值，类似for(int i = 1; i &lt;= 10; i++) {}；</p></li><li><p>循环遍历集合，类似for(Object o : 集合)；</p></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"sum"</span> value=<span class="string">"0"</span> /&gt; </span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"i"</span> begin=<span class="string">"1"</span> end=<span class="string">"10"</span> step=<span class="string">"2"</span>&gt; &lt;%--这里默认步长为<span class="number">1</span> 可设置为<span class="number">2</span>--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"sum"</span> value=<span class="string">"$&#123;sum + i&#125;"</span> /&gt; </span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"sum = $&#123;sum &#125;"</span>/&gt;</span><br></pre></td></tr></table></figure><p>遍历集合和数组</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">String[] names = &#123;<span class="string">"zhangSan"</span>, <span class="string">"liSi"</span>, <span class="string">"wangWu"</span>, <span class="string">"zhaoLiu"</span>&#125;;</span><br><span class="line">pageContext.setAttribute(<span class="string">"ns"</span>, names);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"item"</span> items=<span class="string">"$&#123;ns &#125;"</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"name: $&#123;item &#125;"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>遍历list</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">names.add(<span class="string">"zhangSan"</span>);</span><br><span class="line">names.add(<span class="string">"liSi"</span>);</span><br><span class="line">names.add(<span class="string">"wangWu"</span>);</span><br><span class="line">names.add(<span class="string">"zhaoLiu"</span>);</span><br><span class="line">pageContext.setAttribute(<span class="string">"ns"</span>, names);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"item"</span> items=<span class="string">"$&#123;ns &#125;"</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"name: $&#123;item &#125;"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>遍历map</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Map&lt;String,String&gt; stu = <span class="keyword">new</span> LinkedHashMap&lt;String,String&gt;();</span><br><span class="line">stu.put(<span class="string">"number"</span>, <span class="string">"N_1001"</span>);</span><br><span class="line">stu.put(<span class="string">"name"</span>, <span class="string">"zhangSan"</span>);</span><br><span class="line">stu.put(<span class="string">"age"</span>, <span class="string">"23"</span>);</span><br><span class="line">stu.put(<span class="string">"sex"</span>, <span class="string">"male"</span>);</span><br><span class="line">pageContext.setAttribute(<span class="string">"stu"</span>, stu);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"item"</span> items=<span class="string">"$&#123;stu &#125;"</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;item.key &#125;: $&#123;item.value &#125;"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>forEach标签还有一个属性：varStatus，这个属性用来指定接收“循环状态”的变量名，例如：<code>&lt;forEach varStatus=”vs” …/&gt;</code>，这时就可以使用vs这个变量来获取循环的状态了。</p><ul><li><p>count：int类型，当前以遍历元素的个数；</p></li><li><p>index：int类型，当前元素的下标；</p></li><li><p>first：boolean类型，是否为第一个元素；</p></li><li><p>last：boolean类型，是否为最后一个元素；</p></li><li><p>current：Object类型，表示当前项目。</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"item"</span> items=<span class="string">"$&#123;ns &#125;"</span> varStatus=<span class="string">"vs"</span>&gt;</span><br><span class="line">&lt;c:if test="$&#123;vs.first &#125;"&gt;第一行：&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;vs.last &#125;"&gt;最后一行：&lt;/c:if&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"第$&#123;vs.count &#125;行: "</span>/&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"[$&#123;vs.index &#125;]: "</span>/&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"name: $&#123;vs.current &#125;"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h4 id="fmt标签库常用标签"><a href="#fmt标签库常用标签" class="headerlink" title="fmt标签库常用标签"></a>fmt标签库常用标签</h4><p>fmt标签库是用来格式化输出的，通常需要格式化的有时间和数字。</p><p>格式化时间：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br><span class="line">......</span><br><span class="line">&lt;%</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">pageContext.setAttribute(<span class="string">"d"</span>, date);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;fmt:formatDate value=<span class="string">"$&#123;d &#125;"</span> pattern=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>/&gt;</span><br></pre></td></tr></table></figure><p>格式化数字：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">3.5</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = <span class="number">4.4</span>; </span><br><span class="line">pageContext.setAttribute(<span class="string">"d1"</span>, d1);</span><br><span class="line">pageContext.setAttribute(<span class="string">"d2"</span>, d2);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;fmt:formatNumber value=<span class="string">"$&#123;d1 &#125;"</span> pattern=<span class="string">"0.00"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;fmt:formatNumber value=<span class="string">"$&#123;d2 &#125;"</span> pattern=<span class="string">"#.##"</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h3><h4 id="自定义标签概述"><a href="#自定义标签概述" class="headerlink" title="自定义标签概述"></a>自定义标签概述</h4><h5 id="自定义标签的步骤"><a href="#自定义标签的步骤" class="headerlink" title="自定义标签的步骤"></a>自定义标签的步骤</h5><p>其实我们在JSP页面中使用标签就等于调用某个对象的某个方法一样，例如：&lt;c:if test=””&gt;，这就是在调用对象的方法一样。自定义标签其实就是自定义类一样！</p><ul><li><p>定义标签处理类：必须是Tag或SimpleTag的实现类；</p></li><li><p>编写标签库描述符文件（TLD）；</p></li></ul><p>SimpleTag接口是JSP2.0中新给出的接口，用来简化自定义标签，所以现在我们基本上都是使用SimpleTag。</p><p>Tag是老的，传统的自定义标签时使用的接口，现在不建议使用它了。</p><h5 id="SimpleTag接口介绍"><a href="#SimpleTag接口介绍" class="headerlink" title="SimpleTag接口介绍"></a>SimpleTag接口介绍</h5><p>SimpleTag接口内容如下：</p><ul><li><p>void doTag()：标签执行方法；</p></li><li><p>JspTag getParent()：获取父标签；</p></li><li><p>void setParent(JspTag parent)：设置父标签</p></li><li><p>void setJspContext(JspContext context)：设置PageContext</p></li><li><p>void setJspBody(JspFragment jspBody)：设置标签体对象；</p></li></ul><p>请记住，万物皆对象！在JSP页面中的标签也是对象！你可以通过查看JSP的“真身”清楚的知道，所有标签都会变成对象的方法调用。标签对应的类我们称之为“标签处理类”！</p><p>标签的生命周期：</p><ol><li><p>当容器（Tomcat）第一次执行到某个标签时，会创建标签处理类的实例；</p></li><li><p>然后调用setJspContext(JspContext)方法，把当前JSP页面的pageContext对象传递给这个方法；</p></li><li><p>如果当前标签有父标签，那么使用父标签的标签处理类对象调用setParent(JspTag)方法；</p></li><li><p>如果标签有标签体，那么把标签体转换成JspFragment对象，然后调用setJspBody()方法；</p></li><li><p>每次执行标签时，都调用doTag()方法，它是标签处理方法。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloTag.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">implements</span> <span class="title">SimpleTag</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> JspTag parent;</span><br><span class="line"><span class="keyword">private</span> PageContext pageContext;</span><br><span class="line"><span class="keyword">private</span> JspFragment jspBody;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line">pageContext.getOut().print(<span class="string">"Hello Tag!!!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(JspTag parent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> JspTag <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJspContext</span><span class="params">(JspContext pc)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pageContext = (PageContext) pc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJspBody</span><span class="params">(JspFragment jspBody)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jspBody = jspBody;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="标签库描述文件（TLD）"><a href="#标签库描述文件（TLD）" class="headerlink" title="标签库描述文件（TLD）"></a>标签库描述文件（TLD）</h5><p>标签库描述文件是用来描述当前标签库中的标签的！标签库描述文件的扩展名为tld，你可以把它放到WEB-INF下，这样就不会被客户端直接访问到了。</p><p>hello.tld</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">version</span>=<span class="string">"2.0"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xml</span>=<span class="string">"http://www.w3.org/XML/1998/namespace"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee </span></span></span><br><span class="line"><span class="tag"><span class="string">http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">short-name</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span> <span class="comment">&lt;!--简称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uri</span>&gt;</span>http://www.itcast.cn/tags<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span><span class="comment">&lt;!--一个tag代表一个标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>cn.itcast.tag.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用标签</h5><p>在页面中使用标签分为两步：</p><ul><li><p>使用taglib导入标签库；</p></li><li><p>使用标签；</p></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"it"</span> uri=<span class="string">"/WEB-INF/hello.tld"</span> %&gt;</span><br><span class="line">......</span><br><span class="line">&lt;it:hello/&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义标签进阶"><a href="#自定义标签进阶" class="headerlink" title="自定义标签进阶"></a>自定义标签进阶</h4><h5 id="继承SimpleTagSupport"><a href="#继承SimpleTagSupport" class="headerlink" title="继承SimpleTagSupport"></a>继承SimpleTagSupport</h5><p>继承SimpleTagSuppport要比实现SimpleTag接口方便太多了，现在你只需要重写doTag()方法，其他方法都已经被SimpleTagSuppport完成了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJspContext().getOut().write(<span class="string">"&lt;p&gt;Hello SimpleTag!&lt;/p&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="有标签体的标签"><a href="#有标签体的标签" class="headerlink" title="有标签体的标签"></a>有标签体的标签</h5><p>我们先来看看标签体内容的可选值：</p><p><code>&lt;body-content&gt;</code>元素的可选值有：</p><ul><li><p>empty：无标签体。</p></li><li><p>JSP：传统标签支持它，SimpleTag已经不再支持使用<code>&lt;body-content&gt;JSP&lt;/body-content&gt;</code>。标签体内容可以是任何东西：EL、JSTL、&lt;%=%&gt;、&lt;%%&gt;，以及html； </p></li><li><p>scriptless：标签体内容不能是Java脚本，但可以是EL、JSTL等。在SimpleTag中，如果需要有标签体，那么就使用该选项；</p></li><li><p>tagdependent：标签体内容不做运算，由标签处理类自行处理，无论标签体内容是EL、JSP、JSTL，都不会做运算。<strong>这个选项几乎没有人会使用！</strong></p></li></ul><p>自定义有标签体的标签需要：</p><ul><li><p>获取标签体对象：JspFragment jspBody = getJspBody();；</p></li><li><p>把标签体内容输出到页面：jspBody.invoke(null)；</p></li><li><p>tld中指定标签内容类型：scriptless。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line">PageContext pc = (PageContext) <span class="keyword">this</span>.getJspContext();</span><br><span class="line">HttpServletRequest req = (HttpServletRequest) pc.getRequest();</span><br><span class="line">String s = req.getParameter(<span class="string">"exec"</span>);</span><br><span class="line"><span class="keyword">if</span>(s != <span class="keyword">null</span> &amp;&amp; s.endsWith(<span class="string">"true"</span>)) &#123;</span><br><span class="line">JspFragment body = <span class="keyword">this</span>.getJspBody(); <span class="comment">// 获取标签体对象</span></span><br><span class="line">body.invoke(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>cn.itcast.tags.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;itcast:hello&gt;</span><br><span class="line">    &lt;h1&gt;哈哈哈~&lt;/h1&gt;</span><br><span class="line">&lt;/itcast:hello&gt;</span><br></pre></td></tr></table></figure><h5 id="不执行标签下面的页面内容"><a href="#不执行标签下面的页面内容" class="headerlink" title="不执行标签下面的页面内容"></a>不执行标签下面的页面内容</h5><p>如果希望在执行了自定义标签后，不再执行JSP页面下面的东西，那么就需要在doTag()方法中使用SkipPageException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkipTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJspContext().getOut().print(<span class="string">"&lt;h1&gt;只能看到我！&lt;/h1&gt;"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SkipPageException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>skip<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>cn.itcast.tags.SkipTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;itcast:skip/&gt;</span><br><span class="line">&lt;h1&gt;看不见我！&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h5 id="带有属性的标签"><a href="#带有属性的标签" class="headerlink" title="带有属性的标签"></a>带有属性的标签</h5><p>一般标签都会带有属性，例如<code>&lt;c:if test=””&gt;</code>，其中test就是一个boolean类型的属性。完成带有属性的标签需要：</p><ul><li><p>在处理类中给出JavaBean属性（提供get/set方法）；</p></li><li><p>在TLD中部属相关属性。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> test;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">(<span class="keyword">boolean</span> test)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.test = test;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(test) &#123;</span><br><span class="line"><span class="keyword">this</span>.getJspBody().invoke(<span class="keyword">null</span>); <span class="comment">// 执行标签内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>if<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>cn.itcast.tag.IfTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span><span class="comment">&lt;!--属性必须--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rtexprvalue</span>&gt;</span>true<span class="tag">&lt;/<span class="name">rtexprvalue</span>&gt;</span><span class="comment">&lt;!--可为EL或JSTL 否则只为常量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">pageContext.setAttribute(<span class="string">"one"</span>, <span class="keyword">true</span>);</span><br><span class="line">pageContext.setAttribute(<span class="string">"two"</span>, <span class="keyword">false</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;it:if test="$&#123;one &#125;"&gt;xixi&lt;/it:if&gt;</span><br><span class="line">&lt;it:if test="$&#123;two &#125;"&gt;haha&lt;/it:if&gt;</span><br><span class="line">&lt;it:if test="true"&gt;hehe&lt;/it:if&gt;</span><br></pre></td></tr></table></figure><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><h4 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h4><p><img src="https://i.loli.net/2020/07/02/tCNjacl82GwU5v6.png" alt="2.png"></p><p>MVC模式（Model-View-Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p><p>MVC模式最早为Trygve Reenskaug)提出，为施乐帕罗奥多研究中心（Xerox PARC）的Smalltalk语言发明的一种软件设计模式。</p><p>MVC可对程序的后期维护和扩展提供了方便，并且使程序某些部分的重用提供了方便。而且MVC也使程序简化，更加直观。</p><ul><li><p>控制器Controller：对请求进行处理，负责请求转发；</p></li><li><p>视图View：界面设计人员进行图形界面设计；</p></li><li><p>模型Model：程序编写程序应用的功能（实现算法等等）、数据库管理；</p></li></ul><p>注意，MVC不是Java的东西，几乎现在所有B/S结构的软件都采用了MVC设计模式。但是要注意，MVC在B/S结构软件并没有完全实现，例如在我们今后的B/S软件中并不会有事件驱动！</p><h4 id="JavaWeb与MVC"><a href="#JavaWeb与MVC" class="headerlink" title="JavaWeb与MVC"></a>JavaWeb与MVC</h4><p>JavaWeb的经历了JSP Model1、JSP Model1二代、JSP Model2三个时期。</p><h5 id="JSP-Model1第一代"><a href="#JSP-Model1第一代" class="headerlink" title="JSP Model1第一代"></a>JSP Model1第一代</h5><p>JSP Model1是JavaWeb早期的模型，它适合小型Web项目，开发成本低！Model1第一代时期，服务器端只有JSP页面，所有的操作都在JSP页面中，连访问数据库的API也在JSP页面中完成。也就是说，所有的东西都耦合在一起，对后期的维护和扩展极为不利。</p><h5 id="JSP-Model1第二代"><a href="#JSP-Model1第二代" class="headerlink" title="JSP Model1第二代"></a>JSP Model1第二代</h5><p>JSP Model1第二代有所改进，把业务逻辑的内容放到了JavaBean中，而JSP页面负责显示以及请求调度的工作。虽然第二代比第一代好了些，但还让JSP做了过多的工作，JSP中把视图工作和请求调度（控制器）的工作耦合在一起了。</p><h5 id="JSP-Model2"><a href="#JSP-Model2" class="headerlink" title="JSP Model2"></a>JSP Model2</h5><p>JSP Model2模式已经可以清晰的看到MVC完整的结构了。</p><ul><li><p>JSP：视图层，用来与用户打交道。负责接收用来的数据，以及显示数据给用户；</p></li><li><p>Servlet：控制层，负责找到合适的模型对象来处理业务逻辑，转发到合适的视图；</p></li><li><p>JavaBean：模型层，完成具体的业务工作，例如：开启、转账等。</p></li></ul><p><img src="https://i.loli.net/2020/07/02/rW3h8gzknvsJeU1.png" alt="2.png"></p><p>JSP Model2适合多人合作开发大型的Web项目，各司其职，互不干涉，有利于开发中的分工，有利于组件的重用。但是，Web项目的开发难度加大，同时对开发人员的技术要求也提高了。</p><h3 id="JavaWeb三层框架"><a href="#JavaWeb三层框架" class="headerlink" title="JavaWeb三层框架"></a>JavaWeb三层框架</h3><p>我们常说的三层框架是由JavaWeb提出的，也就是说这是JavaWeb独有的！</p><p>所谓三层是表述层（WEB层）、业务逻辑层（Business Logic），以及数据访问层（Data Access）。</p><ul><li><p>WEB（表述）层：包含JSP和Servlet等与WEB相关的内容；</p></li><li><p>业务逻辑层：业务层中不包含JavaWeb API，它只关心业务逻辑，它对应功能；</p></li><li><p>数据访问层：封装了对数据库的访问细节；</p></li></ul><p>注意，在业务层中不能出现JavaWeb API，例如request、response等。也就是说，业务层代码是可重用的，甚至可以应用到非Web环境中。业务层的每个方法可以理解成一个万能，例如转账业务方法。业务层依赖数据层，而Web层依赖业务层！</p><p><img src="https://i.loli.net/2020/07/02/47i2GSkRPLAW3YB.png" alt="2.png"></p><hr><h2 id="Day-09"><a href="#Day-09" class="headerlink" title="Day 09"></a>Day 09</h2><p><em>03/07/2020</em></p><h3 id="案例-用户注册登录"><a href="#案例-用户注册登录" class="headerlink" title="案例 用户注册登录"></a>案例 用户注册登录</h3><p>要求：3层框架，使用验证码</p><h4 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h4><ul><li><p>注册</p></li><li><p>登录</p></li></ul><h5 id="JSP页面"><a href="#JSP页面" class="headerlink" title="JSP页面"></a>JSP页面</h5><ul><li><p>regist.jsp</p><ul><li>注册表单：用户输入注册信息；</li><li>回显错误信息：当注册失败时，显示错误信息；</li></ul></li><li><p>login.jsp</p><ul><li>登录表单：用户输入登录信息；</li><li>回显错误信息：当登录失败时，显示错误信息；</li></ul></li><li><p>index.jsp</p><ul><li>用户已登录：显示当前用户名，以及“退出”链接；</li><li>用户未登录：显示“您还没有登录”；</li></ul></li></ul><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><p>User：</p><ul><li><p>String username；</p></li><li><p>String password；</p></li></ul><h5 id="Servlet-1"><a href="#Servlet-1" class="headerlink" title="Servlet"></a>Servlet</h5><ul><li><p>VerifyCodeServlet</p><ul><li>生成验证码；</li><li>在session中保存验证码文本；</li><li>把图片输出到页面</li></ul></li><li><p>RegistServlet</p><ul><li><p>获取用户名、密码，封装到User对象中；</p></li><li><p>获取验证码、获取确认密码；</p></li><li><p>校验用户名、密码、验证码不能为空，校验失败，向request中保存错误信息，转发回regist.jsp显示错误信息；</p></li><li><p>比较两次输入的错误是否一致，如果不一致，向request中保存错误信息，转发回regist.jsp显示错误信息；</p></li><li><p>获取session中的验证码，与表单输入的验证码比较，如果不一致，向request中保存错误信息，转发回regist.jsp显示错误信息；</p></li><li><p>使用UserService的regist()方法完成注册，如果注册失败，向request中保存错误信息，转发回regist.jsp显示错误信息，如果注册成功，转发到login.jsp页面，表示注册成功；</p></li></ul></li><li><p>LoginServlet</p><ul><li><p>获取用户名、密码、验证码；</p></li><li><p>校验用户名、密码、验证码是否为空，校验失败，向request中保存错误信息，转发回login.jsp显示错误信息；</p></li><li><p>获取session中的验证码，与表单中的验证码比较，如果不同，向request中保存错误信息，转发回login.jsp显示错误信息；</p></li><li><p>删除session中的验证码；</p></li><li><p>通过UserService的login()方法完成登录，如果抛出异常，获取异常信息，保存到request中，转发到login.jsp显示错误信息；</p></li><li><p>向session中保存当前用户对象；</p></li><li><p>转发到index.jsp页面，表示登录成功！</p></li></ul></li><li><p>QuitServlet</p><ul><li><p>获取session，销毁之；</p></li><li><p>重定向到index.jsp；</p></li></ul></li></ul><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><p>UserException：为UserService使用的异常类；</p><p>UserService：</p><ul><li><p>void regist(User user)：</p><ul><li><p>使用UserDao的findByUsername()方法查询名为user.getUsername()的用户，如果用户存在，说明用户名已经被注册，抛出异常；</p></li><li><p>使用UserDao的add(User)方法保存用户信息；</p></li></ul></li><li><p>User login(String username, String password)：</p><ul><li><p>使用UserDao的findByUsername()方法查询名为user.getUsername()的用户，如果用户不存在，说明用户名错误，抛出异常；</p></li><li><p>如果查询到了User，那么比较参数password与user.getPassword()是否相等，如果不等，说明密码错误，抛出异常；</p></li><li><p>如果一致，表示登录成功，返回User对象；</p></li></ul></li></ul><h5 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h5><p>UserDao：</p><ul><li><p>void add(User)：</p><ul><li><p>创建SAXReader对象，获取Document对象，再获取根元素；</p></li><li><p>给root元素添加子元素；</p></li><li><p>给子元素设置username属性，值为user.getUsername()；</p></li><li><p>给子元素设置password属性，值为user.getPassword()；</p></li><li><p>创建OutputFormat对象，指定缩进为“\t”，指定添加换行；</p></li><li><p>设置OutputFormat清空原有空白；</p></li><li><p>使用FileWrtier和OutputFormat创建XMLWriter对象；</p></li><li><p>使用XMLWriter对象的write()保存Document；</p></li><li><p>关闭XMLWriter对象；</p></li></ul></li><li><p>User findByUsername(String username)：</p><ul><li><p>创建SAXReader对象，获取Document对象；</p></li><li><p>使用Xpath（//user[username=’xxx’]）来查询元素；</p></li><li><p>如果元素没有查询到，返回null；</p></li><li><p>如果元素查询到了，那么创建User对象；</p></li><li><p>把元素的username属性赋给User的username属性；</p></li><li><p>把元素的password属性赋给User的password属性；</p></li><li><p>返回user对象；</p></li></ul></li></ul><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><ul><li><p>用户在浏览器地址栏中请求regist.jsp；</p></li><li><p>服务器发送html给浏览器；</p></li><li><p>浏览器收到html，开始解析，并显示；</p></li><li><p>解析到<code>&lt;img&gt;</code>时，请求VerifyCodeServlet；</p></li><li><p>VerifyCodeServlet生成验证码图片，保存验证码文本，把图片响应给浏览器；</p></li><li><p>浏览器显示在页面中显示图片。</p></li></ul><p><img src="https://i.loli.net/2020/07/03/YzSxaTW74DgGftM.png" alt="2.png"></p><p><img src="https://i.loli.net/2020/07/03/DTSVv3xPeZFXInH.png" alt="2.png"></p><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p>省略。。。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>login.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;p style="font-weight: 900; color: red;"&gt;$&#123;msg &#125;&lt;/p&gt;</span><br><span class="line">    &lt;form action=<span class="string">"&lt;c:url value='/LoginServlet'/&gt;"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"$&#123;user.username &#125;"</span> /&gt;&lt;br/&gt;</span><br><span class="line">        密　码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        验证码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"loginCode"</span> size=<span class="string">"2"</span>/&gt;</span><br><span class="line">        &lt;img id=<span class="string">"vCode"</span> src=<span class="string">"&lt;c:url value='/VerifyCodeServlet?name=loginCode'/&gt;"</span> border=<span class="string">"2"</span>/&gt;</span><br><span class="line">        &lt;a href="javascript:_change()" style="font-size: 12;"&gt;看不清，换一张&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-------------------------------------------&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function">function <span class="title">_change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = document.getElementById(<span class="string">"vCode"</span>);</span><br><span class="line">        img.src = <span class="string">"&lt;c:url value='/VerifyCodeServlet?name=loginCode&amp;'/&gt;"</span> + <span class="keyword">new</span> Date().getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>regist.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;注册&lt;/h1&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;p style="font-weight: 900; color: red;"&gt;$&#123;msg &#125;&lt;/p&gt;</span><br><span class="line">    &lt;form action=<span class="string">"&lt;c:url value='/RegistServlet'/&gt;"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"$&#123;user.username &#125;"</span> /&gt;&lt;br/&gt;</span><br><span class="line">        密　码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        确认密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"repassword"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        验证码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"registCode"</span> size=<span class="string">"2"</span>/&gt;</span><br><span class="line">        &lt;img id=<span class="string">"vCode"</span> src=<span class="string">"&lt;c:url value='/VerifyCodeServlet?name=registCode'/&gt;"</span> border=<span class="string">"2"</span>/&gt;</span><br><span class="line">        &lt;a href="javascript:_change()" style="font-size: 12;"&gt;看不清，换一张&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"注册"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!----------------------------------------------------------------------&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function">function <span class="title">_change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = document.getElementById(<span class="string">"vCode"</span>);</span><br><span class="line">        img.src = <span class="string">"&lt;c:url value='/VerifyCodeServlet?name=registCode&amp;'/&gt;"</span> + <span class="keyword">new</span> Date().getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;主页&lt;/h1&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;c:choose&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">"$&#123;empty sessionScope.user &#125;"</span>&gt;</span><br><span class="line">            您还没有登录</span><br><span class="line">        &lt;/c:when&gt;</span><br><span class="line">        &lt;c:otherwise&gt;</span><br><span class="line">            用户名：$&#123;sessionScope.user.username &#125;</span><br><span class="line">            &lt;a href="&lt;c:url value='/QuitServlet'/&gt;"&gt;退出&lt;/a&gt;</span><br><span class="line">        &lt;/c:otherwise&gt;</span><br><span class="line">    &lt;/c:choose&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VerifyCodeServlet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerifyCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        VerifyCode vc = <span class="keyword">new</span> VerifyCode();<span class="comment">//创建验证码类</span></span><br><span class="line">        BufferedImage image  = vc.getImage();<span class="comment">//创建验证码图片</span></span><br><span class="line">        request.getSession().setAttribute(name, vc.getText());<span class="comment">//获取验证码文本</span></span><br><span class="line">        System.out.println(vc.getText());</span><br><span class="line">        VerifyCode.output(image, response.getOutputStream());<span class="comment">//输出图片到页面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RegistServlet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanUtils.populate(user, request.getParameterMap());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">String loginCode = request.getParameter(<span class="string">"registCode"</span>);</span><br><span class="line">String repassword = request.getParameter(<span class="string">"repassword"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(user.getUsername() == <span class="keyword">null</span> || user.getUsername().trim().isEmpty()) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"用户名不能为空!"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/regist.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(user.getPassword() == <span class="keyword">null</span> || user.getPassword().trim().isEmpty()) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"密码不能为空!"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/regist.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!user.getPassword().equals(repassword)) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"两次输入不一致！"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/regist.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(loginCode == <span class="keyword">null</span> || loginCode.trim().isEmpty()) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"验证码不能为空！"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/regist.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String vCode = (String)request.getSession().getAttribute(<span class="string">"registCode"</span>);</span><br><span class="line">request.getSession().removeAttribute(<span class="string">"registCode"</span>);</span><br><span class="line"><span class="keyword">if</span>(!vCode.equalsIgnoreCase(loginCode)) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"验证码错误！"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/regist.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">userService.regist(user);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UserException e) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, e.getMessage());</span><br><span class="line">request.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/regist.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LoginServlet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">String loginCode = request.getParameter(<span class="string">"loginCode"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(username == <span class="keyword">null</span> || username.trim().isEmpty()) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"用户名不能为空!"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(password == <span class="keyword">null</span> || password.trim().isEmpty()) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"密码不能为空!"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(loginCode == <span class="keyword">null</span> || loginCode.trim().isEmpty()) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"验证码不能为空！"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String vCode = (String)request.getSession().getAttribute(<span class="string">"loginCode"</span>);</span><br><span class="line">request.getSession().removeAttribute(<span class="string">"loginCode"</span>);</span><br><span class="line"><span class="keyword">if</span>(!vCode.equalsIgnoreCase(loginCode)) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"验证码错误！"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line">User user;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">user = userService.login(username, password);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UserException e) &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, e.getMessage());</span><br><span class="line">request.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request.getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/index.jsp"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QuitServlet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuitServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 使session失效</span></span><br><span class="line">request.getSession().invalidate();</span><br><span class="line">response.sendRedirect(request.getContextPath() + <span class="string">"/index.jsp"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserException.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserException</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message, cause);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(cause);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> UserException </span>&#123;</span><br><span class="line">User user = userDao.findByUsername(username);</span><br><span class="line"><span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UserException(<span class="string">"用户名错误！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!user.getPassword().equals(password)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UserException(<span class="string">"密码错误！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(User user)</span> <span class="keyword">throws</span> UserException </span>&#123;</span><br><span class="line">User _user = userDao.findByUsername(user.getUsername());</span><br><span class="line"><span class="keyword">if</span>(_user != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UserException(<span class="string">"用户名已注册！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">userDao.add(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserDao.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">path = <span class="keyword">this</span>.getClass().getResource(<span class="string">"/users.xml"</span>).getPath();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">Document doc = reader.read(path);</span><br><span class="line"></span><br><span class="line">Element root = doc.getRootElement();</span><br><span class="line">Element userEle = root.addElement(<span class="string">"user"</span>);</span><br><span class="line">userEle.addAttribute(<span class="string">"username"</span>, user.getUsername());</span><br><span class="line">userEle.addAttribute(<span class="string">"password"</span>, user.getPassword());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建格式化器，使用\t缩进，添加换行</span></span><br><span class="line">OutputFormat format = <span class="keyword">new</span> OutputFormat(<span class="string">"\t"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 清空数据中原有的换行</span></span><br><span class="line">format.setTrimText(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 创建XML输出流对象</span></span><br><span class="line">XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileWriter(path), format);</span><br><span class="line"><span class="comment">// 输出Document</span></span><br><span class="line">writer.write(doc);</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">writer.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">Document doc = reader.read(path);</span><br><span class="line">Element ele = (Element) doc.selectSingleNode(<span class="string">"//user[@username='"</span> + username + <span class="string">"']"</span>);</span><br><span class="line"><span class="keyword">if</span>(ele == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(ele.attributeValue(<span class="string">"username"</span>));</span><br><span class="line">user.setPassword(ele.attributeValue(<span class="string">"password"</span>));</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>在这里呢小结一下，对于之前这么多天的学习，对JavaWeb有了一个初步的了解，例如Servlet、Tomcat、jsp、xml等相关都有了一定的认识，但是还不够深入，对于某些基础的东西还不够了解，所以在这里这个部分的学习就先告一段落了，之后的学习则是从b站上进行更基础更细节的学习了，整理的东西也不会太多了。在那上面学习完成之后，还会在这里继续之前没完成的数据库部分，因为本人已经在大学中学习了数据库这门课了，所以对于这部分之后的内容就先不做延申了，之后会来补上。</p><p>b站的学习相关博文则会在本博客新开一篇来更新。</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法记录</title>
      <link href="/2020/05/27/%C2%96%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/05/27/%C2%96%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><em>20/05/27</em></p><h2 id="LeetCode-974"><a href="#LeetCode-974" class="headerlink" title="LeetCode 974"></a>LeetCode 974</h2><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定一个整数数组 <code>A</code>，返回其中元素之和可被 <code>K</code> 整除的（连续、非空）子数组的数目。</p><h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><p>前缀和</p><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：A = [4,5,0,-2,-3,1], K = 5</span><br><span class="line">输出：7</span><br><span class="line">解释：</span><br><span class="line">有 7 个子数组满足其元素之和可被 K = 5 整除：</span><br><span class="line">[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]</span><br></pre></td></tr></table></figure><h5 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h5><ul><li><p>1 &lt;= A.length &lt;= 30000</p></li><li><p>-10000 &lt;= A[i] &lt;= 10000</p></li><li><p>2 &lt;= K &lt;= 10000</p></li></ul><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先肯定先暴力想一波，直接两层for循环，sum保存和，然后依次模K进行判断。但是时间复杂度肯定O(N^2)，看范围肯定是过不了了，然后再想想其他办法。分析题目，对于子数组求和的问题，肯定先前缀和一波，前缀和存在数组P[]中，注意P[0]=0初始化别忘了(后面会有坑)，即前0个元素和为0。然后再解析题目，要求元素之和能被K整除，即(P[j]-P[i])%K==0，到这里还是没有什么突破口，因为这样还是得遍历，时间复杂度肯定上去了。所以就很关键的数学定理出现了，<strong>同余定理</strong>。即保证P[i]%K==P[j]%K就肯定能保证(P[j]-P[i])%K==0了。接下来就是遍历了，计算每个P[i]%K的值，然后相同的值之间肯定存在子数组符合条件。如果存在多个相同的值，那就可以组合出很多情况，比如如果存在四个P[i]%K的值相同，那肯定就存在6种组合方式组成的子数组，这肯定不难相到排列组合问题。然后就针对这个进行下一步优化，因为要求相同的值的个数，所以可以用Map实现，遍历P数组，P[i]%K的值以及该值的出现次数存入Map中，然后最后遍历Map的value，进行相应的排列组合运算再相加就解决了。</p><p>需要注意的地方就是，如果我们最开始没有初始化的话，如果遇到P[i]%K==0的时候，该子数组肯定是满足的，不需要另一个P[j]与其配对，如果没有这个初始化的0，我们算法在统计的时候就会少，这个bug还很难找到。如果不太理解，可以看这个例子：[2,2,1] K=5，我们按照算法来，没有初始化，P数组就为[2,4,5]，然后依次%K，得到[2,4,0]，然后放入Map中，每个都是1，即最后得到结果为0，但实际上的结果应该是1，子数组[2,2,1]是满足的，所以这就是需要初始化的原因了。还有需要注意的地方就是P[i]是会出现负数的情况的，所以在%K的时候应该加上一部分值使其为正值再取模。</p><h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><p>可以用数组代替Map来提高效率降低空间利用率，即因为%K的结果就在0-K-1之间，则可以设定数组times[MAX]，初始化为0，MAX取K值，然后每次得到P[i]%K时，就times[P[i]%K]++即可，这样就免去了Map的复杂操作，但是空间复杂度就会高一些，后面的遍历也是一样的道理了。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraysDivByK</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30005</span>];</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        p[<span class="number">0</span>]=<span class="number">0</span>; <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">            sum+=A[i];</span><br><span class="line">            p[i+<span class="number">1</span>]=sum;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = (p[i]+<span class="number">15000</span>*K)%K;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp)) map.put(temp,map.get(temp)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> map.put(temp,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v:map.values())&#123;</span><br><span class="line">            sum+=v*(v-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-1"><a href="#LeetCode-1" class="headerlink" title="LeetCode 1"></a>LeetCode 1</h2><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>简单题，就不放代码了，就是依次存入hash表中，也就是存入Map中，value作为键，下标作为值，然后再进行遍历并判断即可。写到这里肯定会问如果有重复的value怎么办，如果重复，那肯定要么这个value的是target的1/2，要么不是组成target的一部分，因为题目保证只有一个解。所以我们考虑这个value的是target的1/2的情况，那hash表内就只存了一个value及其下标，但其实并不影响，因为当遍历到没有存进Map的那个value对应的nums[i]时，进行判断，如果成功就输出当前元素的下标和对应存进Map那个value的下标即可，也同样可以完成题目要求，并不影响。</p><h2 id="LeetCode-2"><a href="#LeetCode-2" class="headerlink" title="LeetCode 2"></a>LeetCode 2</h2><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><p>给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><p>首先，第一个思路肯定是每一位挨着挨着求和存数组，然后再把数组每一个元素乘以10相应的幂再相加，就得到了最终需要的数字sum，再把这个数每一位放在另一个链表上，就ok了。这样肯定能做，但需要注意的是sum的范围，可能是很大很大的，所以这里是第一个可以进行改进的地方，我们可以不对其求和，每次得到两个链表某一位上相加得到的数后，直接对其进行处理，即放在链表上。比如num[cnt]+=l1.val+l2.val，然后判断num[cnt]是否&gt;=10，如果&gt;=10，则num[cnt+1]=1；这也是为什么前面使用+=的原因了。这样得到num[cnt]后，再通过new ListNode(num[cnt]%10)来构建当前数的链表。细心的朋友应该发现了，其实根本不必使用num数组，直接用num就可以了，只需要添加一句else num=0，这样就形成了第二个优化。</p><p>需要注意的地方就是，l1和l2可能不一样长，所以需要补0.还有就是特殊情况的处理，可能l1和l2的最后一位进位了，同时又退出了循环，所以需要判断一下。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode temp = l3;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>||l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1==<span class="keyword">null</span>) l1=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(l2==<span class="keyword">null</span>) l2=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            num+=(l1.val+l2.val);</span><br><span class="line">            temp.next = <span class="keyword">new</span> ListNode(num%<span class="number">10</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            <span class="keyword">if</span>(num&gt;=<span class="number">10</span>) num=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> num=<span class="number">0</span>; </span><br><span class="line">            l1=l1.next;</span><br><span class="line">            l2=l2.next;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>) temp.next=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> l3.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>20/05/30</em></p><h2 id="LeetCode-84"><a href="#LeetCode-84" class="headerlink" title="LeetCode 84"></a>LeetCode 84</h2><h5 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><h5 id="类别-1"><a href="#类别-1" class="headerlink" title="类别"></a>类别</h5><p>单调栈</p><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,1,5,6,2,3]</span><br><span class="line">输出: 10</span><br></pre></td></tr></table></figure><h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5><p>首先可以想到暴力算法，即固定每个柱子高度，然后枚举矩形的宽度。这样时间复杂度就O(N^2)，肯定不是我们所希望的。然后我们考虑优化，因为要找最大的面积，而且柱子的高度是有高有低的，我们可以想到单调栈来完成，如果对单调栈没什么了解的，可以看看这道题后面的一个小题，帮助理解单调栈的用法和好处。然后言归正传，我们就考虑维护一个单调栈，如果遇到比当前栈顶的柱子更高的柱子，就将该柱子入栈，如果遇到了比当前栈顶矮的柱子，那就出栈，直到遇到比当前柱子矮的栈顶，然后再将该柱子入栈，同时在其他柱子出栈的时候需要注意更新相应的最大矩形面积，这里是比较难理解的。比如，当前柱子比栈顶矮，然后需要出栈，然后因为出栈的这个柱子是栈中柱子最高的，所以以这个柱子为顶的矩形面积可以求出，并比较更新相应的最大矩形面积。用一句能够帮助理解的话就是<strong>每个柱子出栈的时候，我们都已经计算了以它为顶的矩形的面积的最大值，并对最后结果进行了更新</strong>，即不会导致出栈后得到的面积不是最大面积。可以通过看代码来帮助理解。</p><p>需要注意的地方是，我们在具体实现的时候，需要在高度数组最后插入一个高度为0或者-1的元素，保证栈中所有元素都能出栈。还有我们栈中保存的实质是柱子对应的下标。然后因为需要对给的高度数组进行操作，我们采用c++来描述。</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; <span class="built_in">height</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">height</span>.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; index;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">height</span>.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(index.<span class="built_in">size</span>() &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">height</span>[index.back()] &gt;= <span class="built_in">height</span>[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> h = <span class="built_in">height</span>[index.back()];</span><br><span class="line">                index.pop_back();</span><br><span class="line">                <span class="keyword">int</span> sidx = index.<span class="built_in">size</span>() &gt; <span class="number">0</span> ? index.back() : <span class="number">-1</span>;</span><br><span class="line">                ret = <span class="built_in">max</span>(ret, h * (i-sidx<span class="number">-1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            index.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>帮助理解单调栈，[click here][<a href="https://zhuanlan.zhihu.com/p/26465701]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26465701]</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习</title>
      <link href="/2020/05/04/python%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/04/python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h1><p><em>学习自廖雪峰的博客网站python篇</em></p><h3 id="Pycharm内容"><a href="#Pycharm内容" class="headerlink" title="Pycharm内容"></a>Pycharm内容</h3><p><code>ctrl+d</code>复制当前行，<code>ctrl+y</code>删除当前行，<code>shift+enter</code>换行(当前行任意位置均可换行)，<code>ctrl+/</code>批量注释或批量取消注释，<code>Tab</code>键和<code>shift+Tab</code>键完成批量缩进和取消缩进，<code>ctrl+f</code>查找，<code>ctrl+r</code>替换，<code>ctrl+&#39;+&#39;/&#39;-&#39;</code>折叠或者展开代码或<code>ctrl+shift+&#39;+&#39;/&#39;-&#39;</code>全部折叠或展开代码。设置-&gt;KeyMap设置快捷键。#TODO 记录要做的事情。</p><h3 id="小Tips"><a href="#小Tips" class="headerlink" title="小Tips"></a>小Tips</h3><p>转义字符——除了用<code>\</code>外，还可以用<code>r&#39; &#39;</code>代表单引号内的内容不转义，特殊的<code>%%</code>表示<code>%</code>。<br>多行写代码——用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行字符，并且还能在前面加上<code>r</code>一起使用表示内部内容不转义。<br>python除法——<code>/</code>默认是结果为浮点数，而<code>//</code>则默认会去掉小数部分保留整数。<br>字符编码——ASCII码(单字节)-&gt;Unicode码(通常双字节)-&gt;utf-8编码(可变长编码)，计算机中编码：内存统一使用Unicode编码，需要保存到硬盘或者需要传输时则转为utf-8，用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件，浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。<br>格式化输出——利用<code>%</code>来实现，和c语言类似。例如<code>print(&#39;hello %s %d&#39; % (&#39;world&#39;,4))</code>就会输出<code>hello world 4</code>如果只有一个格式化输出，则不用添加括号。在<code>%d</code>前面添加数字代表空格数或者<code>%f</code>前加<code>.</code>和数字控制小数位数，若不确定要格式化输出的内容可以用<code>%s</code>代替，会将所有内容转换为字符串输出。还有一种格式化方法是使用<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……，不过这种方式写起来比%要麻烦得多，如<code>&#39;Hello, {0}, 成绩提升了 {1:.1f}%&#39;.format(&#39;小明&#39;, 17.125)</code>，输出<code>Hello, 小明, 成绩提升了 17.1%</code>。<br>条件判断——可用<code>elif</code>表示<code>else if</code>，同时如果<code>if</code>后面只有一个变量就和C语言类似。<br>IO——<code>input()</code>的返回类型为<code>str</code>，可用<code>int()</code>转换为整数型，<code>float()</code>转换为浮点数类型。<br>不可变对象——对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p><p>全局变量——在函数中想要修改全局遍历，如果是可变类型，则可以直接进行修改，如果是不可变类型，则需要使用global声明才可修改。</p><h3 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h3><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>python3以unicode编码，即支持多种语言的字符串。<br>对于单个字符(英文或中文)，可用<code>ord()</code>和<code>chr()</code>函数分别读取字符的整数表示和把编码转换为字符。还可以用十六进制表示其他语言如：<code>&#39;\u4e2d\u6587&#39;</code>等价于<code>中文</code>。<br>对于<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示，如<code>x = b&#39;ABC&#39;</code>,<code>bytes</code>类型的数据每个字符占用一个字节。用unicode编码的字符串可以通过<code>encode()</code>函数编码为指定的<code>bytes</code>,内部参数为<code>ascii或者utf-8</code>等其他编码方式,反过来就是使用<code>decode()</code>函数，如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>。纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。<br>对于<code>str</code>字符串可用<code>len()</code>函数计算字符数，如果换为<code>bytes</code>类型，则计算字节数。为了避免乱码问题，我们应该坚持使用<code>utf-8</code>来对<code>str</code>和<code>bytes</code>进行转换。</p><h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p>Python内置的数据类型——列表list，用<code>[]</code>表示。有序的集合，<code>len()</code>获取长度，可用下标访问元素(从0开始的)，也可以使用<code>-1</code>作为下标来直接访问最后一个元素，以此类推用<code>-2</code>,<code>-3</code>等来获取倒数第几个元素。可使用<code>append()方法</code>在列表最后添加元素，或者使用<code>insert(int index, Object obj)方法</code>来添加元素到指定位置；使用<code>pop()方法</code>删除列表末尾的元素或者添加参数<code>index</code>来指定下标；如果需要替换可以直接通过<code>str[i]=&quot;...&quot;</code>来实现，并且<code>list</code>内部的各个元素的数据类型也是可以不相同的，比如可以就是<code>list</code>类型。</p><h5 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h5><p>Python内置的另一种有序列表类型——元组，用<code>()</code>表示。和<code>list</code>不同，<code>tuple</code>一旦初始化就不能更改，也没有append()，insert()这样的方法，但是可以通过下标访问元素，不过不能替换，也更加安全，还有一个需要注意的就是如果定义的时候只有一个元素需要加上一个<code>,</code>来避免歧义，<code>t=(1,)</code>，因为如果不加，<code>t</code>就是一个值为1的整型变量了。不过，如果<code>tuple</code>中存在<code>list</code>类型的元素，这个就<code>list</code>中的元素就可以改变了，从而可以理解为<code>tuple</code>也是”可变“的。</p><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><p>首先是<code>for..in</code>循环，依次把<code>list</code>,<code>tuple</code>中的元素打印出来，例如<code>for x in [1,2,3,4,5]:</code>；或者使用<code>range(x)</code>表示从0开始到小于x的整数序列<code>for x in range(5):</code>，还可以使用<code>list()</code>将<code>range()</code>转换为list类型。</p><h5 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h5><p>Python内置的字典类，其他语言也叫<code>map</code>，采用键值对存储方式存储。可通过<code>d[&#39;key&#39;]</code>查询对应的值，还可通过该方法放入键值对。一个<code>key</code>对应一个<code>value</code>，若对一个关键字放入多个值，则后面放入的会把前面放入的冲掉。如果<code>key</code>值不存在，字典会报错，为了避免，可使用<code>&#39;key&#39; in d</code>来查看key是否存在于字典中，若不存在则返回<code>False</code>；或者使用<code>get()方法</code>，如果不存在会返回<code>None</code>，或者返回自己指定的<code>value</code>，还可以使用<code>pop(&#39;key&#39;)方法</code>删除键值对。最重要的是<code>key</code>对象必须是不可变对象。</p><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><p>和dict类似，也是一组key的集合，只是不存储value值，也同样不能重复。通过<code>add()</code>和<code>remove()</code>方法实现添加或者删除key，set可以看作数学上的集合，可以进行∩、∪等操作。并且要创建一个set，需要提供一个list作为输入集合，<code>s = set([1, 2, 3])</code></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h5 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h5><p><code>max()</code>——可以从传入任意个参数，返回最大的那个。<br><code>str()</code>,<code>int()</code>,<code>bool()</code>等——数据类型转换函数。<br><code>hex()</code>函数——把一个整数转换成十六进制表示的字符串。</p><p>函数名实际是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”。即<code>a = abs</code>，然后可以用<code>a()</code>来实现<code>abs()</code>的功能。<br>如果想要保证传入函数的参数类型是正确的，可用<code>isinstance()方法</code>判断是否参数类型满足你所定义的参数类型。<br>函数是可以返回多个值的，可以用多个变量来接收，也可以用一个，因为返回的实际上是一个<code>tuple</code></p><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p><code>def f(x,n=2)</code>这里就给n设置了一个默认参数，如果调用函数<code>f()</code>时只传入了一个参数x，则会默认传入一个等于2的n进函数，这样就比较方便，例如<code>f(5)</code>实际上就是<code>f(5,2)</code>。不过设置默认参数的时候也有几个需要注意的地方：第一是必选参数在前，默认参数在后，第二是默认参数必须指向不变对象。如果指向一个list，则每次调用时都会改变list里的元素从而导致函数无法发挥作用。可见，默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的参数来实现。无论是简单调用还是复杂调用，函数只需要定义一个。</p><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：<code>def calc(numbers)</code>，<code>def calc(*numbers)</code>前者调用需要传入list或tuple，<code>calc([1,2,3])</code>而后者则不需要，<code>calc(1,2,3)</code>。同时可变参数还可传入一个list或tuple进函数，不过需要添加<code>*</code>号，例如<code>nums = [1,2,3]</code>，<code>calc(*nums)</code>即可，<code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。</p><h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h5><p>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br><span class="line"><span class="comment"># 不传入关键字参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Michael'</span>, <span class="number">30</span>)</span><br><span class="line">name: Michael age: <span class="number">30</span> other: &#123;&#125;</span><br><span class="line"><span class="comment"># 传入任意个数的关键字参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line"><span class="comment"># 和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure><p><code>**extra</code>表示把<code>extra</code>这个dict的所有key-value用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个dict，注意<code>kw</code>获得的dict是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p><h5 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果要限制关键字参数的名字，就可以用命名关键字参数</span></span><br><span class="line"><span class="comment"># 例如，只接收city和job作为关键字参数。这种方式定义的函数如下：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br><span class="line"><span class="comment"># 如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></span><br><span class="line">    print(name, age, args, city, job)</span><br><span class="line"><span class="comment"># 命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错，即需要写上city='..',job='..'</span></span><br><span class="line"><span class="comment"># 由于调用时缺少参数名city和job，Python解释器把这4个参数均视为位置参数，但person()函数仅接受2个位置参数。</span></span><br><span class="line"><span class="comment"># 命名关键字参数可以有缺省值，从而简化调用：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city=<span class="string">'Beijing'</span>, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><h5 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h5><p>在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。比如定义一个函数，包含上述若干种参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</span><br></pre></td></tr></table></figure><p>在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="literal">None</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">'ext'</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><p>最神奇的是通过一个tuple和dict，你也可以调用上述函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">88</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> d = <span class="number">88</span> kw = &#123;<span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br></pre></td></tr></table></figure><p>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</p><h5 id="参数小结"><a href="#参数小结" class="headerlink" title="参数小结"></a>参数小结</h5><p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。<br>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！<br>要注意定义可变参数和关键字参数的语法：<br><code>*args</code>是可变参数，args接收的是一个tuple；<br><code>**kw</code>是关键字参数，kw接收的是一个dict。<br>以及调用函数时如何传入可变参数和关键字参数的语法：<br>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；<br>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装dict，再通过<code>**kw</code>传入：<code>func(**{&#39;a&#39;: 1, &#39;b&#39;: 2})</code>。<br>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。<br>命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。<br>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符<code>*</code>，否则定义的将是位置参数。</p><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><p>尾递归优化——尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。python未提供该优化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上面的fact(n)函数由于return n * fact(n - 1)引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> fact_iter(n, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_iter</span><span class="params">(num, product)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> product</span><br><span class="line">    <span class="keyword">return</span> fact_iter(num - <span class="number">1</span>, num * product)</span><br><span class="line"><span class="comment"># 可以看到，return fact_iter(num - 1, num * product)仅返回递归函数本身，`num - 1`和`num * product`在函数调用前就会被计算，不影响函数调用。</span></span><br></pre></td></tr></table></figure><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>正向切片——<code>L[0:3]</code>，从索引0开始取到索引3为止且不包含索引为3的元素，如果第一个索引为0，还可以省略，即<code>L[:3]</code>。<br>倒数切片——<code>L[-10:-1]</code>，即取从倒数第十到倒数第一的元素且不包含最后一个元素，如果想取最后一个元素，则<code>L[-10:]</code>即可。<br>设置间隔——<code>L[0:10:2]</code>，即取前十个数且每两个数取一个，或者<code>L[::5]</code>，取所有，每5个取一个。如果只写<code>:</code>则复制原有的<code>list</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 利用切片操作，实现一个trim()函数，去除字符串首尾的空格，注意不要调用str的strip()方法：</span></span><br><span class="line"><span class="comment"># 自己写的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trim</span><span class="params">(s)</span>:</span></span><br><span class="line">    l = len(s)</span><br><span class="line">    end = <span class="number">0</span></span><br><span class="line">    front = l</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">' '</span>:</span><br><span class="line">            front = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">' '</span>:</span><br><span class="line">            end = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> front &gt; end:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">return</span> s[front:end+<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 网上的一些</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trim</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span>==len(s):</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">while</span> <span class="string">' '</span>==s[<span class="number">0</span>]:</span><br><span class="line">        s=s[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>==len(s):</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">while</span> <span class="string">' '</span>==s[<span class="number">-1</span>]:</span><br><span class="line">        s=s[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>==len(s):</span><br><span class="line">            <span class="keyword">return</span> s         </span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h5 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h5><p>只要是可迭代对象，就可以通过<code>for</code>进行迭代，用<code>dict</code>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> d.values():</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="comment"># 如何判断是否可以迭代呢</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line">isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># 判断是否可迭代</span></span><br></pre></td></tr></table></figure><h5 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h5><p>用来生成<code>list</code>，例<code>list(range(1,11))</code>，并且可以和<code>if,for</code>配合使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]  <span class="comment"># [4, 16, 36, 64, 100]</span></span><br><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]  <span class="comment"># ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']</span></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125;</span><br><span class="line">[k + <span class="string">'='</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()]  <span class="comment"># ['y=B', 'x=A', 'z=C']</span></span><br><span class="line">L = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="string">'IBM'</span>, <span class="string">'Apple'</span>]</span><br><span class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L]  <span class="comment"># ['hello', 'world', 'ibm', 'apple']</span></span><br></pre></td></tr></table></figure><p>可见，在一个列表生成式中，<code>for</code>前面的<code>if ... else</code>是表达式，而<code>for</code>后面的<code>if</code>是过滤条件，不能带<code>else</code>。</p><h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><p><code>generator</code>一边循环，一边计算，可以把列表生成式的<code>[]</code>改为<code>()</code>即可，可以用<code>next(g)</code>来打印生成器的下一个值，在没有元素时会抛出异常。也可以通过<code>for</code>来迭代从而避免异常。定义generator的另一种方法，如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator。</p><p>生成器每次停止是在遇到<code>yield</code>关键字停止，下一次开始也同样从这里开始。调用generator时，需要先生成一个generator对象，<code>o=odd() # odd是一个generator</code>，同样使用for来迭代：<code>for n in odd()</code>，但是使用for语句会拿不到generator<code>return</code>语句的值，需要使用错误捕获来获得。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">()</span>:</span></span><br><span class="line">    list  = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> list[:]</span><br><span class="line">        list.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(list[:<span class="number">-1</span>]):</span><br><span class="line">            list[index+<span class="number">1</span>] += value</span><br></pre></td></tr></table></figure><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p><code>isinstance([], Iterable)</code>判断是否是Iterable对象。可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code>可以使用<code>iter()</code>函数。<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。所以list等就不是<code>Iterator</code>。</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><h5 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h5><p><code>map()</code>函数接受两个参数，一个是函数，一个<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">     <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="comment"># map()传入的第一个参数是f，即函数对象本身。由于结果r是一个Iterator，Iterator是惰性序列</span></span><br><span class="line"><span class="comment"># 因此通过list()函数让它把整个序列都计算出来并返回一个list。</span></span><br><span class="line">list(r) <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure><p><code>reduce()</code>也接受两个参数，一个是函数，一个<code>Iterable</code>，<code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]) <span class="comment"># 25</span></span><br><span class="line"><span class="comment"># 利用map()函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。</span></span><br><span class="line"><span class="comment"># 输入：['adam', 'LISA', 'barT']，输出：['Adam', 'Lisa', 'Bart']：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> name[:<span class="number">1</span>].upper() + name[<span class="number">1</span>:].lower()</span><br><span class="line"><span class="comment"># str2float</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2float</span><span class="params">(s)</span>:</span></span><br><span class="line">    DIGITS = &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>, <span class="string">'.'</span>: <span class="number">-1</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> DIGITS[x]</span><br><span class="line">    L = list(map(f, s))</span><br><span class="line">    index = L.index(<span class="number">-1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">r</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x *<span class="number">10</span> + y</span><br><span class="line">    x1 = reduce(r, L[:index])</span><br><span class="line">    x2 = reduce(r, L[index+<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> float(str(x1)+<span class="string">'.'</span>+str(x2))</span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p><code>filter()</code>函数用于过滤序列。和<code>map()</code>类似，<code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。且<code>filter()</code>返回的是<code>Iterator</code>，惰性序列，需要使用<code>list()</code>来生成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于生成素数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器-从3开始的奇数序列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_iter</span><span class="params">()</span>:</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = n + <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line"><span class="comment"># 筛选函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_not_divisible</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x % n &gt; <span class="number">0</span>  </span><br><span class="line"><span class="comment"># 生成素数序列的生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    it = _odd_iter() <span class="comment"># 初始序列</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = next(it) <span class="comment"># 返回序列的第一个数</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        it = filter(_not_divisible(n), it) <span class="comment"># 构造新序列</span></span><br><span class="line"><span class="comment"># 打印1000以内的素数:</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> primes():</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1000</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><p>Python内置的<code>sorted()</code>函数就可以直接对list进行排序(默认从小到大)，此外，<code>sorted()</code>函数也是一个高阶函数，它还可以接收一个<code>key</code>函数来实现自定义的排序。<code>key</code>指定的函数将作用于<code>list</code>的每一个元素上，并根据<code>key</code>函数返回的结果进行排序。要进行反向排序，不必改动key函数，可以传入第三个参数<code>reverse=True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># ['Zoo', 'Credit', 'bob', 'about']</span></span><br></pre></td></tr></table></figure><h5 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p>返回的是一个函数，并且是在调用返回的函数<code>f</code>时，才会真正开始计算。且每次调用<code>lazy_sum()</code>返回的都是不同的函数，即使函数相同。</p><p>闭包——我们在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中的程序结构，就称为闭包。需要注意，返回的函数不是立即执行，而是在函数调用时才会执行。所以返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每次返回递增整数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_counter</span>:</span></span><br><span class="line">    l = [<span class="number">0</span>] <span class="comment"># 这里使用int类型会报错 如果使用l = 0，后面l += 1，则会报错</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span>:</span></span><br><span class="line">    l[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> l[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line"><span class="comment"># 原因：不可变类型所指向的地址随值的变化而变化，即l=0指向一个地址，而l+=1，l=1后，指向其他地址</span></span><br><span class="line"><span class="comment"># 而对于可变对象，则其指向的地址不会随值变化而变化，l[0]对应的地址一直不会变，只是该地址对应的值在变</span></span><br></pre></td></tr></table></figure><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p><code>lambda</code>关键字表示匿名函数，匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: x * x <span class="comment"># def f(x): return x * x </span></span><br><span class="line"><span class="comment"># 也可以没有参数，即和函数没有参数一样的道理，例子:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y)</span></span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">lambda</span>:</span> x + y</span><br></pre></td></tr></table></figure><h5 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h5><p>函数有一个<code>_name_</code>属性，可以通过该属性拿到函数的名字。在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。即不改变函数定义，增加功能。装饰器接受函数作为参数，且使用装饰器时，要借助Python的@语法，把decorator置于函数的定义处。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2015-3-25'</span>)</span><br><span class="line"><span class="comment"># 即表示now = log(now)</span></span><br><span class="line"><span class="comment"># 且now._name_ = wrapper</span></span><br></pre></td></tr></table></figure><p>如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数，写出来会更复杂。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @functools.wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('execute')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2015-3-25'</span>)</span><br><span class="line"><span class="comment"># 即now = log('execute')(now)</span></span><br></pre></td></tr></table></figure><p>在oop设计模式中还有一些应用。</p><h5 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h5><p><code>functools.partial</code>帮助我们创建一个偏函数，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。但是创建完后，也仍然可以传递参数来改变功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</span><br><span class="line">int2(<span class="string">'1000000'</span>) <span class="comment"># 64</span></span><br><span class="line">int2(<span class="string">'1000000'</span>, base=<span class="number">10</span>) <span class="comment"># 1000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际上固定了int()函数的关键字参数base，也就是：</span></span><br><span class="line">int2(<span class="string">'10010'</span>)</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">kw = &#123; <span class="string">'base'</span>: <span class="number">2</span> &#125;</span><br><span class="line">int(<span class="string">'10010'</span>, **kw)</span><br><span class="line"></span><br><span class="line">max2 = functools.partial(max, <span class="number">10</span>)</span><br><span class="line">max2(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">args = (<span class="number">10</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">max(*args)</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h5 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">' a test module '</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'Michael Liao'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment"># xxxxxx</span></span><br></pre></td></tr></table></figure><p>第1行和第2行是标准注释，第1行注释可以让这个<code>hello.py</code>文件直接在Unix/Linux/Mac上运行，第2行注释表示.py文件本身使用标准UTF-8编码。第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释。第6行使用<code>__author__</code>变量把作者写进去。</p><p><code>sys</code>模块中的<code>agrv</code>变量，即命令行参数，第一个参数是该<code>.py</code>文件的名称，<code>argv</code>是一个<code>list</code>。</p><p>当我们在命令行运行模块文件时，Python解释器把一个特殊变量<code>__name__</code>置为<code>__main__</code>，而如果在其他地方导入该模块时，<code>if</code>判断将失败，因此，这种<code>if</code>测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</p><p>模块的作用域——在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在Python中，是通过<code>_</code>前缀来实现的。类似<code>_xxx</code>和<code>__xxx</code>这样的函数或变量就是非公开的（private），不应该被直接引用，比如<code>_abc</code>，<code>__abc</code>等；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, %s'</span> % name</span><br></pre></td></tr></table></figure><h5 id="模块搜索路径"><a href="#模块搜索路径" class="headerlink" title="模块搜索路径"></a>模块搜索路径</h5><p>当我们试图加载一个模块时，Python会在指定的路径下搜索对应的.py文件，如果找不到，就会报错。默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在<code>sys</code>模块的<code>path</code>变量中，如果我们要添加自己的搜索目录，有两种方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一是直接修改sys.path，添加要搜索的目录：</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">'/Users/michael/my_py_scripts'</span>)</span><br><span class="line"><span class="comment"># 这种方法是在运行时修改，运行结束后失效。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法是设置环境变量PYTHONPATH，该环境变量的内容会被自动添加到模块搜索路径中。</span></span><br><span class="line"><span class="comment"># 设置方式与设置Path环境变量类似。注意只需要添加你自己的搜索路径，Python自己本身的搜索路径不受影响。</span></span><br></pre></td></tr></table></figure><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><h5 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age, score)</span>:</span></span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">90</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">elif</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'C'</span></span><br><span class="line">        </span><br><span class="line">Jack = Student() <span class="comment"># 实例</span></span><br><span class="line">Jack.name = jack <span class="comment"># 添加属性</span></span><br></pre></td></tr></table></figure><p>定义类，用<code>class</code>关键字，<code>Object</code>即该类的父类。创建实例即类名+<code>()</code>，还可以自由地给一个实例变量绑定属性，比如，给实例<code>Jack</code>绑定一个<code>name</code>属性。<code>__init__方法</code>可以理解为构造方法，可以绑定需要的属性。且<code>__init__方法</code>的第一个参数永远为<code>self</code>，表示创建的实例本身。和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><h5 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h5><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age, score)</span>:</span></span><br><span class="line">        self.__age = age</span><br><span class="line">        self.__score = score</span><br><span class="line"><span class="comment"># 无法从外部访问实例变量.__age和实例变量.__score</span></span><br></pre></td></tr></table></figure><p>如果想要访问相应的私有变量，可以通过<code>getter</code>和<code>setter</code>方法来获得和修改私有变量。还有需要注意的是，在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p><p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p><p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jack._Student__name <span class="comment"># jack</span></span><br></pre></td></tr></table></figure><p>最后注意下面的这种<strong>错误写法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</span><br><span class="line">bart.get_name()</span><br><span class="line"><span class="comment"># 'Bart Simpson'</span></span><br><span class="line">bart.__name = <span class="string">'New Name'</span> <span class="comment"># 设置__name变量！</span></span><br><span class="line">bart.__name</span><br><span class="line"><span class="comment"># 'New Name'</span></span><br><span class="line">bart.get_name() <span class="comment"># get_name()内部返回self.__name</span></span><br><span class="line"><span class="comment"># 'Bart Simpson'</span></span><br></pre></td></tr></table></figure><p>表面上看，外部代码“成功”地设置了<code>__name</code>变量，但实际上这个<code>__name</code>变量和class内部的<code>__name</code>变量<em>不是</em>一个变量！内部的<code>__name</code>变量已经被Python解释器自动改成了<code>_Student__name</code>，而外部代码给<code>bart</code>新增了一个<code>__name</code>变量。</p><h5 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal is running...'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Dog is running...'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Cat is running...'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_twice</span><span class="params">(animal)</span>:</span></span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br></pre></td></tr></table></figure><p>在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行。</p><p>多态的开闭原则：1）对扩展开放：允许新增<code>Animal</code>子类    2）对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</p><p><strong>静态语言和动态语言</strong>——对于静态语言（例如Java）来说，如果需要传入<code>Animal</code>类型，则传入的对象必须是<code>Animal</code>类型或者它的子类，否则，将无法调用<code>run()</code>方法。对于Python这样的动态语言来说，则不一定需要传入<code>Animal</code>类型。我们只需要保证传入的对象有一个<code>run()</code>方法就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Start...'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 这里没有继承于Animal 但是还是可以当作Animal类型的类传入，因为其具有run()方法</span></span><br></pre></td></tr></table></figure><p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><p>Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</p><h5 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h5><p>判断对象类型，使用<code>type()</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type(<span class="number">123</span>) <span class="comment"># &lt;class 'int'&gt;</span></span><br><span class="line">type(<span class="string">'str'</span>) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">type(<span class="literal">None</span>) <span class="comment"># &lt;type(None) 'NoneType'&gt;</span></span><br><span class="line">type(abs) <span class="comment"># &lt;class 'builtin_function_or_method'&gt;</span></span><br><span class="line">type(a) <span class="comment"># &lt;class '__main__.Animal'&gt;</span></span><br></pre></td></tr></table></figure><p>可以在<code>if</code>语句中判断两个变量的类型是否相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">type(<span class="number">123</span>)==type(<span class="number">456</span>) <span class="comment"># True</span></span><br><span class="line">type(<span class="number">123</span>)==int <span class="comment"># True</span></span><br><span class="line">type(<span class="string">'abc'</span>)==type(<span class="string">'123'</span>) <span class="comment"># True</span></span><br><span class="line">type(<span class="string">'abc'</span>)==str <span class="comment"># True</span></span><br><span class="line">type(<span class="string">'abc'</span>)==type(<span class="number">123</span>)<span class="comment"># False</span></span><br><span class="line"><span class="comment"># 还可以使用types模块中来判断函数、生成器、对象等等</span></span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">type(fn)==types.FunctionType <span class="comment"># True</span></span><br><span class="line">type(abs)==types.BuiltinFunctionType <span class="comment"># True</span></span><br><span class="line">type(<span class="keyword">lambda</span> x: x)==types.LambdaType <span class="comment"># True</span></span><br><span class="line">type((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)))==types.GeneratorType <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>还可以使用<code>isinstance()</code>来判断类的继承等关系，而不建议使用<code>type()</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># object -&gt; Animal -&gt; Dog -&gt; Husky</span></span><br><span class="line">a = Animal()</span><br><span class="line">d = Dog()</span><br><span class="line">h = Husky()</span><br><span class="line">isinstance(h, Husky) <span class="comment"># True</span></span><br><span class="line">isinstance(h, Dog) <span class="comment"># True</span></span><br><span class="line">isinstance(h, Animal) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># isinstance()判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。</span></span><br><span class="line">isinstance(d, Husky) <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 能用type()判断的基本类型也可以用isinstance()判断：</span></span><br><span class="line">isinstance(<span class="string">'a'</span>, str) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：</span></span><br><span class="line">isinstance([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (list, tuple)) <span class="comment"># True</span></span><br><span class="line">isinstance((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (list, tuple)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>如果要获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的list，比如，获得一个str对象的所有属性和方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dir(<span class="string">'ABC'</span>)</span><br><span class="line"><span class="comment"># ['__add__', '__class__',..., '__subclasshook__', 'capitalize', 'casefold',..., 'zfill']</span></span><br></pre></td></tr></table></figure><p>类似<code>__xxx__</code>的属性和方法在Python中都是有特殊用途的，比如<code>__len__</code>方法返回长度。在Python中，如果你调用<code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数内部，它自动去调用该对象的<code>__len__()</code>方法，所以，下面的代码是等价的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">len(<span class="string">'ABC'</span>) <span class="comment"># 3</span></span><br><span class="line"><span class="string">'ABC'</span>.__len__() <span class="comment"># 3</span></span><br><span class="line"><span class="string">'ABC'</span>.lower() <span class="comment"># abc</span></span><br></pre></td></tr></table></figure><p>同样如果是我们自己写的类，如果也想用<code>len(myObj)</code>的话，也可以自己写一个<code>__len__()</code>方法。还有就是<code>lower()</code>普通方法。</p><p>仅仅把属性和方法列出来是不够的，配合<code>getattr()</code>、<code>setattr()</code>以及<code>hasattr()</code>，我们可以直接操作一个对象的状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="number">9</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.x * self.x</span><br><span class="line"></span><br><span class="line">obj = MyObject()</span><br></pre></td></tr></table></figure><p>紧接着，可以测试该对象的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hasattr(obj, <span class="string">'x'</span>) <span class="comment"># 有属性'x'吗？ True</span></span><br><span class="line">obj.x <span class="comment"># 9</span></span><br><span class="line">hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？ False</span></span><br><span class="line">setattr(obj, <span class="string">'y'</span>, <span class="number">19</span>) <span class="comment"># 设置一个属性'y'</span></span><br><span class="line">hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？ True</span></span><br><span class="line">getattr(obj, <span class="string">'y'</span>) <span class="comment"># 获取属性'y' 19</span></span><br><span class="line">obj.y <span class="comment"># 获取属性'y' 19</span></span><br></pre></td></tr></table></figure><p>如果试图获取不存在的属性，会抛出AttributeError的错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getattr(obj, <span class="string">'z'</span>) <span class="comment"># 获取属性'z'</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment"># File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment"># AttributeError: 'MyObject' object has no attribute 'z'</span></span><br></pre></td></tr></table></figure><p>还可以传入一个default参数，如果属性不存在，就返回默认值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getattr(obj, <span class="string">'z'</span>, <span class="number">404</span>) <span class="comment"># 获取属性'z'，如果不存在，返回默认值404</span></span><br><span class="line"><span class="comment"># 404</span></span><br></pre></td></tr></table></figure><p>也可以获得对象的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hasattr(obj, <span class="string">'power'</span>) <span class="comment"># 有属性'power'吗？ True</span></span><br><span class="line">getattr(obj, <span class="string">'power'</span>) <span class="comment"># 获取属性'power'</span></span><br><span class="line"><span class="comment"># &lt;bound method MyObject.power of &lt;__main__.MyObject object at 0x10077a6a0&gt;&gt;</span></span><br><span class="line">fn = getattr(obj, <span class="string">'power'</span>) <span class="comment"># 获取属性'power'并赋值到变量fn</span></span><br><span class="line">fn <span class="comment"># fn指向obj.power</span></span><br><span class="line"><span class="comment"># &lt;bound method MyObject.power of &lt;__main__.MyObject object at 0x10077a6a0&gt;&gt;</span></span><br><span class="line">fn() <span class="comment"># 调用fn()与调用obj.power()是一样的 81</span></span><br></pre></td></tr></table></figure><p>通过内置的一系列函数，我们可以对任意一个Python对象进行剖析，拿到其内部的数据。要注意的是，只有在不知道对象信息的时候，我们才会去获取对象信息。如果可以直接使用类名.属性的形式来进行。</p><p>一个正确的用法的例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readImage</span><span class="params">(fp)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> hasattr(fp, <span class="string">'read'</span>):</span><br><span class="line">        <span class="keyword">return</span> readData(fp)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h5 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h5><p>实例属性归属于类本身，但是类的实例也可以像访问属性一样访问，同时还可以通过类名.类属性名来访问。</p><p>需要注意的是，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习</title>
      <link href="/2020/04/10/JavaScript%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/04/10/JavaScript%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript学习"><a href="#JavaScript学习" class="headerlink" title="JavaScript学习"></a>JavaScript学习</h2><p><em>time:2020/04/10</em></p><h4 id="Javascript基础"><a href="#Javascript基础" class="headerlink" title="Javascript基础"></a>Javascript基础</h4><p>数据类型和变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Number类型，不区分整数和浮点数统一为Number类型。</span></span><br><span class="line"><span class="comment">//NaN和Infinity是特殊的Number类型</span></span><br><span class="line"><span class="comment">//一个表示无法表示的数，另一个则是在JavaScript中超过最大能表示的范围，就为Infinity</span></span><br><span class="line"><span class="comment">//%取模运算在JavaScript中可以对浮点数使用</span></span><br><span class="line"><span class="number">10.5</span>%<span class="number">3</span>==<span class="number">1.5</span>;</span><br><span class="line"><span class="number">0</span>/<span class="number">0</span>==<span class="literal">NaN</span>;</span><br><span class="line"><span class="number">2</span>/<span class="number">0</span>==<span class="literal">Infinity</span>;</span><br><span class="line"><span class="comment">//==和===运算符，前者会自动转换类型再比较，所以应坚持使用后者进行比较</span></span><br><span class="line"><span class="comment">//NaN和所有值都不同，包括其自身，需使用isNaN()来判断</span></span><br><span class="line"><span class="comment">//浮点数的比较也需要注意,eg.1/3!=1-2/3</span></span><br></pre></td></tr></table></figure><p>字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可用`...`来表示多行字符串</span></span><br><span class="line"><span class="string">`这是一个</span></span><br><span class="line"><span class="string">多行</span></span><br><span class="line"><span class="string">字符串`</span>;</span><br><span class="line"><span class="comment">//除了用'+'连接字符串，还可以使用$&#123;&#125;来实现</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年<span class="subst">$&#123;age&#125;</span>岁了!`</span>;</span><br><span class="line"><span class="comment">//var message = '你好, ' + name + ', 你今年' + age + '岁了!';</span></span><br><span class="line"><span class="comment">//字符串可以使用下标访问特定位置的字符。</span></span><br><span class="line"><span class="comment">//字符串是不变的，所以对某位置的字符进行改变，全字符串是不变的</span></span><br></pre></td></tr></table></figure><p><em>time:2020/04/16</em></p><p>数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以直接给Array的length赋值，并且会改变Array的大小</span></span><br><span class="line"><span class="comment">//可以给Array超过范围的索引赋值，同样会改变Array</span></span><br><span class="line"><span class="comment">//indexOf()方法，可以返回一个索引或者返回索引对应的元素，即参数可以是索引也可以是元素</span></span><br><span class="line"><span class="comment">//slice()方法，就是和string的substring方法是同样的效果，且参数是参数包含开始索引不包含结束索引,不传递参数，则代表剪切整个字符串，可以这样复制数组</span></span><br><span class="line"><span class="comment">//push()和pop()方法，字符串末尾添加或者删除元素</span></span><br><span class="line"><span class="comment">//unshift()和shift()方法，字符串开头添加或者删除元素(unshift添加)</span></span><br><span class="line"><span class="comment">//sort()方法，排序;reverse()方法，调转数组。</span></span><br><span class="line"><span class="keyword">var</span> arr=&#123;<span class="string">'A'</span>,<span class="string">'b'</span>&#125;;</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="comment">//splice()方法,第一个参数指定索引，第二个参数指定从该索引开始删除的元素个数，然后后面可以跟一些字符串表示从该索引开始添加的元素，也可以不添加，即只有两个参数。并且该方法会返回删除的元素形成的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Yahoo'</span>, <span class="string">'AOL'</span>, <span class="string">'Excite'</span>, <span class="string">'Oracle'</span>];</span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// ['Google', 'Facebook']</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Oracle']</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></span><br><span class="line"><span class="comment">//concat方法，连接两个数组并返回新数组</span></span><br><span class="line"><span class="keyword">var</span> c=a.concat(b);</span><br><span class="line"><span class="comment">//join方法，把数组中的元素用特定的字符串连接起来，返回字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">'-'</span>); <span class="comment">// 'A-B-C-1-2-3'，可以是字符串 不一定只有一个字符</span></span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu = &#123;</span><br><span class="line">    name:<span class="string">'小小'</span></span><br><span class="line">&#125;;</span><br><span class="line">stu.name;</span><br><span class="line">stu[<span class="string">'name'</span>]; <span class="comment">//这两种访问都是可以的</span></span><br><span class="line">stu.number = <span class="string">'153'</span>; <span class="comment">//可以动态添加属性</span></span><br><span class="line"><span class="keyword">delete</span> stu.number; <span class="comment">//删除属性</span></span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> stu; <span class="comment">//检查对象是否拥有某属性,或者其是否继承某属性 布尔型</span></span><br><span class="line">stu.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">//检查自身是否拥有某一属性 布尔型</span></span><br></pre></td></tr></table></figure><p>循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件判断语句if else与常规语言没有什么区别</span></span><br><span class="line"><span class="comment">//for循环的基本使用也都一样</span></span><br><span class="line"><span class="comment">//for...in...，可以将一个对象的所有属性都循环一遍</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    name: <span class="string">'Jack'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    city: <span class="string">'Beijing'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key); <span class="comment">// 'name', 'age', 'city'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//要过滤掉对象继承的属性，用hasOwnProperty()来实现</span></span><br><span class="line"><span class="comment">//Array也是对象，也可以使用for..in..循环，循环得到的是索引</span></span><br><span class="line"><span class="comment">//需要注意，得到的索引是String而不是Number</span></span><br></pre></td></tr></table></figure><p>Map和Set</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="comment">//初始化map需要一个二维数组，或者可以初始化为空</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'Michael'</span>, <span class="number">95</span>], [<span class="string">'Bob'</span>, <span class="number">75</span>], [<span class="string">'Tracy'</span>, <span class="number">85</span>]]);</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 空Map</span></span><br><span class="line">m.set(<span class="string">'Adam'</span>, <span class="number">67</span>);<span class="comment">//通过set方法添加键值对</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>);<span class="comment">//通过get方法取得键对应的值</span></span><br><span class="line">m.has(<span class="string">'Adam'</span>); <span class="comment">//通过has方法检查是否存在键 布尔型</span></span><br><span class="line">m.delete(<span class="string">'Adam'</span>); <span class="comment">//通过delete方法删除键值对</span></span><br><span class="line"><span class="comment">//由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉</span></span><br><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="comment">//要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set</span></span><br><span class="line"><span class="comment">//重复元素在Set中自动被过滤</span></span><br><span class="line"><span class="comment">//通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果；通过delete(key)方法可以删除元素</span></span><br></pre></td></tr></table></figure><p><em>time:2020/04/18</em></p><p>iterable</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for..of..迭代器循环</span></span><br><span class="line"><span class="comment">//可用来遍历array的所有元素</span></span><br><span class="line"><span class="comment">//forEach()方法</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</span><br><span class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, sameElement, set</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'x'</span>], [<span class="number">2</span>, <span class="string">'y'</span>], [<span class="number">3</span>, <span class="string">'z'</span>]]);</span><br><span class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//需要提供回调函数function，对每个元素都执行一遍function</span></span><br></pre></td></tr></table></figure><p>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javascrpit中函数也可以看作对象，函数名可以认为是指向该函数的变量</span></span><br><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//允许传入多个参数，没有定义的参数传入也不会改变什么，传入的参数少也是可以的</span></span><br><span class="line"><span class="comment">//没有参数传入，函数内部的参数接收到的就是undefined，可以在函数内部进行检查以避免</span></span><br><span class="line"><span class="comment">//javascript函数中存在默认参数arguments，里面存放了所有参数，为Array类型</span></span><br><span class="line"><span class="comment">//而且就算函数不定义参数，如果传入了参数，也可以通过arguments拿到参数值</span></span><br><span class="line"><span class="comment">//还可以利用arguments拿到传入参数的个数</span></span><br><span class="line"><span class="comment">//rest参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a = '</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b = '</span> + b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 结果:</span></span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// Array [ 3, 4, 5 ]</span></span><br><span class="line"><span class="comment">//如果没有多余的参数，rest就会接受一个空数组</span></span><br></pre></td></tr></table></figure><p>变量作用域与解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量提升</span></span><br><span class="line"><span class="comment">//javascript的函数中会自动把变量的声明提到函数顶部，但不会把赋值提前进行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">'Hello, '</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">'Bob'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不会报错，但是打印的y是undefined</span></span><br><span class="line"><span class="comment">//由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。</span></span><br><span class="line"><span class="comment">//最常见的做法是用一个var申明函数内部用到的所有变量</span></span><br><span class="line"><span class="comment">//不在任何函数内定义的变量就具有全局作用域。</span></span><br><span class="line"><span class="comment">//实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性</span></span><br><span class="line"><span class="comment">//可以通过window.变量进行访问该变量</span></span><br><span class="line"><span class="comment">//某些函数也同样是全局的，可通过window进行访问</span></span><br><span class="line"><span class="comment">//局部作用域</span></span><br><span class="line"><span class="comment">//由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的</span></span><br><span class="line"><span class="comment">//为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量</span></span><br><span class="line"><span class="comment">//ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="comment">//解构赋值</span></span><br><span class="line"><span class="comment">//从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。</span></span><br><span class="line"><span class="keyword">var</span> [x, y, z] = [<span class="string">'hello'</span>, <span class="string">'JavaScript'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"><span class="comment">//注意，对数组元素进行解构赋值时，多个变量要用[...]括起来。</span></span><br><span class="line"><span class="comment">//如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致：</span></span><br><span class="line"><span class="keyword">let</span> [x, [y, z]] = [<span class="string">'hello'</span>, [<span class="string">'JavaScript'</span>, <span class="string">'ES6'</span>]];</span><br><span class="line"><span class="comment">//解构赋值还可以忽略某些元素：</span></span><br><span class="line"><span class="keyword">let</span> [, , z] = [<span class="string">'hello'</span>, <span class="string">'JavaScript'</span>, <span class="string">'ES6'</span>]；</span><br><span class="line"><span class="comment">//如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性：</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'male'</span>,</span><br><span class="line">    passport: <span class="string">'G-12345678'</span>,</span><br><span class="line">    school: <span class="string">'No.4 middle school'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;name, age, passport&#125; = person;</span><br><span class="line"><span class="comment">//使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为undefined</span></span><br><span class="line"><span class="comment">//如果要使用的变量名和属性名不一致，可以用下面的语法获取：</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'male'</span>,</span><br><span class="line">    passport: <span class="string">'G-12345678'</span>,</span><br><span class="line">    school: <span class="string">'No.4 middle school'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把passport属性赋值给变量id:</span></span><br><span class="line"><span class="keyword">let</span> &#123;name, <span class="attr">passport</span>:id&#125; = person</span><br><span class="line"><span class="comment">//解构赋值还可以使用默认值，这样就避免了不存在的属性返回undefined的问题：</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'male'</span>,</span><br><span class="line">    passport: <span class="string">'G-12345678'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果person对象没有single属性，默认赋值为true:</span></span><br><span class="line"><span class="keyword">var</span> &#123;name, single=<span class="literal">true</span>&#125; = person;</span><br><span class="line">name; <span class="comment">// '小明'</span></span><br><span class="line">single; <span class="comment">// true</span></span><br><span class="line"><span class="comment">//有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：</span></span><br><span class="line"><span class="keyword">var</span> x, y;</span><br><span class="line"><span class="comment">// 解构赋值:</span></span><br><span class="line">&#123;x, y&#125; = &#123; <span class="attr">name</span>: <span class="string">'小明'</span>, <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span>&#125;;</span><br><span class="line"><span class="comment">// 语法错误: Uncaught SyntaxError: Unexpected token =</span></span><br><span class="line"><span class="comment">//这是因为JavaScript引擎把&#123;开头的语句当作了块处理，于是=不再合法。解决方法是用小括号括起来：</span></span><br><span class="line">(&#123;x, y&#125; = &#123; <span class="attr">name</span>: <span class="string">'小明'</span>, <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span>&#125;);</span><br><span class="line"><span class="comment">//解构赋值在很多时候可以大大简化代码。例如，交换两个变量x和y的值，可以这么写，不再需要临时变量：</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">1</span>, y=<span class="number">2</span>;</span><br><span class="line">[x, y] = [y, x]</span><br><span class="line"><span class="comment">//如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。例如，下面的函数可以快速创建一个Date对象：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildDate</span>(<span class="params">&#123;year, month, day, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//它的方便之处在于传入的对象只需要year、month和day这三个属性：</span></span><br><span class="line">buildDate(&#123; <span class="attr">year</span>:<span class="number">2017</span>, <span class="attr">month</span>:<span class="number">1</span>, <span class="attr">day</span>:<span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaScript的函数内部如果调用了this，那么这个this到底指向谁？</span></span><br><span class="line"><span class="comment">//如果是通过对象的形式进行调用，那么this指向的是调用的对象，是符合情理的</span></span><br><span class="line"><span class="comment">//如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window。</span></span><br><span class="line"><span class="comment">//要保证this指向正确，必须用obj.xxx()的形式调用！</span></span><br><span class="line"><span class="comment">//也可以先使用that捕获this，然后再使用</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// 在方法内部一开始就捕获this</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAgeFromBirth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">            <span class="keyword">return</span> y - that.birth; <span class="comment">// 用that而不是this</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getAgeFromBirth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这样就能避免出错了</span></span><br><span class="line"><span class="comment">//apply</span></span><br><span class="line"><span class="comment">//指定函数的this指向哪个对象，可以用函数本身的apply方法</span></span><br><span class="line"><span class="comment">//它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</span></span><br><span class="line"><span class="comment">//使用apply来避免this的出错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    age: getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); <span class="comment">// 25</span></span><br><span class="line">getAge.apply(xiaoming, []); <span class="comment">// 25, this指向xiaoming, 参数为空</span></span><br><span class="line"><span class="comment">//另一个与apply()类似的方法是call()，唯一区别是：</span></span><br><span class="line"><span class="comment">//apply()把参数打包成Array再传入；</span></span><br><span class="line"><span class="comment">//call()把参数按顺序传入。</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>]); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.max.call(<span class="literal">null</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">//对普通函数调用，我们通常把this绑定为null</span></span><br><span class="line"><span class="comment">//装饰器</span></span><br><span class="line"><span class="comment">//利用apply()，我们还可以动态改变函数的行为。</span></span><br><span class="line"><span class="comment">//现在假定我们想统计一下代码一共调用了多少次parseInt()，</span></span><br><span class="line"><span class="comment">//可以把所有的调用都找出来，然后手动加上count += 1，</span></span><br><span class="line"><span class="comment">//不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的parseInt()</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> oldParseInt = <span class="built_in">parseInt</span>; <span class="comment">// 保存原函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.parseInt = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> oldParseInt.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用原函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Array的map()方法</span></span><br><span class="line"><span class="comment">//传入参数为函数对象，作用为将此函数作用于数组的所有元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> results = arr.map(pow); <span class="comment">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"><span class="comment">//reduce()方法</span></span><br><span class="line"><span class="comment">//Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上</span></span><br><span class="line"><span class="comment">//这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：</span></span><br><span class="line">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y;</span><br><span class="line">&#125;); <span class="comment">// 13579,reduce的一些好用的地方</span></span><br><span class="line"><span class="comment">//可以省略function，进而变成arr.map(x=&gt;10*x)或者arr.reduce((x,y)=&gt;10*x+y)</span></span><br></pre></td></tr></table></figure><p>箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用箭头函数来省略function</span></span><br><span class="line">x=&gt;x*x;</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x*x;&#125;;<span class="comment">//两者等价</span></span><br><span class="line"><span class="comment">//箭头函数相当于匿名函数</span></span><br><span class="line"><span class="comment">//如果函数只用return一个表达式，则可以全部省略</span></span><br><span class="line"><span class="comment">//如果函数体里包含了一些其他结构，则不能省略return</span></span><br><span class="line">x =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) <span class="keyword">return</span> x * x;</span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">return</span> - x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果存在多个参数需要用括号括起来</span></span><br><span class="line">(x, y) =&gt; x * x + y * y</span><br><span class="line">() =&gt; <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 可变参数:</span></span><br><span class="line">(x, y, ...rest) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> i, sum = x + y;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;rest.length; i++) &#123;</span><br><span class="line">        sum += rest[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在返回对象的时候需要用小括号括起来，因为&#123;&#125;会导致歧义</span></span><br><span class="line">x=&gt;(&#123;<span class="attr">foo</span> : x&#125;);</span><br><span class="line"><span class="comment">//使用箭头函数也不用担心this的错用，箭头函数会保证this指向外部作用域</span></span><br><span class="line"><span class="comment">//this在箭头函数中已经词法绑定了</span></span><br><span class="line"><span class="comment">//用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略</span></span><br><span class="line">arr.sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x-y;</span><br><span class="line">&#125;);<span class="comment">//简化sort写法</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 10, 20]</span></span><br></pre></td></tr></table></figure><p>generator</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习</title>
      <link href="/2020/04/07/HTML%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/04/07/HTML%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>时隔几个月，终于又开始写博客了，原因呢，大学太颓废，还是得找点事给自己干，所以从现在开始学习前端开发，最开始，当然，从HTML开始，虽然之前也学过一些，但是总结的东西都不多，所以这次就当是正式开始系统的学习前端知识了，我的一个思路呢就是HTML-&gt;CSS-&gt;JS，先把这三大基础整透，再说后面的内容。写博客的目的呢，一是监督自己学习，二呢就是方便自己在学习的时候做好相关的笔记记录，这样也能给予自己前进的动力了，好了废话就说这么多，开始这一系列第一篇博客的更新了。</p><p><em>time：2020/04/07</em></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>在开始这篇博客前已经完成了一些准备工作如下：</p><p>vscode安装、webstorm安装、sublime安装，虽然这三个IDE都比较推荐，但我还是全都安装下来了，在使用过程中再来取舍。</p><h4 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h4><p>用 style 属性代替旧的一些标签以及属性，如<code>&lt;font&gt;,&lt;basefont&gt;,&lt;s&gt;,&lt;u&gt;,alion,color,bgcolor</code>等等。将其变成以下样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"background-color:red"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"color:red"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-family:verdana"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文本格式化标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--粗体--&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--着重文字--&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--斜体--&gt;</span> <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加重语气,和加粗差不多--&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--插入字,即下划线--&gt;</span> <span class="tag">&lt;<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--删除字--&gt;</span> <span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--大号和小号--&gt;</span> <span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span> <span class="tag">&lt;<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算机输出标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码--&gt;</span> <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--键盘码--&gt;</span> <span class="tag">&lt;<span class="name">kbd</span>&gt;</span><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--计算机代码样本--&gt;</span> <span class="tag">&lt;<span class="name">sample</span>&gt;</span><span class="tag">&lt;/<span class="name">sample</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打印机代码--&gt;</span> <span class="tag">&lt;<span class="name">tt</span>&gt;</span><span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--变量，用于定义--&gt;</span> <span class="tag">&lt;<span class="name">var</span>&gt;</span><span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--预格式文本,在code内包围代码可实现保留空格回车--&gt;</span> <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--短的引用--&gt;</span> <span class="tag">&lt;<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--长引用，并会进行缩进处理--&gt;</span> <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义缩写，为浏览器提供帮助--&gt;</span> <span class="tag">&lt;<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义缩写的意义，鼠标放置即可查看--&gt;</span> <span class="tag">&lt;<span class="name">dfn</span>&gt;</span><span class="tag">&lt;/<span class="name">dfn</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义文档或者文章的联系信息--&gt;</span> <span class="tag">&lt;<span class="name">address</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义著作的标题--&gt;</span> <span class="tag">&lt;<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--双向书写，可以从左边开始--&gt;</span> <span class="tag">&lt;<span class="name">bdo</span>&gt;</span><span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><em>time：2020/04/08</em></p><p>外部样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内部样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: red&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内联样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red; margin-left: 20px"</span>&gt;</span></span><br><span class="line">This is a paragraph</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"url"</span>&gt;</span>Link text<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--链接不一定是网页，也可以是图片等等--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--使链接在新窗口打开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--定义锚点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--本文档其他位置可以创建访问锚点的链接,适用于pdf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://....#xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--其他界面创建访问该锚点的链接--&gt;</span></span><br></pre></td></tr></table></figure><p>图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--alt在图片未加载的时候显示，无闭合标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">"loading..."</span> <span class="attr">alion</span>=<span class="string">"left"</span> <span class="attr">width</span>=<span class="string">""</span> <span class="attr">height</span>=<span class="string">""</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--还可用&lt;a&gt;包裹图片制作图片链接--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--还可利用&lt;map&gt;,&lt;area&gt;来定义图像地图--&gt;</span></span><br></pre></td></tr></table></figure><p><em>time：2020/04/09</em></p><p>表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--border表示表格边框的厚度 cellpadding表示边界与单元内容之间的距离 cellspacing规定单元格之间的距离--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我的标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span> <span class="comment">&lt;!--表格标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>Heading<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="comment">&lt;!--表头 加粗居中 横跨两行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>Another Heading<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="comment">&lt;!--横跨两列--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!--避免空单元格，会使边框无法显示，使用空格占位--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格中每个单元格都可设置颜色、背景、对齐方式、frame属性等等--&gt;</span></span><br></pre></td></tr></table></figure><p>列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--无序列表 type代表小圆点的类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"disc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表 start设置开始序号 type代表序号的类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"50"</span> <span class="attr">type</span>=<span class="string">"I"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--列表都可以嵌套使用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义列表 dt标题 dd内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>计算机<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>用来计算的仪器 ... ...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>显示器<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>以视觉方式显示信息的装置 ... ...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--块元素和内联元素区别就是 块元素会以新行来开始 而内联元素则不会--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--块级：&lt;h1&gt;, &lt;p&gt;, &lt;ul&gt;, &lt;table&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内联级：&lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div&gt;块级元素 和CSS一起使用对大块地方进行样式设计--&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;span&gt;内联级元素 和CSS一起使用对文本进行样式设计--&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对 HTML 进行分类（设置类），使我们能够为元素的类定义 CSS 样式。</span></span><br><span class="line"><span class="comment">为相同的类设置相同的样式，或者为不同的类设置不同的样式。--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.cities</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cities"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">London is the capital city of England. </span><br><span class="line">It is the most populous city in the United Kingdom, </span><br><span class="line">with a metropolitan area of over 13 million inhabitants.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;div&gt; 元素常用作布局工具，因为能够轻松地通过 CSS 对其进行定位。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--DIV的ID属性和CLASS属性的区别--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id对应css是用样式选择符“#”（井号）class对应css是用样式选择符“.”(英文半角输入句号)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id属性，只能被一个元素调用（以“#”选择符命名CSS样式在一个页面只能使用调用一次）</span></span><br><span class="line"><span class="comment">class类标记，可以用于被多个元素调用(以“.”选择符命名样式可以一个页面使用多次)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--一个代表身份证，一个代表衣服,下方是实例--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#header</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#nav</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>:<span class="selector-id">#eeeeee</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;      </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#section</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:350px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span>;  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>City Gallery<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">London<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Paris<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Tokyo<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">London is the capital city of England. It is the most populous city in the United Kingdom,</span><br><span class="line">with a metropolitan area of over 13 million inhabitants.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">Standing on the River Thames, London has been a major settlement for two millennia,</span><br><span class="line">its history going back to its founding by the Romans, who named it Londinium.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">Copyright ? W3Schools.com</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>time:2020/04/10</em></p><p>框架</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--框架结构标签&lt;frameset&gt;,rows和cols的值规定了每个框架所占的面积--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--框架标签&lt;frame&gt;,每个frame中设置一个html文档--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--假如一个框架有可见边框，用户可以拖动边框来改变它的大小。为了避免这种情况发生，可以在 &lt;frame&gt; 标签中加入：noresize="noresize"。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--重要提示：不能将 &lt;body&gt;&lt;/body&gt; 标签与 &lt;frameset&gt;&lt;/frameset&gt; 标签同时使用！不过，假如你添加包含一段文本的 &lt;noframes&gt; 标签，就必须将这段文字嵌套于 &lt;body&gt;&lt;/body&gt; 标签内。（在下面的第一个实例中，可以查看它是如何实现的。）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里都是简要介绍，具体的应用现在还无法完全掌握--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末题解（部分）</title>
      <link href="/2019/12/22/%E6%9C%9F%E6%9C%AB%E9%A2%98%E8%A7%A3_%E9%83%A8%E5%88%86/"/>
      <url>/2019/12/22/%E6%9C%9F%E6%9C%AB%E9%A2%98%E8%A7%A3_%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在这里给大家提供9道题的题解，都是比较容易想到的题(其他题也不会啊)，希望有需要的人能够从中得到一些启发。可能有些会存在一些小错误因为是我自己通过记忆来描述的，希望理解。</p><h2 id="第一次算法期末考试"><a href="#第一次算法期末考试" class="headerlink" title="第一次算法期末考试"></a>第一次算法期末考试</h2><h2 id="A-水二分查找"><a href="#A-水二分查找" class="headerlink" title="A 水二分查找"></a>A 水二分查找</h2><p>输入:多组输入、n、n个数(按顺序排好的)、q、m(q次查询，看n个数中是否存在与m相同的数)</p><p>输出:存在输出Yes，不存在输出No，对于每个q输出q行</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这n个数的数据范围应该是在10<sup>6</sup>内的，所以可以很自然的想到直接用桶装即可解决，而不需要二分查找，具体二分查找这里就不给代码了，因为后面第二次的A题会给出的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000005</span>],num[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q,m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            num[a[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">            <span class="keyword">if</span>(num[m]) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-KMP"><a href="#B-KMP" class="headerlink" title="B KMP"></a>B KMP</h2><p>输入:多组输入、两个字符串s、t</p><p>输出:t在s中出现的所有位置，用空格隔开、输出t对应得next数组</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>显然是直接套用KMP即可，因为要输出所有位置，所以需要把判断条件放在while循环内部，具体可以看代码就很清楚了。next数组则一样非常简单即可求出。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> next[MAX];</span><br><span class="line"><span class="keyword">char</span> s[MAX],t[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">int</span> next[],<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">-1</span>;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">while</span>(j&lt;lent)&#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">-1</span>||t[j]==t[k])&#123;</span><br><span class="line">j++;</span><br><span class="line">k++;</span><br><span class="line">next[j]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k=next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line">getnext(next,t);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">while</span>(i&lt;lens)&#123;</span><br><span class="line"><span class="keyword">while</span>(j!=<span class="number">-1</span>&amp;&amp;t[j]!=s[i])&#123;</span><br><span class="line">j=next[j];</span><br><span class="line">&#125;</span><br><span class="line">i++;j++;</span><br><span class="line"><span class="keyword">if</span>(j==lent)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i-j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s,t))&#123;</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line">KMP(s,t);</span><br><span class="line"><span class="keyword">int</span> lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lent;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,next[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-线段"><a href="#C-线段" class="headerlink" title="C 线段"></a>C 线段</h2><p>这道题具体的输入输出不太记得了，大致意思应该是输入n条线段的左右坐标(在数轴上)，然后判断最多有多少条线段满足不和别的线段相交并输出最多的数量，并且端点重合可以认为不相交。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>因为有助教给的提示，这道题就很简单了，就是对这些线段的右端点进行排序，然后通过贪心来从左到右遍历即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>可能输入输出有些问题，大家能明白大体就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">&#125;a[MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">    c=*(struct node*)a;</span><br><span class="line">    d=*(struct node*)b;</span><br><span class="line">    <span class="keyword">if</span>(c.r!=d.r) <span class="keyword">return</span> c.r-d.r;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> c.l-d.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].l,&amp;a[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(a,n,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].l&gt;=a[k].r)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-字符串"><a href="#D-字符串" class="headerlink" title="D 字符串"></a>D 字符串</h2><p>输入:串t、q、q个串s。然后对t、s进行比较，规则如下</p><ul><li>s和t长度相同，若s和t完全相同，输出myw，否则输出friend</li><li>s比t长度大，若t是s的子串，输出teacher，否则输出senior</li><li>s比t长度小，若s是t的子串，输出child，否则输出dd</li></ul><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>很简单的KMP，直接套板子即可，注意长度相同的时候不需要用KMP，直接strcmp就可</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> next[MAX];</span><br><span class="line"><span class="keyword">char</span> s[MAX],t[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">int</span> next[],<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">-1</span>;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">while</span>(j&lt;lent)&#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">-1</span>||t[j]==t[k])&#123;</span><br><span class="line">j++;</span><br><span class="line">k++;</span><br><span class="line">next[j]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k=next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line">getnext(next,t);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">while</span>(i&lt;lens&amp;&amp;j&lt;lent)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span>||t[j]==s[i])&#123;</span><br><span class="line">i++;j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> j=next[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=lent) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,t);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line"><span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">if</span>(lent==lens)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(s,t)==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"myw\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"friend\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(lens&gt;lent)&#123;</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line"><span class="keyword">if</span>(KMP(s,t)==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"teacher\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"senior\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line"><span class="keyword">if</span>(KMP(t,s)==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"child\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"dd\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-圆"><a href="#G-圆" class="headerlink" title="G 圆"></a>G 圆</h2><p>这道题考试中因为时间问题没能做出来，所以代码的正确性也不确定，有错误希望大家指出来。</p><p>输入:圆心坐标、半径以及两个点的坐标</p><p>输出:两点最近且不穿过圆的距离</p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>首先肯定是两点连线不与圆相交就直接算两点距离，这个怎么判断呢，也不难，圆心到直线的距离与半径比较即可，但是这个距离怎么算比较方便呢，可以通过叉积先算出这两点与圆心围成的三角形面积再除以两点的距离来算得，这样比较好写。然后如果两点连线与圆相交的话，这样怎么算最近距离呢，很容易可以想到是和切线相关，即两点分别对圆作切线然后取两距离较近的切点，两切点之间的弧长加上这两个切点到其原来两个点的距离之和即为所要求的距离了。即下图的线段AA’加上线段BB’加上弧A’B’即可。</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/1.jpg" alt></p><p>然后是算AA’和BB’的问题了，很显然直接用勾股定理还是很容易算出来的，即AO和BO都很容易得到，用勾股定理就能得到AA’和BB’了。最后就是算弧A’B’的问题了，想算弧，显然先算角，即算图中对应得θ角，我的想法是先通过余弦定理算出α角然后知道角AOA’的余弦值，通过数学库的acos即可得到AOA’角，然后同理对于BOB’角，然后用α角减去这两个角就得到了θ角，然后通过周长和θ角求得弧长。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><p>这里就给出一些函数，具体代码就不给了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">2.0</span>*<span class="built_in">asin</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="built_in">point</span> p1,<span class="built_in">point</span> p2)</span></span>&#123;<span class="comment">//求直线两点距离的平方</span></span><br><span class="line">    <span class="keyword">return</span> ((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">xmult</span><span class="params">(<span class="built_in">point</span> p1,<span class="built_in">point</span> p2,<span class="built_in">point</span> p0)</span></span>&#123;<span class="comment">//叉积</span></span><br><span class="line"><span class="keyword">return</span> (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="built_in">point</span> p1,<span class="built_in">point</span> p2,<span class="built_in">point</span> p3)</span></span>&#123;<span class="comment">//三角形面积</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(xmult(p1,p2,p3))/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">alpha</span><span class="params">(<span class="built_in">point</span> p1,<span class="built_in">point</span> p2,<span class="built_in">point</span> p0)</span></span>&#123;<span class="comment">//算α角,余弦定理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>((dis(p1,p0)+dis(p2,p0)-dis(p1,p2))/</span><br><span class="line">                (<span class="number">2</span>*<span class="built_in">sqrt</span>(dis(p1,p0))*<span class="built_in">sqrt</span>(dis(p2,p0))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*剩下的运算就是直接调用函数就可完成，这里举一个判断</span></span><br><span class="line"><span class="comment">两点相连的直线是否与圆相交的例子即可，其他不再赘述。*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isx</span><span class="params">(<span class="built_in">point</span> p1,<span class="built_in">point</span> p2,<span class="built_in">point</span> p0,<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">2</span>*area(p1,p2,p0))/<span class="built_in">sqrt</span>(dis(p1,p2)))&gt;r;</span><br><span class="line">&#125;<span class="comment">//为true则说明不相交。</span></span><br></pre></td></tr></table></figure><h2 id="第二次算法期末考试"><a href="#第二次算法期末考试" class="headerlink" title="第二次算法期末考试"></a>第二次算法期末考试</h2><h2 id="A-真二分查找"><a href="#A-真二分查找" class="headerlink" title="A 真二分查找"></a>A 真二分查找</h2><p>输入输出和上文的A大致一样，这里就不再赘述</p><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>由于a[i]数据范围到了10<sup>9</sup>，所以没法投机取巧用桶装了，老老实实写二分，由于这次还要输出第一次出现的位置，因此找到一个位置后还应该向前排查是否存在相同的。其他还是比较好写了。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>,mid,ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(m==a[mid])&#123;</span><br><span class="line">ans=mid;</span><br><span class="line"><span class="keyword">int</span> tmp=mid;</span><br><span class="line"><span class="keyword">if</span>(a[tmp<span class="number">-1</span>]==m)&#123;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">tmp--;</span><br><span class="line">&#125;<span class="keyword">while</span>(a[tmp]==m);</span><br><span class="line">ans=tmp+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m&gt;a[mid]) l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans!=<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"Yes %d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>题目名字忘了，这道题很简单，就是一个优先队列的问题。代码也不给了真的很简单。需要注意的就是优先队列默认是从大到小的，这里需要让它从小到大，即用greater对应得那个初始化定义即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br></pre></td></tr></table></figure><h2 id="C-三角形"><a href="#C-三角形" class="headerlink" title="C 三角形"></a>C 三角形</h2><p>输入:n、n个数、m、l、r(m次查询)</p><p>输出:每次查询是否存在可以构成三角形的三个数，存在输出Yes，否则输出No</p><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>虽然到最后也没能看懂助教的提示，只混了0.5分，但是后来一想还是觉得自己很脑残。。。</p><p>不说废话了，首先肯定暴力是很好想到的，即对[l,r]区间进行排序然后遍历找是否存在i使得a[i]+a[i+1]&gt;a[i+2]即可，存在就break输出Yes，遍历完都没找到就输出No，但是这样明显也会超时没因为排序复杂度是O(nlogn)，那助教给的提示有什么用呢，显然对于斐波拉契数列，a[i]+a[i+1]是等于a[i+2]的，即是三角形存在的最差情况，即这个数列永远不可能存在三个数组成三角形，但是这个数列在i&gt;50后会爆int，由于我们的数据是在int范围内的，所以这个数列在i&gt;50后是肯定存在三个数能组成三角形的，因为a[50]+a[51]肯定比任何其他int内的数都大，所以肯定存在了。斐波拉契这个最坏情况在i&gt;50后都一定存在三个数能组成三角形了，那对于一个普通的序列，那就更是这样了，所以对于所有r-l&gt;=50的查询我们就直接认为它一定存在三个数能组成三角形了，&lt;50的情况则用暴力即可，时间复杂度也不可能会超了。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>],tmp[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,l,r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        tmp[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span>((r-l)&gt;=<span class="number">50</span>) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::sort(tmp+l,tmp+r+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r<span class="number">-2</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp[i]+tmp[i+<span class="number">1</span>]&gt;tmp[i+<span class="number">2</span>])&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++) tmp[i]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-k进制a-b"><a href="#E-k进制a-b" class="headerlink" title="E k进制a*b"></a>E k进制a*b</h2><p>输入:t组数据，k、a、b</p><p>输出:每组数据输出k进制的a*b的结果</p><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>一看数据是10<sup>5</sup>，肯定不是普通的乘法模拟了，直接就是FFT，套板子即可，k进制的问题就直接在最后还原的时候处理即可，很简单。不过y1s1，板子真的要敲很久。。。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000005</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="number">3.1415926535</span>;</span><br><span class="line"><span class="keyword">char</span> s1[N&gt;&gt;<span class="number">1</span>],s2[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">double</span> rea[N],ina[N],reb[N],inb[N];</span><br><span class="line"><span class="keyword">int</span> ans[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">double</span> *x,<span class="keyword">double</span> *y)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> t=*x;</span><br><span class="line">*x=*y;</span><br><span class="line">*y=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rev</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">ans&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">ans|=(x&amp;<span class="number">1</span>);</span><br><span class="line">x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">double</span> *reA,<span class="keyword">double</span> *inA,<span class="keyword">int</span> n,<span class="keyword">bool</span> flag)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">double</span> lgn=<span class="built_in">log</span>((<span class="keyword">double</span>)n)/<span class="built_in">log</span>((<span class="keyword">double</span>)<span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j=Rev(i,lgn);</span><br><span class="line"><span class="keyword">if</span>(j&gt;i)&#123;</span><br><span class="line">Swap(&amp;reA[i],&amp;reA[j]);</span><br><span class="line">Swap(&amp;inA[i],&amp;inA[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(s=<span class="number">1</span>;s&lt;=lgn;s++)&#123;</span><br><span class="line"><span class="keyword">int</span> m=(<span class="number">1</span>&lt;&lt;s);</span><br><span class="line"><span class="keyword">double</span> reWm=<span class="built_in">cos</span>(<span class="number">2</span>*pi/m),inWm=<span class="built_in">sin</span>(<span class="number">2</span>*pi/m);</span><br><span class="line"><span class="keyword">if</span>(flag) inWm=-inWm;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k+=m)&#123;</span><br><span class="line"><span class="keyword">double</span> reW=<span class="number">1.0</span>,inW=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m/<span class="number">2</span>;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> tag=k+j+m/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> reT=reW*reA[tag]-inW*inA[tag];</span><br><span class="line"><span class="keyword">double</span> inT=reW*inA[tag]+inW*reA[tag];</span><br><span class="line"><span class="keyword">double</span> reU=reA[k+j],inU=inA[k+j];</span><br><span class="line">reA[k+j]=reU+reT;</span><br><span class="line">inA[k+j]=inU+inT;</span><br><span class="line">reA[tag]=reU-reT;</span><br><span class="line">inA[tag]=inU-inT;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">rew_t</span>=reW*reWm-inW*inWm;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">inw_t</span>=reW*inWm+inW*reWm;</span><br><span class="line">reW=<span class="keyword">rew_t</span>;</span><br><span class="line">inW=<span class="keyword">inw_t</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">reA[i]/=n;</span><br><span class="line">inA[i]/=n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2);</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"><span class="built_in">memset</span>(rea,<span class="number">0</span>,<span class="keyword">sizeof</span>(rea));</span><br><span class="line"><span class="built_in">memset</span>(reb,<span class="number">0</span>,<span class="keyword">sizeof</span>(reb));</span><br><span class="line"><span class="built_in">memset</span>(ina,<span class="number">0</span>,<span class="keyword">sizeof</span>(ina));</span><br><span class="line"><span class="built_in">memset</span>(inb,<span class="number">0</span>,<span class="keyword">sizeof</span>(inb));</span><br><span class="line"><span class="keyword">int</span> i,lent,len=<span class="number">1</span>,len1,len2;</span><br><span class="line">len1=<span class="built_in">strlen</span>(s1),len2=<span class="built_in">strlen</span>(s2);</span><br><span class="line">lent=(len1&gt;len2?len1:len2);</span><br><span class="line"><span class="keyword">while</span>(len&lt;lent) len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;len1) rea[i]=(<span class="keyword">double</span>)s1[len1-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span>(i&lt;len2) reb[i]=(<span class="keyword">double</span>)s2[len2-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">ina[i]=inb[i]=<span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line">FFT(rea,ina,len,<span class="number">0</span>);</span><br><span class="line">FFT(reb,inb,len,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> rec=rea[i]*reb[i]-ina[i]*inb[i];</span><br><span class="line"><span class="keyword">double</span> inc=rea[i]*inb[i]+ina[i]*reb[i];</span><br><span class="line">rea[i]=rec;ina[i]=inc;</span><br><span class="line">&#125;</span><br><span class="line">FFT(rea,ina,len,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">ans[i]=(<span class="keyword">int</span>)(rea[i]+<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">ans[i+<span class="number">1</span>]+=ans[i]/k;</span><br><span class="line">ans[i]%=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len_ans=len1+len2+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(ans[len_ans]==<span class="number">0</span>&amp;&amp;len_ans&gt;<span class="number">0</span>) len_ans--;</span><br><span class="line"><span class="keyword">for</span>(i=len_ans;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong><em>上述所有如有谬误请一定指出，以便快速修改防止误导他人。</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 综合题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解篇-C6</title>
      <link href="/2019/11/30/%E9%A2%98%E8%A7%A3%E7%AF%87-C6/"/>
      <url>/2019/11/30/%E9%A2%98%E8%A7%A3%E7%AF%87-C6/</url>
      
        <content type="html"><![CDATA[<p><em>本文图片可能有时加载不出来，主要github不支持数学公式，我就只能放图，但是github的图片也功能经常出现问题，所以大家体谅一下</em></p><h2 id="A-A-B"><a href="#A-A-B" class="headerlink" title="A-A*B"></a>A-A*B</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>计算A*B</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>多组数据输入</p><p>两行两个大整数A和B，A和B保证小于等于50000位。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>每组数据输出一行，A*B的值</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12345678987654321 98765432123456789</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1219326320073159566072245112635269</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>可能有负数哦</p><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先如果大家有上课听讲了一丢丢并且下课很认真找过板子的话，肯定还是很容易找到FFT的板子的，这样就只用改负号了，如果没有并且想看下分析的可以往下阅读，当然可以直接看代码快乐AC。</p><p>首先我们如果用普通乘法采用竖式计算的方法的话时间复杂度为O(n<sup>2</sup>)，肯定是过不了的，所以我们采用FFT算法的话，我们可以降到O(nlogn)的复杂度，就可以随意过了。步入正题，说清楚这个板子不太容易。首先是多项式的两种表示方法——系数表示和点值表示。首先我们常见的多项式都是这样的A=a<sub>0</sub>+a<sub>1</sub>x+a<sub>2</sub>x<sup>2</sup>+……+a<sub>n-1</sub>x<sup>n-1</sup>，然后系数表示法就是用一个n维向量来表示A={a<sub>0</sub>,a<sub>1</sub>,…a<sub>n-1</sub>}，这样肯定能一一对应的表示多项式；然后是点值表示法，我们只用确定n个点x<sub>i</sub>和其对应的A，就肯定可以反推出A的多项式表达，所以点值表示法就是由n个点组成的{(0,A(0)),(1,A(1)),…,(n-1,A(n-1))}，这n个点可以随机取，并且该表示肯定也可以一一对应的表示多项式的，然后我们表示出A和B之后想要求出C，那C的点值表达肯定就是从A和B中取2n个点乘起来，然后也能得到点值表达，但是时间复杂度为O(n<sup>2</sup>)这样肯定不行。我们下面要做的就是把多项式从系数表达转换为点值表达，然后再转换回去，这些过程的时间复杂度都是低于O(nlogn)的。</p><p>然后我们就说一下复数的知识，首先任何复数z都能表示成为一个向量z=r(cosθ+isinθ)，其中r为z的模长，θ为向量与x轴的夹角，称为幅角。根据欧拉公式：e<sup>iθ</sup>=cosθ+isinθ，所以z=r*e<sup>iθ</sup>，所以可以推出(cosθ+isinθ)<sup>α</sup>=(cosαθ+isinαθ) ，这就是棣莫弗公式。然后是在方程x<sup>n</sup>=1中，满足这个方程的解一共有n个，这n个解构成了1的n次单位根。并且这n个根中至少存在一个根w<sub>n</sub>使得w<sub>n</sub>的1~n次方刚好就对应这些n次单位根，这样的w<sub>n</sub>就称为本原根，即这些n次单位根可以表示为w<sub>n</sub><sup>0</sup>,w<sub>n</sub><sup>1</sup>,w<sub>n</sub><sup>2</sup>,…,w<sub>n</sub><sup>n-1</sup>，并且这些数的n次方都为1，因此由棣莫弗公式我们可以得到一个通用(本原根可能不止一个)本原根w<sub>n</sub>= cos(2π/n)+i*sin(2π/n)。</p><p>然后介绍DFT(离散傅里叶变换)，我们之前所说的点值表示中x<sub>i</sub>的选取是随机的。而DFT的奇妙则是n个点取的就是上文所说的n次单位根。我们的A(x)可以表示为A(x)= ∑<sub>j</sub><sup>n−1</sup>(a<sub>j</sub>∗x<sup>j</sup>)(j从0开始)，然后x取n个单位根，即表示为y<sub>k</sub>=A(w<sub>n</sub><sup>k</sup>)=∑<sub>j</sub><sup>n−1</sup>(a<sub>j</sub>*(w<sub>n</sub><sup>k</sup>)<sup>j</sup>)(j从0开始，0&lt;=k&lt;=n-1)，这个数用y表示的话就是y={y<sub>0</sub>,y<sub>1</sub>,y<sub>2</sub>, … ,y<sub>n-1</sub>}。所以我们完成了从系数表示到点值表示转化的过程，只是这里的时间复杂度太高，我们不能采用。</p><p>然后我们再说FFT(快速傅里叶变换)，FFT本质也是把多项式的系数表达转换为点值表达，只不过时间复杂度更低。首先构造两个式子(A右上角那个0和1不是指数的意思，只是一个标号)：</p><ul><li><p>A<sup>0</sup>(x)=a<sub>0</sub>+a<sub>2</sub>x+a<sub>4</sub>x<sup>2</sup>+…+a<sub>n-2</sub>x<sup>n/2-1</sup></p></li><li><p>A<sup>1</sup>(x)=a<sub>1</sub>+a<sub>3</sub>x+a<sub>5</sub>x<sup>2</sup>+…+a<sub>n-1</sub>x<sup>n/2-1</sup></p></li></ul><p>能够知道的是A(x)=A<sup>0</sup>(x<sup>2</sup>)+x*A<sup>1</sup>(x<sup>2</sup>)，所以DFT问题就转化为了A<sup>0</sup>和A<sup>1</sup>在(w<sub>n</sub><sup>0</sup>)<sup>2</sup>,(w<sub>n</sub><sup>1</sup>)<sup>2</sup>,(w<sub>n</sub><sup>2</sup>)<sup>2</sup>,…,(w<sub>n</sub><sup>n-1</sup>)<sup>2</sup>这些点上的求值问题，这样一直分裂下去，就是分治的思想就能解决问题了，并且时间复杂度在O(nlogn)内。</p><p>然后是如何递归的问题，虽然已经找到了分治的方法，但是转化后的问题并不相同，而是多了一个平方。我们的处理方法还是借用棣莫弗公式，转化后即得到w<sub>αn</sub><sup>αk</sup>=w<sub>n</sub><sup>k</sup>，所以问题里的(w<sub>n</sub><sup>0</sup>)<sup>2</sup>,(w<sub>n</sub><sup>1</sup>)<sup>2</sup>,(w<sub>n</sub><sup>2</sup>)<sup>2</sup>,…,(w<sub>n</sub><sup>n-1</sup>)<sup>2</sup>就转化为了w<sub>n/2</sub><sup>0</sup>,w<sub>n/2</sub><sup>1</sup>,w<sub>n/2</sub><sup>2</sup>,…,w<sub>n/2</sub><sup>n-1</sup>，所以只要每次处理子问题的时候替换一下本原根，就让子问题和原问题完全一样了。由于在口头上说不是那么容易理解，下面举一个n=4的例子：</p><p>y<sub>0</sub>=A(w<sub>4</sub><sup>0</sup>)=A<sup>0</sup>((w<sub>4</sub><sup>0</sup>)<sup>2</sup>)+w<sub>4</sub><sup>0</sup>*A<sup>1</sup>((w<sub>4</sub><sup>0</sup>)<sup>2</sup>)，y<sub>1</sub>=A(w<sub>4</sub><sup>1</sup>)=A<sup>0</sup>((w<sub>4</sub><sup>1</sup>)<sup>2</sup>)+w<sub>4</sub><sup>1</sup>*A<sup>1</sup>((w<sub>4</sub><sup>1</sup>)<sup>2</sup>)；</p><p>y<sub>2</sub>=A(w<sub>4</sub><sup>2</sup>)=A<sup>0</sup>((w<sub>4</sub><sup>2</sup>)<sup>2</sup>)+w<sub>4</sub><sup>2</sup>*A<sup>1</sup>((w<sub>4</sub><sup>2</sup>)<sup>2</sup>)，y<sub>3</sub>=A(w<sub>4</sub><sup>3</sup>)=A<sup>0</sup>((w<sub>4</sub><sup>3</sup>)<sup>2</sup>)+w<sub>4</sub><sup>3</sup>*A<sup>1</sup>((w<sub>4</sub><sup>3</sup>)<sup>2</sup>)；</p><p>根据上文提到的借用棣莫弗公式从而转换的方法，从而得到：</p><p>y<sub>0</sub>=A(w<sub>4</sub><sup>0</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>0</sup>)+w<sub>4</sub><sup>0</sup>*A<sup>1</sup>(w<sub>2</sub><sup>0</sup>)，y<sub>1</sub>=A(w<sub>4</sub><sup>1</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>1</sup>)+w<sub>4</sub><sup>1</sup>*A<sup>1</sup>(w<sub>2</sub><sup>1</sup>)；</p><p>y<sub>2</sub>=A(w<sub>4</sub><sup>2</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>2</sup>)+w<sub>4</sub><sup>2</sup>*A<sup>1</sup>(w<sub>2</sub><sup>2</sup>)，y<sub>3</sub>=A(w<sub>4</sub><sup>3</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>3</sup>)+w<sub>4</sub><sup>3</sup>*A<sup>1</sup>(w<sub>2</sub><sup>3</sup>)；</p><p>再经过一些简单的公式变换(w<sub>n</sub><sup>k+n/2</sup>=w<sub>n</sub><sup>k</sup>*w<sub>n</sub><sup>n/2</sup>=-w<sub>n</sub><sup>k</sup>(可以想想为何是-1)和w<sub>n</sub><sup>k+n</sup>=w<sub>n</sub><sup>k</sup>*w<sub>n</sub><sup>n</sup>=w<sub>n</sub><sup>k</sup>)，得到</p><p>y<sub>0</sub>=A(w<sub>4</sub><sup>0</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>0</sup>)+w<sub>4</sub><sup>0</sup>*A<sup>1</sup>(w<sub>2</sub><sup>0</sup>)，y<sub>1</sub>=A(w<sub>4</sub><sup>1</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>1</sup>)+w<sub>4</sub><sup>1</sup>*A<sup>1</sup>(w<sub>2</sub><sup>1</sup>)；</p><p>y<sub>2</sub>=A(w<sub>4</sub><sup>2</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>0</sup>)-w<sub>4</sub><sup>0</sup>*A<sup>1</sup>(w<sub>2</sub><sup>0</sup>)，y<sub>3</sub>=A(w<sub>4</sub><sup>3</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>1</sup>)-w<sub>4</sub><sup>1</sup>*A<sup>1</sup>(w<sub>2</sub><sup>1</sup>)；</p><p>然后这样就能很简单快速的得出y的点值表达{y<sub>0</sub>,y<sub>1</sub>,y<sub>2</sub>, … ,y<sub>n-1</sub>}啦，时间也是O(nlogn)。</p><p>但是我们求出了所需要得结果C多项式的点值表达后，怎么算出C的系数表达呢。我们先构造一个范德蒙矩阵V(有w的那个矩阵)如下</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog2/%E9%A2%98%E8%A7%A3C6-1.jpg" alt></p><p>这里我们可以记作y=V*a，同时观察这个V其中的元素，对于第k行第j列的元素，它的值为w<sub>n</sub><sup>kj</sup>。我们FFT所求即求出了V，我们现在要把点值表达变回系数表达，也就是FFT的逆过程。对于这个也就是求a，转换一下上方的式子就是a=V<sup>-1</sup>*y，而对于V<sup>-1</sup>这个矩阵来说，它第j行第k列的元素，则是w<sub>n</sub><sup>-kj</sup>/n(这里就不证明了，大家可以自己查阅)。</p><p>然后我们再考虑I<sub>n</sub>=V*V<sup>-1</sup>这个矩阵，考虑该矩阵中第j行第j’列的元素：</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog2/%E9%A2%98%E8%A7%A3C6-2.jpg" alt></p><p>然后我们还需要一个引理：对任意大于等于1的整数n和不能被n整除的非负整数k，有：(证明也在下方)</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog2/%E9%A2%98%E8%A7%A3C6-3.jpg" alt></p><p>也就是一个等比数列求和的过程，然后我们就能发现上面考虑的I<sub>n</sub>矩阵中的j行j‘列元素在j!=j’的时候为0，相等的时候为1。所以我们就能根据a=V<sup>-1</sup>*y得到以下式子：(下方也放上上文求出的y的式子)</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog2/%E9%A2%98%E8%A7%A3C6-4.jpg" alt></p><p>所以我们在计算逆FFT时，就把a和y的位置互换，再用w<sub>n</sub><sup>-1</sup>代替w<sub>n</sub><sup>1</sup>，并把结果除以n就可以了。时间复杂度也是一样的，通过FFT和逆FFT的运用就能把 次数界为 n 的多项式在其系数表示与点值表示之间来回进行转换。 从而算出大数乘法了。</p><hr><p>好了上面就是纯数学的推导部分，阅读起来应该不是很难(毕竟我这个cj都能理解)，然后再讲讲怎么具体应用于大数乘法。其实也很简单，首先运用FFT将A和B的系数表示转换为点值表示，然后将他们相乘得到C的点值表示，最后通过逆FFT将C转换为系数表示，输出答案就okkk了。然后先放代码吧。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 150010</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.141592653</span>;</span><br><span class="line"><span class="keyword">char</span> s1[N&gt;&gt;<span class="number">1</span>], s2[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">double</span> rea[N], ina[N], reb[N], inb[N];</span><br><span class="line"><span class="keyword">int</span> ans[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">double</span> *x, <span class="keyword">double</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rev</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        ans&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        ans |= (x &amp; <span class="number">1</span>);</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;<span class="comment">//二进制的反转x-&gt;ans</span></span><br><span class="line"><span class="comment">//作用就是把这n个数分成我们想要的lgn个部分，且每个部分仅有两个待处理的，然后再处理</span></span><br><span class="line"><span class="comment">//不太明白的可以看看网上关于FFT中的二进制的翻转问题的博客啥的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">double</span> *reA, <span class="keyword">double</span> *inA, <span class="keyword">int</span> n, <span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">double</span> lgn = <span class="built_in">log</span>((<span class="keyword">double</span>)n) / <span class="built_in">log</span>((<span class="keyword">double</span>)<span class="number">2</span>);<span class="comment">//定义log(2)(n),也就是代表分裂次数</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = Rev(i, lgn);</span><br><span class="line">        <span class="keyword">if</span>(j &gt; i)&#123;</span><br><span class="line">            Swap(&amp;reA[i], &amp;reA[j]);</span><br><span class="line">            Swap(&amp;inA[i], &amp;inA[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(s = <span class="number">1</span>; s &lt;= lgn; s++)&#123;<span class="comment">//共进行lgn次</span></span><br><span class="line">        <span class="keyword">int</span> m = (<span class="number">1</span>&lt;&lt;s);</span><br><span class="line">        <span class="keyword">double</span> reWm = <span class="built_in">cos</span>(<span class="number">2</span>*pi/m), inWm = <span class="built_in">sin</span>(<span class="number">2</span>*pi/m);<span class="comment">//本原根</span></span><br><span class="line">        <span class="keyword">if</span>(flag) inWm = -inWm;<span class="comment">//对C来说就要转换为负的</span></span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; n; k += m)&#123;</span><br><span class="line">            <span class="keyword">double</span> reW = <span class="number">1.0</span>, inW = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m / <span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tag = k+j+m/<span class="number">2</span>;<span class="comment">//可以对照上文的公式看</span></span><br><span class="line">                <span class="keyword">double</span> reT = reW * reA[tag] - inW * inA[tag];</span><br><span class="line">                <span class="keyword">double</span> inT = reW * inA[tag] + inW * reA[tag];</span><br><span class="line">                <span class="keyword">double</span> reU = reA[k+j], inU = inA[k+j];</span><br><span class="line">                reA[k+j] = reU + reT;</span><br><span class="line">                inA[k+j] = inU + inT;</span><br><span class="line">                reA[tag] = reU - reT;</span><br><span class="line">                inA[tag] = inU - inT;</span><br><span class="line">                <span class="keyword">double</span> <span class="keyword">rew_t</span> = reW * reWm - inW * inWm; </span><br><span class="line">                <span class="keyword">double</span> <span class="keyword">inw_t</span> = reW * inWm + inW * reWm; <span class="comment">//这里实现迭代</span></span><br><span class="line">                reW = <span class="keyword">rew_t</span>;</span><br><span class="line">                inW = <span class="keyword">inw_t</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;<span class="comment">//对C来说需要除以n</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            reA[i] /= n;</span><br><span class="line">            inA[i] /= n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s1, s2))&#123; </span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span> , <span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="built_in">memset</span>(rea, <span class="number">0</span> , <span class="keyword">sizeof</span>(rea));</span><br><span class="line">        <span class="built_in">memset</span>(ina, <span class="number">0</span> , <span class="keyword">sizeof</span>(ina));</span><br><span class="line">        <span class="built_in">memset</span>(reb, <span class="number">0</span> , <span class="keyword">sizeof</span>(reb));</span><br><span class="line">        <span class="built_in">memset</span>(inb, <span class="number">0</span> , <span class="keyword">sizeof</span>(inb));<span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">int</span> i, lent, len = <span class="number">1</span>, len1, len2;</span><br><span class="line">        len1 = <span class="built_in">strlen</span>(s1);</span><br><span class="line">        len2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line">        <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'-'</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line">        s1[i]=s1[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">len1--;</span><br><span class="line">flag^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s2[<span class="number">0</span>]==<span class="string">'-'</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len2;i++)&#123;</span><br><span class="line">        s2[i]=s2[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">len2--;</span><br><span class="line">flag^=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//符号的判断</span></span><br><span class="line">        lent = (len1 &gt; len2 ? len1 : len2);</span><br><span class="line">        <span class="keyword">while</span>(len &lt; lent) len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;<span class="comment">// 保证长度为2的幂次，才能逐渐二分</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len1) rea[i] = (<span class="keyword">double</span>)s1[len1-i<span class="number">-1</span>] - <span class="string">'0'</span>;<span class="comment">//将数组s1反转，并保存为double</span></span><br><span class="line">            <span class="keyword">if</span>(i &lt; len2) reb[i] = (<span class="keyword">double</span>)s2[len2-i<span class="number">-1</span>] - <span class="string">'0'</span>;<span class="comment">//将数组s2反转，并保存为double</span></span><br><span class="line">            ina[i] = inb[i] = <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        FFT(rea, ina, len, <span class="number">0</span>);<span class="comment">//对A进行FFT</span></span><br><span class="line">        FFT(reb, inb, len, <span class="number">0</span>);<span class="comment">//对B进行FFT</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> rec = rea[i] * reb[i] - ina[i] * inb[i];</span><br><span class="line">            <span class="keyword">double</span> inc = rea[i] * inb[i] + ina[i] * reb[i];</span><br><span class="line">            rea[i] = rec; ina[i] = inc;</span><br><span class="line">        &#125;<span class="comment">//获得C的点值表达</span></span><br><span class="line">        FFT(rea, ina, len, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            ans[i] = (<span class="keyword">int</span>)(rea[i] + <span class="number">0.4</span>);<span class="comment">//舍入</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            ans[i+<span class="number">1</span>] += ans[i] / <span class="number">10</span>;</span><br><span class="line">            ans[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;<span class="comment">//消除进位</span></span><br><span class="line">        <span class="keyword">int</span> len_ans = len1 + len2 + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(ans[len_ans] == <span class="number">0</span> &amp;&amp; len_ans &gt; <span class="number">0</span>) len_ans--;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = len_ans; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文的代码我几乎都标注了，应该能够比较容易的看懂了</p><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="B-定向越野"><a href="#B-定向越野" class="headerlink" title="B-定向越野"></a>B-定向越野</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>为了锻炼身体，某楠参加了一个定向越野比赛，定向越野是利用地图和指北针导航的一项竞技运动，通常由起点出发，在多个点标处打卡，再返回终点。但是非酋某楠的指北针居然是坏的，所以只能靠记住来时的方向和各个点的坐标来判断下一步。现在希望你能够帮忙判断下一步是左转还是右转。对于每次转弯输出一个字符，左转输出’L’，右转输出’R’，直走不输出。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>多组数据输入</p><p>每组数据第一行一个数n，n表示按顺序经历的点的数量，包括起点、各个点标以及终点。1&lt;n&lt;10000</p><p>接下来n行每行两个整数为点的坐标，均在INT范围内。</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>每组数据一行，每次转弯的方向’L’或’R’，中间用空格分隔</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 5 </span><br><span class="line"> 0 0</span><br><span class="line">-1 1</span><br><span class="line"> 0 1</span><br><span class="line">-1 2</span><br><span class="line"> 0 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R L R</span><br></pre></td></tr></table></figure><hr><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>很明显的一道计算几何题，用叉积判断方向就可，需要注意的是如果走直线是不输出的。还有一个就是可能long long会超，如果先算乘法再算减法的话(就是把叉积的式子展开了分别算)，就需要用double来存，如果是先减再乘，longlong就能随意过了。</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">10005</span>],y[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(((<span class="keyword">long</span> <span class="keyword">long</span>)(x[i]-x[i<span class="number">-1</span>])*(y[i+<span class="number">1</span>]-y[i])-(<span class="keyword">long</span> <span class="keyword">long</span>)(x[i+<span class="number">1</span>]-x[i])*(y[i]-y[i<span class="number">-1</span>]))&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"L "</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(((<span class="keyword">long</span> <span class="keyword">long</span>)(x[i]-x[i<span class="number">-1</span>])*(y[i+<span class="number">1</span>]-y[i])-(<span class="keyword">long</span> <span class="keyword">long</span>)(x[i+<span class="number">1</span>]-x[i])*(y[i]-y[i<span class="number">-1</span>]))&lt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"R "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="C-危机合约"><a href="#C-危机合约" class="headerlink" title="C-危机合约"></a>C-危机合约</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>一天起床，你突然发现自己成为了整合运动的一员，作为火刀哥的手下前去探路。由于危机合约的特殊性，博士只能布置没有阻挡数的干员，每路过一个干员就会受到一次他的攻击，你的目的就是在不被干掉的情况下，从位于最左第一列某点的红色出生点走到位于最右某点的蓝色目的地。作为一个普通宿主士兵，你只能走向右上，右，右下三个格子。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>第一行n和m，表示地图有n行m列 (n,m&lt;100)</p><p>第二行h，a和b，h表示你现有的血量，红色出生点在第0列a行，蓝色目的地在第m+1列b行(1&lt;=a,b&lt;=n)</p><p>接下来n行，每行m列，其中’*’表示这个点不能走，数字表示这个点上干员对你的伤害，范围0到9</p><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>如果能够活着走到目的地，则输出剩余血量</p><p>如果已经死亡，则输出”doctor win”</p><h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 5</span><br><span class="line">20 1 3</span><br><span class="line">0 1 2 * 4</span><br><span class="line">2 3 * 3 5</span><br><span class="line">6 1 2 * 4</span><br></pre></td></tr></table></figure><h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><hr><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>首先应该能看出这是一道dp的题目，所以就先分析怎么样dp吧。首先本人先想到的是对当前的血量进行dp(好像和大部分盆友想法不太一样)，<code>dp[i][j]</code>即代表在i行j列处的血量，并且还没有扣除当前应该扣除的血量，即已经走到了i行j列，只是还没扣血(不太理解的可以从代码来理解)，这样dp的好处呢就是不用管*格是否走不走得到，反正就往下走，走到*后再往下走就直接把血扣到负数即可。然后转移方程呢，就是走到当前格子的血量等于前一列那三个格子中剩余血量减去需要扣除的血量后最大的。如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]=tmax(dp[i<span class="number">-1</span>][j<span class="number">-1</span>]-<span class="built_in">map</span>[i<span class="number">-1</span>][j<span class="number">-1</span>],dp[i][j<span class="number">-1</span>]-<span class="built_in">map</span>[i][j<span class="number">-1</span>],dp[i+<span class="number">1</span>][j<span class="number">-1</span>]-<span class="built_in">map</span>[i+<span class="number">1</span>][j<span class="number">-1</span>])<span class="comment">//tmax指三者中的最大值</span></span><br></pre></td></tr></table></figure><p>一些需要注意的地方呢就是，首先初始化的问题，*的格子赋值为inf，dp的初始值赋值为-inf，map的初始值赋值为inf，因为要保证第一步走的时候的正确性，然后还要比所给的图多赋值一圈，才能保证在边缘的时候不会走错，然后a点的初始化就是<code>dp[a][0]=h,map[a][0]=-inf</code>，因为赋值都是inf和-inf并且还存在减法，数据的要求也是10<sup>9</sup>，所以把dp和map设置成long long比较安全。最后还有一个很坑的就是读入的问题了，scanf和getchar真的有毒，因为<code>\r\n</code>等诸多问题，所以还是建议用cin比较好。最后我在代码里也加一个其他dp的方法也能ac。</p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll dp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function">ll <span class="title">dmax</span><span class="params">(ll a,ll b,ll c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;=b&amp;&amp;a&gt;=c) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">if</span>(b&gt;=a&amp;&amp;b&gt;=c) <span class="keyword">return</span> b;</span><br><span class="line"><span class="keyword">if</span>(c&gt;=a&amp;&amp;c&gt;=b) <span class="keyword">return</span> c;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">ll <span class="built_in">map</span>[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> h,a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;h,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m+<span class="number">1</span>;j++)&#123;</span><br><span class="line">dp[i][j]=-inf;</span><br><span class="line"><span class="built_in">map</span>[i][j]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[a][<span class="number">0</span>]=h;</span><br><span class="line"><span class="built_in">map</span>[a][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(c!=<span class="string">'*'</span>) <span class="built_in">map</span>[i][j]=c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">map</span>[i][j]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m+<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dp[i][j]=dmax(dp[i<span class="number">-1</span>][j<span class="number">-1</span>]-<span class="built_in">map</span>[i<span class="number">-1</span>][j<span class="number">-1</span>],dp[i][j<span class="number">-1</span>]-<span class="built_in">map</span>[i][j<span class="number">-1</span>],dp[i+<span class="number">1</span>][j<span class="number">-1</span>]-<span class="built_in">map</span>[i+<span class="number">1</span>][j<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*for(int j=1;j&lt;=m+1;j++)&#123;</span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">dp[i][j]=dmin(dp[i-1][j-1],dp[i][j-1],dp[i+1][j-1])+map[i][j];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">    <span class="comment">//这个dp对应的就是减少的生命值，初始化就是反的，并且最后的输出和判断doctor win也有点区别，还有就是求的是最小值，其实两个dp实际上是一样的</span></span><br><span class="line"><span class="keyword">if</span>(dp[b][m+<span class="number">1</span>]&lt;=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"doctor win"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>,dp[b][m+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="D-不NAN的过河"><a href="#D-不NAN的过河" class="headerlink" title="D-不NAN的过河"></a>D-不NAN的过河</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>某楠也要过Zexal过的那条河，通过借助河中间的石砖过到河对岸去，这些石砖以直线排列。河的长度为L，当某楠走到或跨过坐标为L的点时，就算到达了河对岸。但是强迫症的某楠最多只能跨m次，请你计算某楠过河最长的一步最少是多少。注意从岸边迈向石头和从石头迈向岸边也算1步。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>多组数据输入</p><p>每组数据第一行有3个正整数L，n，m，L表示河的宽度，n表示有n个石砖，m表示某楠最多只能跨m步。(1≤L≤10<sup>9</sup>,1≤n≤10<sup>5</sup>,1≤m≤10<sup>5</sup>)</p><p>第二行有n个不同的正整数分别表示这n个石砖在数轴上的位置（所有相邻的整数之间用一个空格隔开。</p><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>每组数据输出一个整数，表示某楠迈的最长一步的最小距离。</p><h3 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2 3</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><hr><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>首先看问题他要求最长一步的最小距离，肯定需要去判断，遍历判断肯定时间不太行，O(n<sup>2</sup>)肯定超了，所以我们就采用二分来枚举即可，时间是绰绰有余的。然后是怎么判断的问题了，便于理解，我们把a[0]设为0，a[n+1]设为L，然后判断的问题，肯定要让每一步跨的最大，所以就是贪心的思想。在遇到一步跨不到的石砖时才记录步数，然后将开始的地方置为当前石砖的前一块也就是<code>a[i-1]</code>，这样需要考虑的就是如果一步跨过了岸边，那它也会将开始的地方置为a[n]，所以最后一步就没有算上，所以我们cnt初始值设为1而不是0。还有一个很重要的就是，他没有说石砖是有序的，所以最开始需要排个序才行(这个bug太恶心)。</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,l,mid;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c,d;</span><br><span class="line">c=*(<span class="keyword">int</span> *)a;</span><br><span class="line">d=*(<span class="keyword">int</span> *)b;</span><br><span class="line"><span class="keyword">return</span> c-d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>,pre=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n+<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]-pre&gt;mid) &#123;</span><br><span class="line">pre=a[i<span class="number">-1</span>];</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(a[i]-pre&gt;mid)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&lt;=m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;n,&amp;m)) &#123;</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">0</span>,a[n+<span class="number">1</span>]=l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125; </span><br><span class="line">qsort(a,n+<span class="number">2</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),cmp);</span><br><span class="line"><span class="keyword">int</span> left=<span class="number">0</span>,right=l,ans;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right) &#123;</span><br><span class="line">mid=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check()) ans=mid,right=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> left=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="E-线段交点"><a href="#E-线段交点" class="headerlink" title="E-线段交点"></a>E-线段交点</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>有两条线段，求线段的交点。</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>多组输入数据</p><p>每组数据两行</p><p>每行两个整数x，y，分别表示一条线段的x坐标，y坐标(−100≤x,y≤100)</p><h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>每组数据输出一行，两个数表示交点的坐标，中间用空格隔开。如果没有交点，或者线段重合，输出<code>none</code></p><h3 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 1</span><br><span class="line">1 0 0 1 </span><br><span class="line">0 0 2 2</span><br><span class="line">1 1 3 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.50 0.50</span><br><span class="line">none</span><br></pre></td></tr></table></figure><hr><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>首先这道题就是一道数学题感觉，需要考虑的情况很多，考虑完全就能过了。步入正题，我们两条直线先设置为AB，CD，交点为O，叉积用cross()表示。首先肯定是判断能否相交，因为我们是根据叉积来判断的，所以相交的情况也会比较多一些。首先先看正常的相交，也就是相交点不在端点处。对应的条件就是cross(AC,AB)和cross(AD,AB)异号并且cross(CA,CD)和cross(CB,CD)异号即可。然后是AB端点和CD重合的情况，对应的条件就是cross(AC,AB)和cross(AD,AB)异号并且cross(CA,CD)和cross(CB,CD)积为0，当然还有相反的情况(CD端点和AB重合，条件就不说了)，然后是重合和平行的情况，即叉积cross(AB,CD)为0，这里面也有一种相交的情况即诸如这种A-&gt;B(C)-&gt;D情况，怎么讨论这种情况呢，如果AB的两个端点均在CD线段上，这肯定是重合，那这个情况怎么判断呢，我用的方法比较笨(应该会有更简便的方法的)，通过AC斜率和AD斜率相等并且A的x、y坐标在C和D的x、y坐标中间，对B也一样，然后就是这种重合情况。然后在这种情况之外如果存在一组端点(A和C及其他情况)重合的情况，则是相交了，这种情况的判断方法我用的也比较笨，即通过判断A是否和C或者D重合，以及B是否和C或者D重合，然后如果重合就说明相交了，并且在这里需要输出，因为正常算交点的方法没法算这种情况，这里输出应该比较容易，存在重合就直接输出坐标就好了。然后其他的情况都是none即可。这就是所有的情况了。前面几种都比较好实现，最后一个情况会麻烦一些(也可能是我的方法比较笨)。</p><p>然后再说一下怎么算交点的问题了。就是通过算出两个三角形ACD,BCD的面积，然后根据其比值求出AO比AB，然后求出向量OA，然后用A的坐标加上OA向量即得到O的坐标了，比较容易理解。</p><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">Point(<span class="keyword">double</span> x=<span class="number">0</span>, <span class="keyword">double</span> y=<span class="number">0</span>):x(x),y(y) &#123;&#125;</span><br><span class="line">Point <span class="keyword">operator</span> + (Point p)&#123;</span><br><span class="line"><span class="keyword">return</span> Point(x+p.x,y+p.y);<span class="comment">//重定义加法，点的加法即坐标相加，也可能是点和向量相加 </span></span><br><span class="line">&#125;</span><br><span class="line">Point <span class="keyword">operator</span> - (Point p)&#123;</span><br><span class="line"><span class="keyword">return</span> Point(x-p.x,y-p.y);<span class="comment">//重定义减法，点的减法即坐标相减 </span></span><br><span class="line">&#125;</span><br><span class="line">Point <span class="keyword">operator</span> * (<span class="keyword">double</span> a)&#123;</span><br><span class="line"><span class="keyword">return</span> Point(a*x,a*y);<span class="comment">//重定义乘法，点乘常数即以坐标乘常数 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">typedef</span> Point Vector;<span class="comment">//因为向量Vector也能用X,Y表示</span></span><br><span class="line"><span class="keyword">int</span> flag; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment</span>&#123;</span> <span class="comment">//Segment 线段</span></span><br><span class="line">Point p1,p2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Vector a, Vector b)</span> </span>&#123;<span class="comment">//向量的外积 </span></span><br><span class="line"><span class="keyword">return</span> a.x*b.y - a.y*b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">crossx</span><span class="params">(Point p1,Point p2,Point q1,Point q2)</span></span>&#123;<span class="comment">//也是外积不过是具体的点之间的 </span></span><br><span class="line"><span class="keyword">return</span> (p1.x-p2.x)*(q1.y-q2.y)-(p1.y-p2.y)*(q1.x-q2.x);<span class="comment">//p1p2 x q1q2 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">issame</span><span class="params">(Point P1,Point P2,Point Q1,Point Q2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>((P1.x==Q1.x&amp;&amp;P1.y==Q1.y)&amp;&amp;(!(P2.x==Q2.x&amp;&amp;P2.y==Q2.y))) &#123; <span class="comment">//P1=Q1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf %lf\n"</span>,P1.x,P1.y);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>((!(P1.x==Q1.x&amp;&amp;P1.y==Q1.y))&amp;&amp;(P2.x==Q2.x&amp;&amp;P2.y==Q2.y)) &#123; <span class="comment">//P2=Q2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf %lf\n"</span>,P2.x,P2.y);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>((P2.x==Q1.x&amp;&amp;P2.y==Q1.y)&amp;&amp;(!(P1.x==Q2.x&amp;&amp;P1.y==Q2.y))) &#123; <span class="comment">//P2=Q1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf %lf\n"</span>,P2.x,P2.y);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>((!(P2.x==Q1.x&amp;&amp;P2.y==Q1.y))&amp;&amp;(P1.x==Q2.x&amp;&amp;P1.y==Q2.y)) &#123; <span class="comment">//P1=Q2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf %lf\n"</span>,P1.x,P1.y);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isch</span><span class="params">(Point P1,Point P2,Point Q1,Point Q2)</span></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="comment">//存在两个端点均与另一线段重合</span></span><br><span class="line">((P2.y-Q1.y)*(Q1.x-P1.x)==(Q1.y-P1.y)*(P2.x-Q1.x)&amp;&amp;(((P1.x&lt;=Q1.x)&amp;&amp;(P2.x&gt;=Q1.x))||((P1.x&gt;=Q1.x)&amp;&amp;(P2.x&lt;=Q1.x)))&amp;&amp;(((P1.y&lt;=Q1.y)&amp;&amp;(P2.y&gt;=Q1.y))||((P1.y&gt;=Q1.y)&amp;&amp;(P2.y&lt;=Q1.y)))&amp;&amp;</span><br><span class="line">(P2.y-Q2.y)*(Q2.x-P1.x)==(Q2.y-P1.y)*(P2.x-Q2.x)&amp;&amp;(((P1.x&lt;=Q2.x)&amp;&amp;(P2.x&gt;=Q2.x))||((P1.x&gt;=Q2.x)&amp;&amp;(P2.x&lt;=Q2.x)))&amp;&amp;(((P1.y&lt;=Q2.y)&amp;&amp;(P2.y&gt;=Q2.y))||((P1.y&gt;=Q2.y)&amp;&amp;(P2.y&lt;=Q2.y))))||</span><br><span class="line">((Q2.y-P1.y)*(P1.x-Q1.x)==(P1.y-Q1.y)*(Q2.x-P1.x)&amp;&amp;(((Q1.x&lt;=P1.x)&amp;&amp;(Q2.x&gt;=P1.x))||((Q1.x&gt;=P1.x)&amp;&amp;(Q2.x&lt;=P1.x)))&amp;&amp;(((Q1.y&lt;=P1.y)&amp;&amp;(Q2.y&gt;=P1.y))||((Q1.y&gt;=P1.y)&amp;&amp;(Q2.y&lt;=P1.y)))&amp;&amp;</span><br><span class="line">(Q2.y-P2.y)*(P2.x-Q1.x)==(P2.y-Q1.y)*(Q2.x-P2.x)&amp;&amp;(((Q1.x&lt;=P2.x)&amp;&amp;(Q2.x&gt;=P2.x))||((Q1.x&gt;=P2.x)&amp;&amp;(Q2.x&lt;=P2.x)))&amp;&amp;(((Q1.y&lt;=P2.y)&amp;&amp;(Q2.y&gt;=P2.y))||((Q1.y&gt;=P2.y)&amp;&amp;(Q2.y&lt;=P2.y))))</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(Point p1,Point p2,Point q1,Point q2)</span></span>&#123;<span class="comment">//判断是否相交 </span></span><br><span class="line"><span class="keyword">if</span>(crossx(p1,q1,p1,p2)*crossx(p1,q2,p1,p2)&lt;<span class="number">0</span>&amp;&amp;crossx(q1,p1,q1,q2)*crossx(q1,p2,q1,q2)&lt;<span class="number">0</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//正常相交 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((crossx(p1,q1,p1,p2)*crossx(p1,q2,p1,p2)&lt;<span class="number">0</span>&amp;&amp;crossx(q1,p1,q1,q2)*crossx(q1,p2,q1,q2)==<span class="number">0</span>)||</span><br><span class="line">(crossx(p1,q1,p1,p2)*crossx(p1,q2,p1,p2)==<span class="number">0</span>&amp;&amp;crossx(q1,p1,q1,q2)*crossx(q1,p2,q1,q2)&lt;<span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//存在一端点在另一条线段上而不是端点处的相交 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(crossx(p1,q1,p1,p2)*crossx(p1,q2,p1,p2)==<span class="number">0</span>&amp;&amp;crossx(q1,p1,q1,q2)*crossx(q1,p2,q1,q2)==<span class="number">0</span>)&#123;<span class="comment">//共线 </span></span><br><span class="line"><span class="keyword">if</span>(isch(p1,p2,q1,q2)) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(issame(p1,p2,q1,q2))&#123;<span class="comment">//存在一组端点重合 </span></span><br><span class="line">flag=<span class="number">1</span>;<span class="comment">//不是正常相交，需要自己算，之后就不算 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">getCrossPoint</span><span class="params">(Segment s1,Segment s2)</span></span>&#123;</span><br><span class="line">Vector base;<span class="comment">//向量</span></span><br><span class="line">base=s2.p2-s2.p1; </span><br><span class="line"><span class="keyword">double</span> d1=<span class="built_in">fabs</span>(cross(base,s1.p1-s2.p1));</span><br><span class="line"><span class="keyword">double</span> d2=<span class="built_in">fabs</span>(cross(base,s1.p2-s2.p1));<span class="comment">//算三角形面积，只是没有除以2 </span></span><br><span class="line"><span class="keyword">double</span> t=d1/(d1+d2);<span class="comment">//面积之比等于线段之比，可理解为t=AO/(AO+BO) </span></span><br><span class="line"><span class="keyword">return</span> s1.p1+(s1.p2-s1.p1)*t;<span class="comment">//通过A点坐标加上向量OA然后求得O点坐标 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Segment s1,s2;</span><br><span class="line">Point p;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;s1.p1.x,&amp;s1.p1.y,&amp;s1.p2.x,&amp;s1.p2.y)) &#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;s2.p1.x,&amp;s2.p1.y,&amp;s2.p2.x,&amp;s2.p2.y);</span><br><span class="line"><span class="keyword">if</span>(!judge(s1.p1,s1.p2,s2.p1,s2.p2)) <span class="built_in">printf</span>(<span class="string">"none\n"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">p=getCrossPoint(s1,s2);<span class="comment">//交点坐标 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf %lf\n"</span>,p.x,p.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="F-直线"><a href="#F-直线" class="headerlink" title="F-直线"></a>F-直线</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>二维平面上有n个黑点m个白点，现在请问是否存在一条直线使得所有的黑点白点分别在直线两侧（黑点都在一侧，白点都在另一侧）。</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h3><p>对于每组数据：</p><p>第一行两个正整数n、m。(1≤n,m≤100)</p><p>接下来n行，每行两个正整数x,y，表示一个黑点的xy坐标(1≤x,y≤1000)</p><p>接下来m行，每行两个正整数x,y，表示一个白点的xy坐标(1≤x,y≤1000)</p><h3 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h3><p>每组数据输出一行，存在输出<code>YES</code>，否则输出<code>NO</code></p><h3 id="输入样例-5"><a href="#输入样例-5" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">100 700</span><br><span class="line">200 200</span><br><span class="line">600 600</span><br><span class="line">500 100</span><br><span class="line">500 300</span><br><span class="line">800 500</span><br><span class="line">3 3</span><br><span class="line">100 300</span><br><span class="line">400 600</span><br><span class="line">400 100</span><br><span class="line">600 400</span><br><span class="line">500 900</span><br><span class="line">300 300</span><br></pre></td></tr></table></figure><h3 id="输出样例-5"><a href="#输出样例-5" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><hr><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>从题目来看可以比较容易可以看出是一道凸包的题目，即黑色点的凸包和白色点的凸包是否存在交点，存在，则不存在题中所说的直线，反之亦然。重点就是如何判断凸包是否相交呢。凸包相交也就分为两种情况，一种是一个凸包的点是否被另一凸包包含，包含并且不是全部的点被包含(需要特判一下)则肯定相交，第二种是两个凸包的边是否相交(比如两个三角形组成六芒星的图，点都不互相包含，但是凸包相交)。需要注意的就是，是否凸包被完全包含，以及凸包的点在另一个凸包的边的上。具体的怎么判断算法我就不多介绍了(有板子就好了)，大家可以看AC代码(网上找的板子)自己理解一下，我能看懂的地方都给大家标注了，但是很多具体的算法(比如判断边相交)我也没怎么详细看懂(不好意思，能力有限)。</p><h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point(<span class="keyword">double</span> x = <span class="number">0</span>, <span class="keyword">double</span> y = <span class="number">0</span>) : x(x), y(y) &#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span>+(Point a) &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(a.x + x, a.y + y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(Point a) &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x - a.x, y - a.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == a.x)</span><br><span class="line">            <span class="keyword">return</span> y &lt; a.y;</span><br><span class="line">        <span class="keyword">return</span> x &lt; a.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Point &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - a.x) &lt; eps &amp;&amp; <span class="built_in">fabs</span>(y - a.y) &lt; eps)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(x * x + y * y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Vector a, Vector b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;<span class="comment">//叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Vector a, Vector b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;<span class="comment">//点积</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isclock</span><span class="params">(Point p0, Point p1, Point p2)</span> </span>&#123;</span><br><span class="line">    Vector a = p1 - p0;</span><br><span class="line">    Vector b = p2 - p0;</span><br><span class="line">    <span class="keyword">if</span> (cross(a, b) &lt; -eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="comment">//判断平行也就是夹角很小很小</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDistance</span><span class="params">(Point a, Point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(a.x - b.x, <span class="number">2</span>) + <span class="built_in">pow</span>(a.y - b.y, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;Point&gt; Polygon;</span><br><span class="line"><span class="function">Polygon <span class="title">Andrew</span><span class="params">(Polygon s)</span></span>&#123;</span><br><span class="line">    Polygon u,l;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;<span class="number">3</span>) <span class="keyword">return</span> s;</span><br><span class="line">    sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());<span class="comment">//根据x坐标排序 </span></span><br><span class="line">    u.push_back(s[<span class="number">0</span>]);</span><br><span class="line">    u.push_back(s[<span class="number">1</span>]);</span><br><span class="line">    l.push_back(s[s.<span class="built_in">size</span>()<span class="number">-1</span>]);</span><br><span class="line">    l.push_back(s[s.<span class="built_in">size</span>()<span class="number">-2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;s.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=u.<span class="built_in">size</span>();n&gt;=<span class="number">2</span>&amp;&amp;!isclock(u[n<span class="number">-2</span>],u[n<span class="number">-1</span>],s[i]);--n)&#123;</span><br><span class="line">            u.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        u.push_back(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = s.<span class="built_in">size</span>() - <span class="number">3</span> ; i &gt;= <span class="number">0</span> ; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n = l.<span class="built_in">size</span>() ; n &gt;=<span class="number">2</span> &amp;&amp; !isclock(l[n<span class="number">-2</span>],l[n<span class="number">-1</span>],s[i]); --n) &#123;</span><br><span class="line">            l.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        l.push_back(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; u.<span class="built_in">size</span>() - <span class="number">1</span> ; i++) l.push_back(u[i]);</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt;= eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断点在线段上</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OnSegment</span><span class="params">(Point p, Point a1, Point a2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(cross(a1 - p, a2 - p)) == <span class="number">0</span> &amp;&amp; dcmp(dot(a1 - p, a2 - p)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断线段相交</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Intersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c1 = cross(a2 - a1, b1 - a1), c2 = cross(a2 - a1, b2 - a1),</span><br><span class="line">            c3 = cross(b2 - b1, a1 - b1), c4 = cross(b2 - b1, a2 - b1);</span><br><span class="line">    <span class="keyword">return</span> dcmp(c1) * dcmp(c2) &lt; <span class="number">0</span> &amp;&amp; dcmp(c3) * dcmp(c4) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断点在凸包内</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPointInPolygon</span><span class="params">(Point p, <span class="built_in">vector</span>&lt;Point&gt; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wn = <span class="number">0</span>, cc = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cc; i++) &#123;</span><br><span class="line">        Point p1 = s[i];</span><br><span class="line">        Point p2 = s[(i + <span class="number">1</span>) % cc];</span><br><span class="line">        <span class="keyword">if</span> (p1 == p || p2 == p || OnSegment(p, p1, p2)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = dcmp(cross(p2 - p1, p - p1));</span><br><span class="line">        <span class="keyword">int</span> d1 = dcmp(p1.y - p.y);</span><br><span class="line">        <span class="keyword">int</span> d2 = dcmp(p2.y - p.y);</span><br><span class="line">        <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; d1 &lt;= <span class="number">0</span> &amp;&amp; d2 &gt; <span class="number">0</span>) wn++;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span> &amp;&amp; d2 &lt;= <span class="number">0</span> &amp;&amp; d1 &gt; <span class="number">0</span>) wn--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wn != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(Polygon s1, Polygon s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c1 = s1.<span class="built_in">size</span>(), c2 = s2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c1; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPointInPolygon(s1[i], s2)) &#123;<span class="comment">//点是否包含</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c2; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPointInPolygon(s2[i], s1)) &#123;<span class="comment">//同上</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c2; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Intersection(s1[i], s1[(i + <span class="number">1</span>) % c1], s2[j], s2[(j + <span class="number">1</span>) % c2])) &#123;<span class="comment">//线段相交判断</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        Polygon s1,s2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">double</span> x1, x2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;x1,&amp;x2);</span><br><span class="line">            s1.push_back(Point(x1, x2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">            <span class="keyword">double</span> x1, x2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;x1,&amp;x2);</span><br><span class="line">            s2.push_back(Point(x1,x2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s1.<span class="built_in">size</span>()) s1=Andrew(s1);</span><br><span class="line">        <span class="keyword">if</span>(s2.<span class="built_in">size</span>()) s2=Andrew(s2);</span><br><span class="line">        solve(s1,s2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="G-逆序对"><a href="#G-逆序对" class="headerlink" title="G-逆序对"></a>G-逆序对</h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h3><p>逆序对的定义：在一个序列a中，如果i&lt;j且 a<sub>i</sub>&gt;a<sub>j</sub> 那么a<sub>i</sub>a<sub>j</sub>就是一个逆序对。</p><p>问相距最远的逆序对的距离（j-i）。如果没有逆序对，输出0。</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h3><p>第一行一个数n，表示序列的长度。(1≤n≤10<sup>5</sup>)</p><p>接下来一行，n个整数，保证在int范围内</p><h3 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h3><p>一行一个数，表示最远逆序对的距离</p><h3 id="输入样例-6"><a href="#输入样例-6" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4 3 5 1</span><br></pre></td></tr></table></figure><h3 id="输出样例-6"><a href="#输出样例-6" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><hr><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>拿到这道题目能想到的第一个方法肯定就是暴力遍历，但是上机的时候粗略一看O(n<sup>2</sup>)会超就被我***的果断放弃了。。其实好像用不到O(n<sup>2</sup>)。步入正题，肯定是对每一个元素，找到其最远逆序对然后和max比较即可，最后输出max。但是怎么找最快呢，如果直接一步一步从前往后找，每一步还需要比较找出最大的，肯定就差不多O(n<sup>2</sup>)了，肯定过不了，但我们能发现的是，因为是找最远的，所以直接从后往前找，找到了一个就直接break就好了，因为求的是最远距离而不是差值，这样一来时间复杂度就比较乐观了。放上代码</p><h3 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> distance;</span><br><span class="line">&#125;a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span>=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>;j&gt;=i+<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j].num&lt;a[i].num)&#123;</span><br><span class="line">a[i].distance=j-i;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i].distance&gt;<span class="built_in">max</span>) <span class="built_in">max</span>=a[i].distance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">max</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p>]]></content>
      
      
      <categories>
          
          <category> 综合题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建图方法总结</title>
      <link href="/2019/11/25/%E5%BB%BA%E5%9B%BE%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/11/25/%E5%BB%BA%E5%9B%BE%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文呢主要想为大家介绍一些常用的建图方法及数据结构，因为大家平时都直接套板子，可能会有一些模糊的地方，希望本文的介绍对大家图论的学习有所帮助。</p><h2 id="建图"><a href="#建图" class="headerlink" title="建图"></a>建图</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>邻接矩阵可以说是最简单最容易理解的建图方法了，简要说就是用一个二维数组存边，下标代表顶点编号。比如<code>map[i][j]</code>即代表顶点i和顶点j之间存在一条边，边的权值为<code>map[i][j]</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max ...</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="built_in">max</span>][<span class="built_in">max</span>];</span><br></pre></td></tr></table></figure><p>这样无论是遍历或者是存边的时候都非常的方便和容易理解。下面用松弛举个遍历的例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存图</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">    <span class="built_in">map</span>[u][v]=w;</span><br><span class="line">    <span class="built_in">map</span>[v][u]=<span class="number">0</span>;<span class="comment">//有向图(无向图为w)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">int</span> tmp;<span class="comment">//源点</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//遍历目标顶点</span></span><br><span class="line">    <span class="keyword">if</span>(dis[i]&gt;dis[tmp]+<span class="built_in">map</span>[tmp][i])<span class="comment">//松弛</span></span><br><span class="line">        dis[i]=dis[tmp]+<span class="built_in">map</span>[tmp][i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也有不可避免的缺点，就是空间占用太大。比如一共10000个点100000条边的时候，就无法用矩阵简单的存储了。只能用其他方法。</p><h3 id="邻接表-链式前向星"><a href="#邻接表-链式前向星" class="headerlink" title="邻接表(链式前向星)"></a>邻接表(链式前向星)</h3><p>链式前向星可以说是一种非常优质的存图结构了，不管是占用内存方面还是遍历方面或者是存边都非常的简单，但有个问题就是不是那么容易理解(反正本人凭自己可能十天八天都不一定弄得明白，还是网上看看博客才懂)。但弄懂了还是很简单的，先放代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max ...</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;e[<span class="built_in">max</span>*<span class="built_in">max</span>];<span class="comment">//max*max代表边总数，实际可能没这么多。</span></span><br><span class="line"><span class="keyword">int</span> head[<span class="built_in">max</span>],e_num=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[e_num].to=v;</span><br><span class="line">    e[e_num].weight=w;</span><br><span class="line">    e[e_num].next=head[u];</span><br><span class="line">    head[u]=e_num;</span><br><span class="line">    e_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    addedge(u,v,w);</span><br><span class="line">    addedge(v,u,<span class="number">0</span>);<span class="comment">//无向图为w</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还要初始化head数组全为-1</span></span><br></pre></td></tr></table></figure><p>上面给大家列出了链式前向星的基本结构以及加边的函数，方便下文阐述。首先拿到这个结构体可能第一次接触的时候有点懵(我第一次直接放弃)，首先<code>to</code>就是指该边指向的顶点，<code>weight</code>就是代表权值了也可以代表容量，然后最神奇的就是<code>next</code>，这个则代表和这条边来自同样起始顶点的下一条边的编号(因为这个结构体数组的下标就是代表边的编号)，然后是<code>head[max]</code>，这个数组存的是边的编号，什么编号呢，以该数组下标为起始顶点的边的编号(该数组的下标即为起始顶点的编号)，并且如果从该起始顶点出发的有多条边，那则代表最后添加进head数组的那条边的编号(好像有点绕)，最后<code>e_num</code>代表的是边的编号也就是<code>e[]</code>的下标。如果没怎么搞明白，不要紧，我们再看看这个加边函数应该就比较清楚了。</p><p>首先<code>e_num</code>从0开始，加入第一条边，存其指向的顶点和权值就不多说了，这个比较好理解；然后是<code>e[e_num].next=head[u]</code>，根据我们上文介绍的概念来理解就是，<code>e[e_num].next</code>表示这条边对应的起始顶点的下一条边的编号，等于<code>head[u]</code>，也就等于head数组的初始值-1，因为现在图里只有一条边，所以不存在其他边的情况，所以-1则代表无边。现在图里就一条边，我们假设为顶点1到顶点2有一条边。如下(别忘了同时也相当于加了一条从2-&gt;1的权值为0的边，<code>e_num</code>现在为2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//边 1-&gt;2</span></span><br><span class="line"><span class="comment">//对应的数组及代码如下</span></span><br><span class="line">e[<span class="number">0</span>].next=head[<span class="number">1</span>];<span class="comment">//head[1]=-1;</span></span><br><span class="line">head[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//e_num=0;</span></span><br><span class="line"><span class="comment">//相反的边 2-&gt;1 只是权值为0</span></span><br><span class="line">e[<span class="number">1</span>].next=head[<span class="number">2</span>];<span class="comment">//head[2]=-1</span></span><br><span class="line">head[<span class="number">2</span>]=<span class="number">1</span>;<span class="comment">//e_num=1;</span></span><br></pre></td></tr></table></figure><p>然后我们假设再加入一条从1到3的一条边，代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//边 1-&gt;3</span></span><br><span class="line">e[<span class="number">2</span>].next=head[<span class="number">1</span>];<span class="comment">//此时head[1]=0</span></span><br><span class="line">head[<span class="number">1</span>]=<span class="number">2</span>;<span class="comment">//e_num=2;</span></span><br><span class="line"><span class="comment">//相反的边</span></span><br><span class="line">e[<span class="number">3</span>].next=head[<span class="number">3</span>];<span class="comment">//head[3]=-1;</span></span><br><span class="line">head[<span class="number">3</span>]=<span class="number">3</span>;<span class="comment">//e_num=3;</span></span><br></pre></td></tr></table></figure><p>然后我们再来分析一下，我们先不看那两条相反的边，只看<code>1-&gt;2</code>和<code>1-&gt;3</code>这两边。现在<code>head[1]</code>里存的就是边的编号2，也就是最后加进来的起始顶点为1的边<code>1-&gt;3</code>。这个点应该清楚了吧。然后是<code>e[2].next</code>这个指的是<code>1-&gt;2</code>这条边的编号0，也就是和<code>1-&gt;3</code>这条边有相同起始顶点下一条边的编号，也就是<code>1-&gt;2</code>这条边的编号，所以是0。然后这些应该清楚了，那为什么要这样设置呢，下面代码则是遍历时的代码，还是举松弛的例子，看完大家应该就理解为什么要这样设置了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> s;<span class="comment">//源点</span></span><br><span class="line"><span class="keyword">for</span>(i=head[s];~i;i=e[i].next)&#123;</span><br><span class="line">    <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">    <span class="keyword">if</span>(dis[v]&gt;dis[s]+e[i].weight)</span><br><span class="line">        dis[v]=dis[s]+e[i].weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我来解释一下这段代码，首先这段代码实现的功能就是对以s源点为起点的所有边进行松弛操作。首先是循环的代码，<code>i</code>就是代表边的编号，初始值就为以s为起点的最后加入head数组的边的编号，<code>~i</code>的意思就是<code>i!=-1</code>了(因为head的初始值我们设为-1)，然后<code>i=e[i].next</code>就代表和当前边具有相同顶点的下一条边的编号了，这样就能遍历以s为起点的所有的边了。然后是<code>v</code>，就是代表当前边的终止顶点，也就是<code>s-&gt;v</code>并且编号为<code>i</code>，所以松弛操作就很好理解了，这个循环也就是几乎所有链式前向星实现遍历的循环了。</p><p>最后再补充一下为什么有向图要存反向边了，这是为了在解决最大流问题的时候的方便，残余网络等等都需要反向边的参与，这样设置反向边的好处也是很大的，因为就是和其本身这条边编号<code>+1</code>或者准确说是<code>^1</code>就能得到其反向边了。(比如上面例子的边<code>1-&gt;2</code>编号为0，<code>2-&gt;1</code>编号为1，也就是0^1，对<code>1-&gt;3</code>也是同样)所以就很方便。</p><p>总结一下就是链式前向星的优势很大，完全不用担心空间的浪费问题，并且其和用单纯的链表存图是异曲同工的，我在这里就不再赘述，缺点就是不那么容易理解，希望大家都能熟练掌握。</p><h3 id="vector实现邻接表"><a href="#vector实现邻接表" class="headerlink" title="vector实现邻接表"></a>vector实现邻接表</h3><p>用vector实现邻接表就比较简单易懂了，直接放代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max ...</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;struct node&gt; G[<span class="built_in">max</span>];<span class="comment">//下标为出发点</span></span><br><span class="line"><span class="comment">//vector&lt;pair&lt;int,int&gt; &gt; G[max];</span></span><br></pre></td></tr></table></figure><p>数据结构还是非常的简单易懂的，就是邻接表最朴素的方式，当然熟练后直接使用pair即可，下面放上存边的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">e</span>;</span><span class="comment">//临时</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">e.v=v,e.w=w;</span><br><span class="line">G[u].push_back(e);<span class="comment">//和二维数组相似</span></span><br><span class="line"><span class="comment">//G[u].push_back(&#123;v,w&#125;);</span></span><br></pre></td></tr></table></figure><p>遍历就和二维数组几乎类似了。上代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">e</span>;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=G[i].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">        e=G[i][j];</span><br><span class="line">        <span class="comment">//e.v,e.w</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点也是有的，比如存在相同边的时候，判断是否重复就比较麻烦了。</p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解篇-C5</title>
      <link href="/2019/11/23/%E9%A2%98%E8%A7%A3%E7%AF%87-C5/"/>
      <url>/2019/11/23/%E9%A2%98%E8%A7%A3%E7%AF%87-C5/</url>
      
        <content type="html"><![CDATA[<h2 id="A-毛毛虫"><a href="#A-毛毛虫" class="headerlink" title="A-毛毛虫"></a>A-毛毛虫</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>草丛中有两只毛毛虫。他们想穿过草丛里的杀虫剂到达对方的身边。而草丛里的杀虫剂形成了nn个两两无公共点的圆。注意这些杀虫剂只存在于圆的边界上，且杀虫剂宽度非常非常细。毛毛虫一开始不在任何圆的边界上。</p><p>毛毛虫穿过杀虫剂就要受到一次伤害。请问一只毛毛虫到达另一只的身边，最少需要受到几次伤害？</p><p> 时间限制：1000ms  内存限制：65536KB </p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一个数为数据组数T，每组数据输入5行，T≤10。</p><p>第一行包含一个整数 n，n≤50。</p><p>第二行包含 n 个整数 x<sub>i</sub>，表示 n 个圆的圆心的横坐标。</p><p>第三行包含 n 个整数 y<sub>i</sub> ，表示 n 个圆的圆心的纵坐标。</p><p>第四行包含 n 个整数 r<sub>i</sub> ，表示 n 个圆的半径。</p><p>最后一行包含四个整数 x1,y1,x2,y2，表示两只毛毛虫位置的横纵坐标。</p><p>所有坐标、半径的绝对值不超过10001000。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>对于每组数据，输出一行，毛毛虫受到伤害的次数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">0 -6 6</span><br><span class="line">0 1 6</span><br><span class="line">2 2 2</span><br><span class="line">-5 1 5 1</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>刚开始拿到这道题很容易被文字数量和一大堆的输入数据唬住(本人就是)，其实仔细分析会发现其实并不难(Moggin：这是学长出给初中生的题)。</p><p>言归正传，这道题就是一个点和圆的相对位置关系的题，很简单，两条毛毛虫都在某一圆内或者都不在某一圆内对毛毛虫的伤害为0，所以只用考虑包含一条毛毛虫同时不包含另一毛毛虫的圆的数量即可。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> x[<span class="number">55</span>]=&#123;&#125;,y[<span class="number">55</span>]=&#123;&#125;,r[<span class="number">55</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(((x1-x[i])*(x1-x[i])+(y1-y[i])*(y1-y[i]))&lt;=r[i]*r[i])&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T,n,i;</span><br><span class="line"><span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;r[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(judge(x1,y1,i)&amp;&amp;!judge(x2,y2,i))&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!judge(x1,y1,i)&amp;&amp;judge(x2,y2,i))&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B-图1"><a href="#B-图1" class="headerlink" title="B-图1"></a>B-图1</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>一个无向图，<code>N</code>个点编号<code>1~N</code>。<code>M</code>条边，每条边有一个权值<code>c</code>。</p><p>对于一个点集<code>A</code>，这个点集的权值<code>S</code>定义为S<sub>A</sub>=max(c<sub>ij</sub>)，其中i∈A∧j∈A∧i≠j。</p><p>现在将N个点分割为两个点集A、B，请问max(S<sub>A</sub>,S<sub>B</sub>)的最小值</p><p> 时间限制：1000ms  内存限制：65536KB </p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>第一行两个正整数N、M。(2≤N≤20000,1≤M≤100000)</p><p>接下来M行，每行三个整数a,b,c，表示ab之间有一条权值为c的边（1≤a,b≤N,1≤c≤10<sup>9</sup>）</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>一行一个数</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br><span class="line">1 4 2534</span><br><span class="line">2 3 3512</span><br><span class="line">1 2 28351</span><br><span class="line">1 3 6618</span><br><span class="line">2 4 1805</span><br><span class="line">3 4 12884</span><br></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3512</span><br></pre></td></tr></table></figure><hr><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>首先分析题目，白话重新描述一下就是，给图顶点染色，只染两种颜色，然后将同色中权值最大的边最小化，求最小值。这样看来显然就是二分图了(对本人可能不那么显然)，对需要求出来的边进行枚举，将比其权值小的边删去后，剩余的边能否构成二分图，能构成，说明该边满足条件，然后再枚举比该边小的，再判断，直到最后不能构成二分图，则找到了答案。那通过什么方法枚举呢，当然可以挨着挨着枚举，时间复杂度也上去了，由于需要枚举的边是可以从大到小枚举过来的，所以我们可以直接采用二分来求就好了，这样时间复杂度就很低了。然后的问题就是判断能否构成二分图的问题了。我们直接采用比较简单的DFS染色即可。这样就能求出答案了。</p><p>注意：一些需要注意的细节在这里说明一下。首先是二分最开始的值的设置，由于给的权值范围都是10<sup>9</sup>了，所以我们的初始值应该达到long long才行(测试了一下，需要10<sup>11</sup>才能AC)。其次呢就是存图的问题，10000的顶点数，邻接矩阵存肯定爆内存了。所以采用链式前向星来存比较好。还有就是不是一开始就存图，是把边先枚举，比该边大的边才放进图里(连边)，所以最开始存顶点和边的信息需要一个结构体。最后就是染色的问题了，大家可以看了代码再看我马上要说的，就是vis[]数组的作用，因为判断了一个顶点后，和它相连的所有点都已经被染色了，如果再次访问这些点的话，就会出现错误，所以需要判断一下，让已经被染色的不再需要判断，因为无论这个点其所连的边有没有构成二分图，与其相连的所有点就相当于也已经全部判断了一遍了，所以不需要再判断一遍，也能节省一些时间。</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 300005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">&#125; ver[<span class="built_in">max</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125; e[<span class="built_in">max</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="built_in">max</span>],e_num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T;</span><br><span class="line">ll mid;</span><br><span class="line"><span class="keyword">int</span> color[<span class="built_in">max</span>],vis[<span class="built_in">max</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">e[e_num].v=v;</span><br><span class="line">e[e_num].c=c;</span><br><span class="line">e[e_num].next=head[u];</span><br><span class="line">head[u]=e_num;</span><br><span class="line">e_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">add(u,v,c);</span><br><span class="line">add(v,u,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line">    color[u]=c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!color[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfs(j, <span class="number">3</span>-c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(color[j]==c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(color,<span class="number">0</span>,<span class="keyword">sizeof</span>(color));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ver[i].c&gt;mid) insert(ver[i].a,ver[i].b,ver[i].c);<span class="comment">//如果大则连边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfs(i,<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;ver[i].a,&amp;ver[i].b,&amp;ver[i].c);</span><br><span class="line">&#125;</span><br><span class="line">ll l=<span class="number">0</span>,r=<span class="number">1e14</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid=((l+r)&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(check()) ans=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要看类似题目可以看看这道： <a href="https://www.nowcoder.com/questionTerminal/e5e5e74a65c34d588421944029306e2e" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/e5e5e74a65c34d588421944029306e2e</a> (CodeForces 85E)</p><hr><h2 id="C-图2"><a href="#C-图2" class="headerlink" title="C-图2"></a>C-图2</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>一个有向图，<code>N</code>个点编号<code>1~N</code>。<code>M</code>条边，每条边有一个权值<code>c</code>。</p><p>点<code>i</code>、<code>j</code>之间的最短路长度定义为 S<sub>ij</sub>。如果i、j不连通，则S<sub>ij</sub>=−1</p><p>输出所有使得S<sub>ij</sub>最大的i和j</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>第一行一个整数t表示数据组数(t≤50)</p><p>对于每组数据：</p><p>第一行两个正整数N、M。(2≤N≤200,1≤M≤1000)</p><p>接下来M行，每行三个整数a,b,c，表示ab之间有一条权值为c的边（1≤a,b≤N,1≤c≤10<sup>3</sup>）</p><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>输出所有使得S<sub>ij</sub>最大的i、j，每一对i、j输出一行，用空格隔开，按i的大小由小到大输出，i相同时按j的大小由小到大输出，</p><h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2 1</span><br><span class="line">1 2 3</span><br><span class="line">3 3</span><br><span class="line">1 2 2</span><br><span class="line">2 3 3</span><br><span class="line">3 1 5</span><br></pre></td></tr></table></figure><h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><hr><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>首先看题目可以确定是最短路径题目，接下来就是选算法的问题了(Dijkstra、spfa、Floyd)，显然这里要求所有顶点之间的最短路径，如果选择spfa和Dijkstra则需要求n次再来遍历判断，显然太麻烦了，所以我们显然选择Floyd即可(后文我也会附上Dijkstra的代码)。</p><p>本题需要注意的一些地方：首先是排序，读清楚题，怎么排序，再写cmp函数。其次就是每组数据的最大S<sub>ij</sub>不唯一，本人是采用循环找到前n个相同的最大值，再来输出，当然会有更好的方法。然后就是因为图权值最初设置为inf，因为又是要计算最大边，所以再Floyd算完之后，需要把仍然是inf的边置为-1，不影响后面的排序。最后呢就是注意Floyd算完之后需要存到另一个结构体数组里再进行排序会比较方便。</p><h3 id="AC代码-Floyd"><a href="#AC代码-Floyd" class="headerlink" title="AC代码(Floyd)"></a>AC代码(Floyd)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1000000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 205</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i,j,c;</span><br><span class="line">&#125;ans[<span class="number">40005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">c=*(struct node*)a;</span><br><span class="line">d=*(struct node*)b;</span><br><span class="line"><span class="keyword">if</span>(c.c!=d.c) <span class="keyword">return</span> d.c-c.c;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(c.i!=d.i) <span class="keyword">return</span> c.i-d.i;</span><br><span class="line"><span class="keyword">return</span> c.j-d.j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> e[<span class="built_in">max</span>][<span class="built_in">max</span>];</span><br><span class="line"><span class="keyword">int</span> t,n,m,M,cnt;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">M=<span class="number">-2147483647</span>;</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) e[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> e[i][j]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">e[a][b]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line"><span class="keyword">if</span>(e[i][j]&gt;e[i][k]+e[k][j])</span><br><span class="line">e[i][j]=e[i][k]+e[k][j];<span class="comment">// Floyd</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i][j]==inf) e[i][j]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">ans[cnt].c=e[i][j];</span><br><span class="line">ans[cnt].i=i;</span><br><span class="line">ans[cnt].j=j;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">qsort(ans,cnt,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line"><span class="keyword">int</span> tmp=ans[<span class="number">0</span>].c,eid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i].c==tmp) eid++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=eid;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans[i].i,ans[i].j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC代码-Dijkstra"><a href="#AC代码-Dijkstra" class="headerlink" title="AC代码(Dijkstra)"></a>AC代码(Dijkstra)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 2000</span></span><br><span class="line"><span class="keyword">int</span> INFINITY=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> MAX=<span class="number">-2147483647</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> i,j,c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">ans</span>[40005];</span></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,n,m;</span><br><span class="line"><span class="keyword">int</span> sweight[<span class="built_in">max</span>]=&#123;&#125;,<span class="built_in">map</span>[<span class="built_in">max</span>][<span class="built_in">max</span>],spath[<span class="built_in">max</span>],e[<span class="built_in">max</span>][<span class="built_in">max</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) <span class="built_in">map</span>[i][j]=e[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">map</span>[i][j]=e[i][j]=INFINITY;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">c=*(struct node*)a;</span><br><span class="line">d=*(struct node*)b;</span><br><span class="line"><span class="keyword">if</span>(c.c!=d.c) <span class="keyword">return</span> d.c-c.c;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(c.i!=d.i) <span class="keyword">return</span> c.i-d.i;</span><br><span class="line"><span class="keyword">return</span> c.j-d.j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> v0)</span></span>&#123;</span><br><span class="line">MAX=<span class="number">-2147483647</span>;</span><br><span class="line"><span class="keyword">int</span> i,j,v,minweight;</span><br><span class="line"><span class="keyword">char</span> wfound[<span class="built_in">max</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sweight[i]=<span class="built_in">map</span>[v0][i];</span><br><span class="line">spath[i]=v0;</span><br><span class="line">&#125;</span><br><span class="line">sweight[v0]=<span class="number">0</span>;</span><br><span class="line">wfound[v0]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">minweight=INFINITY;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span> (!wfound[j]&amp;&amp;(sweight[j]&lt;minweight))&#123;</span><br><span class="line">v=j;</span><br><span class="line">minweight=sweight[j];</span><br><span class="line">&#125;</span><br><span class="line">wfound[v]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!wfound[j]&amp;&amp;(minweight+<span class="built_in">map</span>[v][j]&lt;sweight[j]))&#123;</span><br><span class="line">sweight[j]=minweight+<span class="built_in">map</span>[v][j];</span><br><span class="line">spath[j]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">e[v0][i]=sweight[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> tmp,eid;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="built_in">map</span>[a][b]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">Dijkstra(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i][j]==INFINITY) e[i][j]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">ans[cnt].c=e[i][j];</span><br><span class="line">ans[cnt].i=i;</span><br><span class="line">ans[cnt].j=j;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">qsort(ans,cnt,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line">tmp=ans[<span class="number">0</span>].c,eid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i].c==tmp) eid++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=eid; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans[i].i,ans[i].j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra即多了几步，总体思想是不变的。</p><hr><h2 id="D-图3"><a href="#D-图3" class="headerlink" title="D-图3"></a>D-图3</h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h3><p>一个无向图，<code>N</code>个点编号<code>1~N</code>。<code>M</code>条边，每条边有一个权值<code>c</code>。</p><p>问对于每条边，最少删除多少条边后，可以使得存在一个最小生成树包含这条边。</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>第一行两个正整数N、M。(2≤N,M≤100)</p><p>接下来M行，每行三个整数a、b、c，表示ab之间存在一条权值为c的边。（1≤a,b≤N，1≤c≤500）</p><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>输出一行M个数，数之间用空格隔开</p><h3 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2 1</span><br><span class="line">3 1 2</span><br><span class="line">3 2 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1</span><br></pre></td></tr></table></figure><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>首先分析题，要使最小生成树包含这条边。我们现在一直求最小生成树的方法也就两种，Kruskal和Prim算法。我们这道题显然就从Kruskal法来考虑比较方便(可能不是那么显然，先这样想)。Kruskal算法是通过先对边权值通过排序，从权值最小的边开始遍历每一条边，如果加入该边后，生成树仍然满足树的条件的话，则该边加入，如果构成了回路即不满足树的条件，则不增加该边，继续遍历。那对于本题呢，假设某边要存在一个最小生成树包含该边，按照Kruskal算法的过程，在枚举到该边之前，该边没有连通，即先枚举比该边权值小的所有边，然后再枚举该边，那要怎样保证该边一定在生成树里呢，即要保证该边加入后不形成回路，怎么保证呢，因为生成树的不唯一性，那就是要让该边的两个顶点(u,v)不连通，即u、v与其余所有比该边权值小的边的顶点组成一个图(容量为1，保证双向，因为仅求边的数量)，让u和v为源点和汇点，让u和v之间不连通即可，没有连通即割开，即求割，但是要保证删除的边最少，所以就是求最小割了，所以就是算最大流了，所以直接套板子就okk了。</p><p>需要注意的地方：首先，仍然一开始不建图，仅用一结构体存起来，等排完序后遍历时再存图，存图的时候也不要忘了把边的编号存起来，输出的时候需要用。然后是对每条边算了一遍最大流后，要把原图重新初始化一遍，以便存下一个图。之后是，有可能对某一条边来说，存在很多权值相等的边，权值相等的边是不能加入到图里的，但是排序对于权值相同的边并不敏感，所以需要自己判断一下，把权值相同的边先略去后，再建图。最后用数组存结果输出即可。</p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 10005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b,c,num;</span><br><span class="line">&#125;p[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[<span class="built_in">max</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="built_in">max</span>],e_num=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a,<span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">c=*(struct node*)a;</span><br><span class="line">d=*(struct node*)b;</span><br><span class="line"><span class="keyword">return</span> c.c-d.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">e_num++;</span><br><span class="line">e[e_num].v=v;</span><br><span class="line">e[e_num].c=c;</span><br><span class="line">e[e_num].next=head[u];</span><br><span class="line">head[u]=e_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">add(u,v,c);</span><br><span class="line">add(v,u,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> depth[<span class="built_in">max</span>];<span class="comment">// 层次网络 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;<span class="comment">//定义一个bfs寻找分层图时的队列</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">-1</span>,<span class="keyword">sizeof</span>(depth));</span><br><span class="line">    depth[S]=<span class="number">0</span>;<span class="comment">//源点深度为0</span></span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[v]==<span class="number">-1</span>)&#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">                depth[v]=depth[u]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (depth[T]!=<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;        <span class="comment">//flow表示当前搜索分支的流量上限</span></span><br><span class="line">    <span class="keyword">if</span>(u==T)&#123;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[u]+<span class="number">1</span>==depth[v])&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=dfs(v,<span class="built_in">min</span>(flow,e[i].c));    <span class="comment">// 递归计算顶点 v，用 c(u, v) 来更新当前流量上限</span></span><br><span class="line">            flow-=tmp;</span><br><span class="line">            e[i].c-=tmp;</span><br><span class="line">            res+=tmp;</span><br><span class="line">            e[i^<span class="number">1</span>].c+=tmp;      <span class="comment">// 修改反向弧的容量</span></span><br><span class="line">            <span class="keyword">if</span>(flow==<span class="number">0</span>)&#123;        <span class="comment">// 流量达到上限，不必继续搜索了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">0</span>)&#123;     <span class="comment">// 当前没有经过顶点 u 的可行流，不再搜索顶点 u</span></span><br><span class="line">        depth[u]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;        <span class="comment">// 函数返回值就是最大流的结果</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">        res+=dfs(S,INF);    <span class="comment">// 初始流量上限为 INF</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">505</span>]=&#123;&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);<span class="comment">//m为边</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;p[i].a,&amp;p[i].b,&amp;p[i].c);</span><br><span class="line">        p[i].num=i;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(p,m,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</span><br><span class="line">    e_num=<span class="number">-1</span>;</span><br><span class="line">    S=p[i].a,T=p[i].b;</span><br><span class="line">    <span class="keyword">for</span>(j=i;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[j].c==p[i].c) <span class="keyword">continue</span>;</span><br><span class="line">    insert(p[j].a,p[j].b,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans[p[i].num]=dinic();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-棋盘"><a href="#E-棋盘" class="headerlink" title="E-棋盘"></a>E-棋盘</h2><h3 id="题面-3"><a href="#题面-3" class="headerlink" title="题面"></a>题面</h3><p>一个<code>N</code>行，<code>M</code>列的棋盘。棋盘每个格子都是边长为1的正方形。</p><p>现在要在棋盘上放一些1×2大小的骨牌。骨牌的边线与格子重合（必须占2个格子），任意两个骨牌不能重叠。</p><p>但是棋盘上的一些格子已经被占用，请问最多可以放多少个骨牌。</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>第一行三个正整数N、M、q。(2≤N,M≤100,0≤q≤1000)</p><p>接下来q行，每行两个整数a,b,表示第a行第b列的格子被占用（1≤a,b≤N）</p><h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>输出一行</p><h3 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 8 0</span><br></pre></td></tr></table></figure><h3 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">32</span><br></pre></td></tr></table></figure><hr><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>首先我们看题，格子里放骨牌，<code>1*2</code>的骨牌，有些格子被占用，问最多的放法。可能刚看到这道题没什么思路，但我们可以从这个<code>1*2</code>看出一些东西，可以想到就是两个相邻的格子可以放一个骨牌，我们就可以看作一个格子和其所有相邻的格子之间存在一条边，容量为inf，并且该格子连接源点，容量为1，与其相邻的格子连接汇点，容量也为1，这样从源点到汇点的最大流即可以放的骨牌的方法数了。我们举一个例子：一个十字格子(5个格子)，把中间的格子连接源点，则其四周的格子都要连接汇点，那么此时的最大流显然就是1了，也就是方法数为1，同理就可以扩张为整个棋盘了。将所有i+j为奇数(i为行j为列)的点连源点，偶数连汇点相邻的连边，容量就不再赘述，然后求最大流即可。</p><p>需要注意的地方：首先就是存边，单纯的邻接矩阵肯定不行。然后就是那些被占用的点，用一个二维数组存行和列然后作为标记数组，标记的不存入图内即可。最后就是其实该题和练习赛A题几乎一样，并且更简单(想到方法的前提下)</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 1000000</span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1005</span>][<span class="number">1005</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[<span class="built_in">max</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="built_in">max</span>],e_num=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">e_num++;</span><br><span class="line">e[e_num].v=v;</span><br><span class="line">e[e_num].c=c;</span><br><span class="line">e[e_num].next=head[u];</span><br><span class="line">head[u]=e_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">add(u,v,c);</span><br><span class="line">add(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> depth[<span class="built_in">max</span>];<span class="comment">// 层次网络 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;<span class="comment">//定义一个bfs寻找分层图时的队列</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">-1</span>,<span class="keyword">sizeof</span>(depth));</span><br><span class="line">    depth[S]=<span class="number">0</span>;<span class="comment">//源点深度为0</span></span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[v]==<span class="number">-1</span>)&#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">                depth[v]=depth[u]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (depth[T]!=<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;        <span class="comment">//flow表示当前搜索分支的流量上限</span></span><br><span class="line">    <span class="keyword">if</span>(u==T)&#123;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[u]+<span class="number">1</span>==depth[v])&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=dfs(v,<span class="built_in">min</span>(flow,e[i].c));    <span class="comment">// 递归计算顶点 v，用 c(u, v) 来更新当前流量上限</span></span><br><span class="line">            flow-=tmp;</span><br><span class="line">            e[i].c-=tmp;</span><br><span class="line">            res+=tmp;</span><br><span class="line">            e[i^<span class="number">1</span>].c+=tmp;      <span class="comment">// 修改反向弧的容量</span></span><br><span class="line">            <span class="keyword">if</span>(flow==<span class="number">0</span>)&#123;        <span class="comment">// 流量达到上限，不必继续搜索了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">0</span>)&#123;     <span class="comment">// 当前没有经过顶点 u 的可行流，不再搜索顶点 u</span></span><br><span class="line">        depth[u]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;        <span class="comment">// 函数返回值就是最大流的结果</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">        res+=dfs(S,INF);    <span class="comment">// 初始流量上限为 INF</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,sum=<span class="number">0</span>,eid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i,q;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">    S=<span class="number">0</span>,T=n*m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">num[a][b]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">        eid++;</span><br><span class="line">        <span class="keyword">if</span>(!num[i][j])&#123;</span><br><span class="line">        <span class="keyword">if</span>((i+j)%<span class="number">2</span>)&#123;</span><br><span class="line">insert(S,eid,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(j&lt;m) insert(eid,eid+<span class="number">1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">1</span>) insert(eid,eid<span class="number">-1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(i&lt;n) insert(eid,eid+m,INF);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>) insert(eid,eid-m,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">insert(eid,T,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="F-垃圾粉碎机"><a href="#F-垃圾粉碎机" class="headerlink" title="F-垃圾粉碎机"></a>F-垃圾粉碎机</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>垃圾分类快来了，垃圾场主某楠希望赶在垃圾分类之前将厂里的垃圾全部粉碎填埋。为此场长专门去租了n台垃圾粉碎机，每种垃圾粉碎机都有一个最长使用时间ti，在这段时间里总共可以处理mi吨垃圾,可以在任意时间使用任意时长，但是用完就不能再用。由于场里太穷，同一时间只能运行一台垃圾粉碎机，现在想问在垃圾分类来临之前，最多能粉碎多少垃圾。为了简化计算，所有时间单位以小时计算。</p><p> 时间限制：1000ms  内存限制：65536KB </p><h3 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h3><p>前两个数为垃圾粉碎机的个数N和距离垃圾分类来临时间T小时</p><p>接下来N行每行2个整数，对应的ti和mi</p><p>所有数字均不大于1e5</p><h3 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h3><p>输出一行，能处理的垃圾最大重量，保留2位小数，单位为吨</p><h3 id="输入样例-5"><a href="#输入样例-5" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-5"><a href="#输出样例-5" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.00</span><br></pre></td></tr></table></figure><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>读题就能看出这是一道非常明显的分数背包题，就直接贪心算法就可解决了，根据m<sub>i</sub>/t<sub>i</sub>的商进行排序即可，然后遍历输出搞定。</p><p>如果对其他背包问题还有问题的朋友可以查看本人的另一篇博文: <a href="https://dbettkk.github.io/2019/11/11/动态规划-DP-——背包问题/#more" target="_blank" rel="noopener">https://dbettkk.github.io/2019/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#more</a> </p><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 100005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> t;</span><br><span class="line"><span class="keyword">double</span> m;</span><br><span class="line"><span class="keyword">double</span> a;</span><br><span class="line">&#125;dp[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">c=*(struct node*)a;</span><br><span class="line">d=*(struct node*)b;</span><br><span class="line"><span class="keyword">return</span> c.a&lt;d.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,T,i;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;dp[i].t,&amp;dp[i].m);</span><br><span class="line">dp[i].a=dp[i].m/dp[i].t;</span><br><span class="line">&#125;</span><br><span class="line">qsort(dp,n,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i].t&lt;=T)&#123;</span><br><span class="line">ans+=dp[i].m;</span><br><span class="line">T-=dp[i].t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans+=T*dp[i].a;</span><br><span class="line">T=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="G-小面包"><a href="#G-小面包" class="headerlink" title="G-小面包"></a>G-小面包</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>又要发小面包了。这次我们有许多<code>3*6</code>的小面包和<code>6*6</code>的方糕，以及一个<code>6*N</code>的长方形盒子，强迫症的某楠一定要把它们整齐的装到盒子里，并且要尽量装满。请问有多少总不同装法？</p><p> 时间限制：1000ms  内存限制：65536KB </p><h3 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h3><p>多组数据输入。 每组一个3的倍数N（0&lt;=N&lt;=750）</p><h3 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h3><p>对于每组数据，输出一行，为最终计算对1000007取模得到的结果。</p><h3 id="输入样例-6"><a href="#输入样例-6" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="输出样例-6"><a href="#输出样例-6" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>输入为3时，只能放入一块小面包。</p><p>输入为6时，有三种情况：</p><p>（1）竖着放两块小面包</p><p>（2）横着放两块小面包</p><p>（3）放一块方糕</p><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>首先因为输入的n是3的倍数，所以我们可以将问题简化为<code>2*n</code>的盒子装<code>1*2</code>和<code>2*2</code>的方糕的问题。然后我们开始寻找递推关系。假设<code>n</code>对应有<code>f(n)</code>种装法，那么如果我们首先装<code>1*2</code>的空间，那就相当于只能装<code>1*2</code>的方糕，那么对应就是解决<code>f(n-1)</code>的问题，那如果我们先装<code>2*2</code>的空间，那么可以有两种装法，两个<code>1*2</code>的方糕横着摆放和一个<code>2*2</code>的方糕(有朋友可能会问为什么两个<code>1*2</code>的方糕竖着摆放的情况不算，因为这种情况实际上是属于我们前面提到的先装<code>1*2</code>的空间的情况，如果这里再算一遍就重复了)，所以就相当于解决<code>2*f(n-2)</code>的问题即可。然后如果是装<code>3*2</code>的空间，那么不就是等效于<code>1*(2*2)</code>的情况和<code>2*(1*2)</code>的情况吗，所以我们就找到递推关系了，如下：</p><ul><li>f(n)=f(n-1)+2*f(n-2)</li></ul><p>当然大家也可先推一推前面几种情况然后找规律也是可以解决的，只是这个找规律比较靠运气。</p><h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">755</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">1</span>,a[<span class="number">0</span>]=<span class="number">1</span>,a[<span class="number">2</span>]=<span class="number">3</span>,a[<span class="number">3</span>]=<span class="number">5</span>,a[<span class="number">4</span>]=<span class="number">11</span>;<span class="comment">// 这是推出的前几种情况，实际不需要这么多</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n/<span class="number">3</span>; i++) &#123;</span><br><span class="line">a[i]=(a[i<span class="number">-1</span>]+<span class="number">2</span>*a[i<span class="number">-2</span>])%<span class="number">1000007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(a[n/<span class="number">3</span>])%<span class="number">1000007</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="H-点线面"><a href="#H-点线面" class="headerlink" title="H-点线面"></a>H-点线面</h2><h3 id="题面-4"><a href="#题面-4" class="headerlink" title="题面"></a>题面</h3><p>二维平面上有n个点。现在用一根（毛）线将这些点围起来，问线的最小长度和围起来的面积。</p><p> 时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h3><p>第一行一个正整数N。(2≤N≤100000)</p><p>接下来N行，每行两个整数a，b，表示一个点的坐标。（−10<sup>6</sup>≤a,b≤10<sup>6</sup>）</p><h3 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h3><p>输出一行一个数，保留两位小数。</p><h3 id="输入样例-7"><a href="#输入样例-7" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0 0</span><br><span class="line">0 4</span><br><span class="line">3 0</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h3 id="输出样例-7"><a href="#输出样例-7" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12.00 6.00</span><br></pre></td></tr></table></figure><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>刚上了计算几何，应该都能看出这就一道凸包板子题。当然如果有和我一样没有很认真听的可以看下我下方的分析。</p><p>凸包怎么实现呢，首先确定平面中最下方的点，这个点肯定是在凸包内的，然后再以这个点为基点对其余所有点进行极角排序，即将其余点与该点进行连线后，对连线与x轴的夹角进行排序。排了序后，将夹角最小的点入栈，然后遍历所有其他点，若此点在栈顶的点的左边(实际是栈顶两个点连线的左边)，则压栈，若在右边(同理)，则将栈顶出栈然后把此点压栈，遍历结束后，栈中的点即为凸包上的点。还有就是如何判断在点的左边还是右边的问题了，用叉积即可。比如，<code>a(x1,y1)</code>和<code>b(x2,y2)</code>和<code>c(x3,y3)</code>，判断c相对于ab的位置，那就是相当于判断<code>x1*y2+x2*y3+x3*y1</code>和<code>x1*y3+x2*y1+x3*y2</code> 的大小即可。求出栈后，周长直接遍历算即可，面积则遍历求叉积相加即可(别忘除以2)。</p><p>参考： <a href="https://www.cnblogs.com/Gaxc/p/9610900.html" target="_blank" rel="noopener">https://www.cnblogs.com/Gaxc/p/9610900.html</a> </p><h3 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125; a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n,p,st[<span class="number">100005</span>],top;</span><br><span class="line"><span class="keyword">double</span> ans,miny=<span class="number">2e9</span>,minx=<span class="number">2e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node b,node c)</span> </span>&#123; <span class="comment">//极角排序</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fabs</span>((b.y-miny)*(c.x-minx)-(c.y-miny)*(b.x-minx))&lt;=<span class="number">1e-8</span>) <span class="keyword">return</span> <span class="built_in">fabs</span>(minx-b.x)&lt;<span class="built_in">fabs</span>(minx-c.x);</span><br><span class="line"><span class="keyword">return</span> (b.y-miny)*(c.x-minx)&lt;(c.y-miny)*(b.x-minx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span> </span>&#123; <span class="comment">//叉积判断</span></span><br><span class="line"><span class="keyword">return</span> ((a[b].x*a[c].y)+(a[c].x*a[d].y)+(a[d].x*a[b].y)-(a[b].x*a[d].y)-(a[c].x*a[b].y)-(a[d].x*a[c].y))&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span> </span>&#123; <span class="comment">//计算两点间的距离</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rint i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line"><span class="keyword">if</span> (a[i].y&lt;miny) &#123; <span class="comment">//寻找最下方的点</span></span><br><span class="line">miny=a[i].y;</span><br><span class="line">minx=a[i].x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp); <span class="comment">//极角排序</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">st[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">top=<span class="number">2</span>; <span class="comment">//将两个点加入栈中</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">3</span>; i&lt;=n; ++i) &#123; <span class="comment">//扫描</span></span><br><span class="line"><span class="keyword">while</span> (!check(st[top<span class="number">-1</span>],st[top],i)) top--;</span><br><span class="line">st[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;=top; ++i) <span class="comment">//计算答案</span></span><br><span class="line">ans+=dist(a[st[i<span class="number">-1</span>]].x,a[st[i<span class="number">-1</span>]].y,a[st[i]].x,a[st[i]].y);</span><br><span class="line">ans+=dist(a[st[top]].x,a[st[top]].y,a[<span class="number">1</span>].x,a[st[<span class="number">1</span>]].y);</span><br><span class="line"><span class="keyword">double</span> area=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;top;i++)&#123;</span><br><span class="line">area+=(a[st[i]].x*a[st[i+<span class="number">1</span>]].y-a[st[i+<span class="number">1</span>]].x*a[st[i]].y);</span><br><span class="line">&#125; </span><br><span class="line">area+=(a[st[top]].x*a[st[<span class="number">1</span>]].y-a[st[<span class="number">1</span>]].x*a[st[top]].y);</span><br><span class="line">area/=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf %.2lf"</span>,ans,area);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p><a href="https://accoding.cn/index" target="_blank" rel="noopener">北航OJ</a></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 综合题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约瑟夫环</title>
      <link href="/2019/11/17/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
      <url>/2019/11/17/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>主要是之前一直不知道约瑟夫环的dp解法，这里和大家分享一下。本文用三种方法给大家呈现本题。</p><h2 id="最后一条毛毛虫"><a href="#最后一条毛毛虫" class="headerlink" title="最后一条毛毛虫"></a>最后一条毛毛虫</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小D的花园里养了 n 条毛毛虫，每条毛毛虫都有自己独有的编号（从 1 到 n ）。</p><p>一开始，所有的毛毛虫都开开心心地生活在花园里，享受着食物和阳光。</p><p>直到某一天，额……它们知道自己肯定会被吃掉，所以就开始玩一个游戏，来决定被吃的顺序。游戏的方法是这样的：</p><p>所有毛毛虫按照编号顺序从 11 到 n 顺时针围成一个环，然后从 1 号毛毛虫开始顺时针依次报数，报到数字 m 的毛毛虫就出环被吃，下一条毛毛虫继续从 1 开始顺时针报数……直到所有毛毛虫都出环被吃。</p><p>那么，最后一条被吃的毛毛虫的编号是多少呢？</p><p> 时间限制：1000ms，内存限制：65536KB</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>两个正整数 n,m ，意义如题所示。</p><p>输入数据保证： 1≤n,m≤3000。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>一个正整数，代表最后一条被吃的毛毛虫的编号。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>毛毛虫被吃的顺序依次为：3、1、5、2、4 。</p><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="accoding.cn">北航OJ</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>(1) 首先很显然最简单的约瑟夫环问题，肯定用最容易理解的方法就是循环链表了。通过指针遍历、删除来完成每次的报数和出局环节，最后只剩一条毛毛虫时，就结束就可以了。虽然非常容易理解，但是代码比较长，时间花费也比较高(和后面介绍的方法相比)，但本题的限制还是可以随便AC的。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span>,*<span class="title">r</span>,*<span class="title">head</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">head=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        r=(struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">        r-&gt;num=i;</span><br><span class="line">        <span class="keyword">if</span> (head==<span class="literal">NULL</span>)</span><br><span class="line">            head=p=r;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p-&gt;next=r;          </span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=head;</span><br><span class="line">    r=p;</span><br><span class="line">    p=head;</span><br><span class="line">   <span class="keyword">while</span>(p-&gt;next!=p)&#123;</span><br><span class="line">         <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;i++)&#123;</span><br><span class="line">               r=p;</span><br><span class="line">               p=p-&gt;next;</span><br><span class="line">          &#125;</span><br><span class="line">          r-&gt;next=p-&gt;next;</span><br><span class="line">          <span class="built_in">free</span>(p);</span><br><span class="line">          p=r-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d"</span>, p-&gt;num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">insert(n,m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 第二第三种方法本质一样，只是实现方式有所区别。都是通过数学方法进行一些推导得到的。首先我们假设编号从0开始，最后求出的答案再加1就好了，所以可以知道在第一次中，肯定是叫到(m-1)%n的会出局，那么第一次出局的下一个肯定就是m%n了，如果把他当作0号，那剩下的n-1个人又组成了一个新的约瑟夫环，此时出局的就是(m-1)%(n-1)，但是因为现在的0号并不是0号，而是m%n号，所以我们得到的胜利者还要加回去，也就是((m-1)%(n-1)+m%n)%n，如果我们把第n-1次胜利者看作f(n-1)的话，那第n次的胜利者肯定就是(f(n-1)+m%n)%n，那对于第三次开始叫号也就是同样的道理，胜利者编号就为((f(n-2)+m%(n-1))%(n-1)+m%n)%n，可以看出是有规律的，我们用式子写出来就是f(n)=(f(n-1)+m%n)%n，f(n-1)=(f(n-2)+m%(n-1))%(n-1)，化简得到就一个式子f(n)=(f(n-1)+m)%n，对于n∈[0,n]都是成立的。那么我们就可以写递归代码了，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> (func(n<span class="number">-1</span>)+m)%n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,func(n) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 但是这样递归，其实多了很多重复计算的步骤，是可以优化的，即DP，所以转移方程也就是上文提到的<code>f(n)=(f(n-1)+m)%n</code>，甚至不需要数组来存，直接就能出来，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,s=<span class="number">0</span>,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    s=(s+m)%i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>有谬误敬请指出，敬请不吝赐教</p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解篇-E3</title>
      <link href="/2019/11/17/%E9%A2%98%E8%A7%A3%E7%AF%87-E3/"/>
      <url>/2019/11/17/%E9%A2%98%E8%A7%A3%E7%AF%87-E3/</url>
      
        <content type="html"><![CDATA[<h2 id="A-网络流来了"><a href="#A-网络流来了" class="headerlink" title="A-网络流来了"></a>A-网络流来了</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>想哥带着叶姐去了游乐园，有个项目可以让他们在一个m*n (m,n&lt;=30)方格中，取走一些礼物，同时要求任意2个取走的礼物所在方格没有公共边，且取出的礼物让叶姐的满意度最大。</p><p>想哥忙于学(lian)习(ai)，难以完成，所以求助于你。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第1行有2个正整数m和n，分别表示棋盘的行数和列数。</p><p>接下来的m行，每行有n个正整数，表示方格中的礼物的满意度。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p> 输出一行，为最大满意度 </p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2 3</span><br><span class="line">3 2 3</span><br><span class="line">2 3 1</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><h3 id="AC代码-EK"><a href="#AC代码-EK" class="headerlink" title="AC代码(EK)"></a>AC代码(EK)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> n,m,start,<span class="built_in">end</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">35</span>][<span class="number">35</span>],<span class="built_in">map</span>[<span class="number">1000</span>][<span class="number">1000</span>],path[<span class="number">1500</span>],flow[<span class="number">1500</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="built_in">map</span>[u][v]=c;</span><br><span class="line"><span class="built_in">map</span>[v][u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK_bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,t;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line"><span class="built_in">memset</span>(path,<span class="number">-1</span>,<span class="keyword">sizeof</span>(path));</span><br><span class="line">path[start]=<span class="number">0</span>;</span><br><span class="line">flow[start]=INF;</span><br><span class="line">q.push(start);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">t=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(t==<span class="built_in">end</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="built_in">end</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i!=start &amp;&amp; path[i]==<span class="number">-1</span> &amp;&amp; <span class="built_in">map</span>[t][i]) &#123;</span><br><span class="line">flow[i]=flow[t]&lt;<span class="built_in">map</span>[t][i]?flow[t]:<span class="built_in">map</span>[t][i];<span class="comment">// 更新流量，但不能超过容量，取更小 </span></span><br><span class="line">q.push(i);</span><br><span class="line">path[i]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(path[<span class="built_in">end</span>]==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> flow[<span class="built_in">end</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> max_flow=<span class="number">0</span>,<span class="built_in">step</span>,now,pre;</span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">step</span>=EK_bfs())!=<span class="number">-1</span>) &#123;</span><br><span class="line">max_flow+=<span class="built_in">step</span>;</span><br><span class="line">now=<span class="built_in">end</span>;</span><br><span class="line"><span class="keyword">while</span>(now!=start) &#123;</span><br><span class="line">pre=path[now];</span><br><span class="line"><span class="built_in">map</span>[pre][now]-=<span class="built_in">step</span>;<span class="comment">// 更新残余网络，因为流更新后，残余网络也更新了 </span></span><br><span class="line"><span class="built_in">map</span>[now][pre]+=<span class="built_in">step</span>;</span><br><span class="line">now=pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max_flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,cnt=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">S=<span class="number">0</span>,T=n*m+<span class="number">1</span>;</span><br><span class="line">start=S,<span class="built_in">end</span>=T;</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">sum+=a[i][j];</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>((i+j)%<span class="number">2</span>)&#123;</span><br><span class="line">insert(S,cnt,a[i][j]);</span><br><span class="line"><span class="keyword">if</span>(j&lt;n) insert(cnt,cnt+<span class="number">1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">1</span>) insert(cnt,cnt<span class="number">-1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(i&lt;m) insert(cnt,cnt+n,INF);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>) insert(cnt,cnt-n,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">insert(cnt,T,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,sum-EK());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC代码-Dinic"><a href="#AC代码-Dinic" class="headerlink" title="AC代码(Dinic)"></a>AC代码(Dinic)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 1000000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[<span class="built_in">max</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="built_in">max</span>],e_num=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">e_num++;</span><br><span class="line">e[e_num].v=v;</span><br><span class="line">e[e_num].c=c;</span><br><span class="line">e[e_num].next=head[u];</span><br><span class="line">head[u]=e_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">add(u,v,c);</span><br><span class="line">add(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> depth[<span class="built_in">max</span>];<span class="comment">// 层次网络 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;<span class="comment">//定义一个bfs寻找分层图时的队列</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">-1</span>,<span class="keyword">sizeof</span>(depth));</span><br><span class="line">    depth[S]=<span class="number">0</span>;<span class="comment">//源点深度为0</span></span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[v]==<span class="number">-1</span>)&#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">                depth[v]=depth[u]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (depth[T]!=<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;        <span class="comment">//flow表示当前搜索分支的流量上限</span></span><br><span class="line">    <span class="keyword">if</span>(u==T)&#123;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[u]+<span class="number">1</span>==depth[v])&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=dfs(v,<span class="built_in">min</span>(flow,e[i].c));    <span class="comment">// 递归计算顶点 v，用 c(u, v) 来更新当前流量上限</span></span><br><span class="line">            flow-=tmp;</span><br><span class="line">            e[i].c-=tmp;</span><br><span class="line">            res+=tmp;</span><br><span class="line">            e[i^<span class="number">1</span>].c+=tmp;      <span class="comment">// 修改反向弧的容量</span></span><br><span class="line">            <span class="keyword">if</span>(flow==<span class="number">0</span>)&#123;        <span class="comment">// 流量达到上限，不必继续搜索了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">0</span>)&#123;     <span class="comment">// 当前没有经过顶点 u 的可行流，不再搜索顶点 u</span></span><br><span class="line">        depth[u]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;        <span class="comment">// 函数返回值就是最大流的结果</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">        res+=dfs(S,INF);    <span class="comment">// 初始流量上限为 INF</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">35</span>][<span class="number">35</span>],sum=<span class="number">0</span>,eid=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    S=<span class="number">0</span>,T=n*m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">        sum+=a[i][j];</span><br><span class="line">        eid++;</span><br><span class="line"><span class="keyword">if</span>((i+j)%<span class="number">2</span>)&#123;</span><br><span class="line">insert(S,eid,a[i][j]);</span><br><span class="line"><span class="keyword">if</span>(j&lt;n) insert(eid,eid+<span class="number">1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">1</span>) insert(eid,eid<span class="number">-1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(i&lt;m) insert(eid,eid+n,INF);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>) insert(eid,eid-n,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">insert(eid,T,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,sum-dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先要弄明白是怎么化成最大流(最小割)问题的，由题可知，相邻的不让取，因此可以想到分开染色再建图即可，将一部分染成黑色，与其相邻的染成白色，然后将这些看成顶点分开放置，黑色连接源点，边权即黑色点点权(即礼物满意度)，白色连接汇点(边权等于点权同理)，相邻的黑色和白色连边，边权为INF(最大值)，然后因为要让不相邻的满意度和最大，所以即把相邻的满意度和最小求出来即可，而相邻的满意度即对应我们所建图的割(如果想不明白可以自己画图割一割)，所以我们要让相邻的满意度和最小，即求最小割即可，所以就是让我们求我们所建图的最大流，最后再用所有满意度之和减去最大流即为答案，所以套板子即可(EK、Dinic均可)。</p><h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>需要注意建图时怎样更方便，即相邻染色怎么染的问题。</p><hr><h2 id="B-婚车"><a href="#B-婚车" class="headerlink" title="B-婚车"></a>B-婚车</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>航哥是个土豪，他想在让城市布满他的婚车。但是城市的每条道路单位时间能通过的婚车是有限的，超出则会造成拥堵。他在1号点屯了足够数量的车子，他想知道从城市1号点派出婚车去n号点迎接新娘，在买通交警只允许他的婚车在车道上行驶的条件下，足够多时间之后，n号点单位时间内最多能容纳多少量婚车。</p><p>道路都是双向的</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>第一行两个整数，n和m，n为点数，m为边数，点的标号为1~n。</p><p>接下来M行，每行三个整数a, b, c, 表示城市中两个点之间有一条单位时间最多通行c辆车的道路。</p><p>建图连边之前请注意审题……</p><p>1≤n≤1000</p><p>1≤m≤100000</p><p>1≤a,b≤n,a≠b</p><p>1≤c≤10</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>  输出一个整数，点n处单位时间内最多接受的婚车数量。 </p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br><span class="line">1 2 5</span><br><span class="line">1 3 2</span><br><span class="line">1 4 3</span><br><span class="line">2 3 3</span><br><span class="line">2 4 3</span><br><span class="line">3 4 10</span><br></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> n,m,tend,start;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">1001</span>][<span class="number">1001</span>],path[<span class="number">1001</span>],flow[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK_bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,t;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line"><span class="built_in">memset</span>(path,<span class="number">-1</span>,<span class="keyword">sizeof</span>(path));</span><br><span class="line">path[start]=<span class="number">0</span>;</span><br><span class="line">flow[start]=INF;</span><br><span class="line">q.push(start);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">t=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(t==tend) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i!=start &amp;&amp; path[i]==<span class="number">-1</span> &amp;&amp; <span class="built_in">map</span>[t][i]) &#123;</span><br><span class="line">flow[i]=flow[t]&lt;<span class="built_in">map</span>[t][i]?flow[t]:<span class="built_in">map</span>[t][i];</span><br><span class="line">q.push(i);</span><br><span class="line">path[i]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(path[tend]==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> flow[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> max_flow=<span class="number">0</span>,<span class="built_in">step</span>,now,pre;</span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">step</span>=EK_bfs())!=<span class="number">-1</span>) &#123;</span><br><span class="line">max_flow+=<span class="built_in">step</span>;</span><br><span class="line">now=tend;</span><br><span class="line"><span class="keyword">while</span>(now!=start) &#123;</span><br><span class="line">pre=path[now];</span><br><span class="line"><span class="built_in">map</span>[pre][now]-=<span class="built_in">step</span>;</span><br><span class="line"><span class="built_in">map</span>[now][pre]+=<span class="built_in">step</span>;</span><br><span class="line">now=pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max_flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">tend=n,start=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="built_in">map</span>[a][b]=c;</span><br><span class="line"><span class="built_in">map</span>[b][a]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,EK());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>从题目描述可以非常清晰的知道是一道间的最大流问题，直接套板子即可(EK,Dinic均可，这里只提供EK)，唯一需要注意的就是道路是双向的，即双向边。还有就是这道题EK如果初始化不用memset可能会超时，用Dinic没有任何问题。</p><hr><h2 id="C-要成为魔法少女吗"><a href="#C-要成为魔法少女吗" class="headerlink" title="C-要成为魔法少女吗"></a>C-要成为魔法少女吗</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>酸奶酱是一位魔法少女，并且她很热衷于点化她的其他小伙伴和她一起成为魔法少女。</p><p>现在有一个棘手的问题摆在酸奶酱面前——她有M套成为魔法少女不可缺少的魔法战斗服，以及N个想成为魔法少女的小伙伴。魔法战斗服是有灵性的，它有想要跟随的主人。酸奶酱想尽可能多的把更多的魔法战斗服分给她的小伙伴，她现在想知道最多能有几套魔法战斗服能被交到她的小伙伴手里。</p><p>注意：一位小伙伴只能拿一件魔法战斗服，一件魔法战斗服也只能交给一位小伙伴。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>第一行为两个整数N和M，分别表示小伙伴的数量和魔法战斗服的数量。（0&lt;=N，M&lt;=100）</p><p>接下来M行，第i行的第一个整数K表示第i件魔法战斗服想要跟随的主人的数量。接下来K个整数num，表示魔法战斗服想要跟随的主人编号。（0&lt;=K，num&lt;=N）</p><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>对于每组数据，输出一行，为最多能送出的魔法战斗服的数量。</p><h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">1 2</span><br><span class="line">3 1 2 3</span><br><span class="line">1 1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="AC代码-最大二分匹配"><a href="#AC代码-最大二分匹配" class="headerlink" title="AC代码(最大二分匹配)"></a>AC代码(最大二分匹配)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,n,m;</span><br><span class="line"><span class="keyword">int</span> link[<span class="number">1005</span>],use[<span class="number">1005</span>],<span class="built_in">map</span>[<span class="number">105</span>][<span class="number">105</span>];<span class="comment">//map数组为邻接矩阵，use表示当前点是否匹配，link[i]表示与顶点i所连的点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!use[i]&amp;&amp; <span class="built_in">map</span>[x][i]) &#123; <span class="comment">//若不在交替路中</span></span><br><span class="line">use[i] = <span class="number">1</span>;<span class="comment">//则加入交替路</span></span><br><span class="line"><span class="keyword">if</span>(!link[i] || dfs(link[i])) &#123;</span><br><span class="line">link[i] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xyl</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(link, <span class="number">0</span>, <span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">memset</span>(use,<span class="number">0</span>,<span class="keyword">sizeof</span>(use));</span><br><span class="line"><span class="keyword">if</span>(dfs(i)) ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k,num;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>],b[<span class="number">10005</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>, <span class="literal">false</span>, <span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line"><span class="built_in">map</span>[i][num]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(i=1; i&lt;=n; i++) &#123;</span></span><br><span class="line"><span class="comment">scanf("%d",&amp;a[i]);</span></span><br><span class="line"><span class="comment">map[i][a[i]]=true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for(i=1; i&lt;=n; i++) &#123;</span></span><br><span class="line"><span class="comment">scanf("%d",&amp;b[i]);</span></span><br><span class="line"><span class="comment">map[b[i]][i]=true;</span></span><br><span class="line"><span class="comment">&#125; //输入map*/</span></span><br><span class="line">xyl();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="comment">// ans为最大匹配数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC代码-贪心"><a href="#AC代码-贪心" class="headerlink" title="AC代码(贪心)"></a>AC代码(贪心)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> times[<span class="number">105</span>]=&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">105</span>];</span><br><span class="line">&#125;a[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a,<span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum1=<span class="number">0</span>,sum2=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">c=*(struct node *)a;</span><br><span class="line">d=*(struct node *)b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.k;i++) sum1+=times[c.num[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d.k;i++) sum2+=times[d.num[i]];</span><br><span class="line"><span class="keyword">if</span>(c.k!=d.k) <span class="keyword">return</span> c.k&gt;d.k;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> sum1&gt;sum2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a,<span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c,d;</span><br><span class="line">c=*(<span class="keyword">int</span> *)a;</span><br><span class="line">d=*(<span class="keyword">int</span> *)b;</span><br><span class="line"><span class="keyword">return</span> times[c]&gt;times[d];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,i,j,ans=<span class="number">0</span>,flag[<span class="number">105</span>]=&#123;&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].k);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;a[i].k;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].num[j]);</span><br><span class="line">times[a[i].num[j]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">qsort(a,m,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">qsort(a[i].num,a[i].k,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),cmp2);<span class="comment">// 这里没有必要排序的，在下面取的时候遍历取最小值即可，抱歉没有改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;a[i].k;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag[a[i].num[j]])&#123;</span><br><span class="line">flag[a[i].num[j]]=<span class="number">1</span>;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>很明显这是一道最大二分匹配的问题，还是简简单单套板子即可(匈牙利算法)。</p><p>然后后来发现可以用贪心做这道题。首先可以知道如果魔法战斗服只想跟随一个魔法少女，那肯定是要先对它进行分配的，所以首先肯定对魔法战斗服想跟随的魔法少女的数量进行排序。再考虑这种情况：如果魔法战斗服(把它称为<code>a</code>)最少都有两个想跟随的魔法少女的话，那么该怎么选择呢，肯定需要对想跟随这两个魔法少女的所有魔法战斗服的数量进行排序，并且把<code>a</code>战斗服给想跟随的魔法战斗服的数量更少的那一位。还有一种情况：两件魔法战斗服想跟随的魔法少女数量相同，这时还是需要对这两件魔法战斗服想跟随的所有魔法少女，求出想跟随她们的所有魔法战斗服的数量总和然后进行排序，对更小的先取即可。所以将上面所有情况考虑即可。(然后本人还了解到有其他贪心的方法，即将魔法少女作为结构体来处理而非魔法战斗服，这里不再赘述，供读者自行思考)</p><hr><h2 id="D-SkyLee的脱单大计"><a href="#D-SkyLee的脱单大计" class="headerlink" title="D-SkyLee的脱单大计"></a>D-SkyLee的脱单大计</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>SkyLee想要脱单，可是他又不想拆散可能在一起的有缘人，毕竟SkyLee是一个善良的人。</p><p>SkyLee想知道最理想的情况下，即可能在一起的人数最多时，还有哪些女生仍然是单身。假设学校男女比非常和谐，恰好为1：1</p><p> 时间限制：1000ms，内存限制：65536kb </p><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>多组数据输入</p><p>第一行一个整数n，为学校男生数量或女生数量（都一样的啦）保证n&lt;10000</p><p>接下来1行，每行n个整数a[i] (表示男生i暗恋的女生编号)</p><p>接下来1行，每行n个整数b[i] (表示女生i暗恋的男生编号)</p><p>（如果暗恋的人编号为0说明没有暗恋的人）</p><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>对于每组数据，输出一行，为最后剩下的女生的人数</p><h3 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 1 1</span><br><span class="line">2 0 1</span><br></pre></td></tr></table></figure><h3 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="AC代码-二分匹配"><a href="#AC代码-二分匹配" class="headerlink" title="AC代码(二分匹配)"></a>AC代码(二分匹配)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,n,dis;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">10005</span>],dy[<span class="number">10005</span>],cx[<span class="number">10005</span>],cy[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> man[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> woman[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">searchP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    dis=inf;</span><br><span class="line">    <span class="built_in">memset</span>(dx,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dx));</span><br><span class="line">    <span class="built_in">memset</span>(dy,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dy));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cx[i]==<span class="number">-1</span>) &#123;q.push(i);dx[i]=<span class="number">0</span>;&#125;<span class="comment">//对于未遍历的点入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备分层</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(dx[u]&gt;dis) <span class="keyword">break</span>;<span class="comment">//如果目前的层次大于最小增广长度，那么退出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)<span class="comment">//对于一切可能的点遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((man[u]==j||woman[j]==u)&amp;&amp;dy[j]==<span class="number">-1</span>)&#123;<span class="comment">//只对未分层的点遍历</span></span><br><span class="line">                dy[j]=dx[u]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(cy[j]==<span class="number">-1</span>) dis=dy[j];</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dx[cy[j]]=dy[j]+<span class="number">1</span>;</span><br><span class="line">                    q.push(cy[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis!=inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findpath</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[j]&amp;&amp;(man[x]==j||woman[j]==x)&amp;&amp;dy[j]==dx[x]+<span class="number">1</span>)<span class="comment">//符合继续搜索的条件有三个：未访问过，图上联通和层次符合</span></span><br><span class="line">        &#123;</span><br><span class="line">            used[j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(cy[j]!=<span class="number">-1</span>&amp;&amp;dis==dy[j]) <span class="keyword">continue</span>;<span class="comment">//如果下一个点还是匹配点且目前已经到达增广最小层次，不需要扩展了</span></span><br><span class="line">            <span class="keyword">if</span>(cy[j]==<span class="number">-1</span>||findpath(cy[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                cy[j]=x;cx[x]=j;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hk</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(cx,<span class="number">-1</span>,<span class="keyword">sizeof</span>(cx));</span><br><span class="line">    <span class="built_in">memset</span>(cy,<span class="number">-1</span>,<span class="keyword">sizeof</span>(cy));</span><br><span class="line">    <span class="keyword">while</span>(searchP())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cx[i]==<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(findpath(i)) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>],b[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">man[i]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">woman[i]=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-hk());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC代码-贪心-1"><a href="#AC代码-贪心-1" class="headerlink" title="AC代码(贪心)"></a>AC代码(贪心)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ttime[<span class="number">10005</span>]=&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">man</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> times;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line">&#125;woman[<span class="number">10005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a,<span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">man</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line"><span class="keyword">int</span> sumc=<span class="number">0</span>,sumd=<span class="number">0</span>;</span><br><span class="line">c=*(struct man*)a;</span><br><span class="line">d=*(struct man*)b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c.times;i++)&#123;</span><br><span class="line">sumc+=ttime[c.num[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d.times;i++)&#123;</span><br><span class="line">sumd+=ttime[d.num[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c.times==d.times)&#123;</span><br><span class="line">sumc&gt;sumd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.times&gt;d.times;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">com</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ttime[a]&gt;ttime[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j,wom,flag[<span class="number">10005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">woman[i].times=<span class="number">0</span>;</span><br><span class="line">woman[i].num.<span class="built_in">clear</span>();</span><br><span class="line">ttime[i]=<span class="number">0</span>;</span><br><span class="line">flag[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;wom);</span><br><span class="line"><span class="keyword">if</span>(wom) &#123;</span><br><span class="line">ttime[i]++;</span><br><span class="line">woman[wom].times++;</span><br><span class="line"><span class="keyword">if</span>(woman[wom].num.empty())&#123;</span><br><span class="line">woman[wom].num.push_back(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">woman[wom].num.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;wom); </span><br><span class="line"><span class="keyword">if</span>(wom) &#123;</span><br><span class="line">ttime[wom]++;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;woman[i].num.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(woman[i].num[j]==wom) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==woman[i].num.<span class="built_in">size</span>())&#123;</span><br><span class="line">woman[i].times++;</span><br><span class="line"><span class="keyword">if</span>(woman[i].num.empty())&#123;</span><br><span class="line">woman[i].num.push_back(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">woman[i].num.push_back(wom);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">qsort(woman,n,<span class="keyword">sizeof</span>(struct man),cmp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">min</span>=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=woman[i].times;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=woman[i].num[j];</span><br><span class="line"><span class="comment">/*if(woman[i].times&gt;1)&#123;</span></span><br><span class="line"><span class="comment">sort(woman[i].num.begin(),woman[i].num.end(),com);</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=woman[i].times;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(woman[i].num[j]&lt;<span class="built_in">min</span>) <span class="built_in">min</span>=woman[i].num[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*if(!flag[woman[i].num[j]])&#123;</span></span><br><span class="line"><span class="comment">flag[woman[i].num[j]]=1;</span></span><br><span class="line"><span class="comment">ans++;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">if</span>(!flag[<span class="built_in">min</span>])&#123;</span><br><span class="line">flag[<span class="built_in">min</span>]=<span class="number">1</span>;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>从题目可以看出这是一道非常明显的二分匹配，但是注意给出的n&lt;10000并且内存只有65536KB，如果直接建图，肯定分分钟MLE，所以需要一些技巧，因为从题意可以知道，每个男生只有一个心仪的女生，同样对女生也同样。所以我们可以直接定义两个一维数组(woman[]和man[])即可，这样内存完全够用，然后在判断的时候就不用判断是否为<code>true</code>了，而是判断<code>man[u]==[v],woman[v]==u</code>即可。然后还是套板子就可以了(匈牙利、HK均可，这里用的HK)</p><p>从上一题的贪心可以知道，这道题肯定是可以贪心解决的，具体就不赘述，一样的道理。只要注意使用vector就可以了。</p><hr><h2 id="E-计网的烦恼"><a href="#E-计网的烦恼" class="headerlink" title="E-计网的烦恼"></a>E-计网的烦恼</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>计网课上有一道题：一条街道安装无线网络，需要放置M个路由器。整条街道上一共有N户居民，分布在一条直线上，每一户居民必须被至少一台路由器覆盖到。现在的问题是所有路由器的覆盖半径是一样的，我们希望用覆盖半径尽可能小的路由器来完成任务，因为这样可以节省成本。</p><h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>输入第一行包含两个整数M和N，以下N行每行一个整数Hi表示该户居民在街道上相对于某个点的坐标。</p><h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>输出仅包含一个数，表示最小的覆盖半径，保留一位小数。</p><h3 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.0</span><br></pre></td></tr></table></figure><h3 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h3><p>【样例输出】（在2，10位置上各放一个）</p><p>【数据规模】</p><p>对于100%的数据，有1 ≤N, M ≤100000，-10000000 ≤Hi ≤10000000。</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[MaxSize], B[MaxSize];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is</span><span class="params">(<span class="keyword">double</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]-cur&gt;<span class="number">2</span>*t)&#123;</span><br><span class="line">cnt++;</span><br><span class="line">cur = a[i];</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n);</span><br><span class="line"><span class="keyword">double</span> left = <span class="number">0</span>, right = <span class="number">10000000</span>, mid, ans;</span><br><span class="line"><span class="keyword">while</span> (right - left &gt;= <span class="number">1e-9</span>) &#123;</span><br><span class="line">mid= (left + right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (is(mid))&#123;</span><br><span class="line">left = mid;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">right = mid;</span><br><span class="line">ans = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1lf"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>这是一道很明显的二分题，同时是一维的覆盖。原理如下：我们找一个半径去覆盖所有，如果不能覆盖，则把半径变大，如果已经完全覆盖了，则把半径减小。怎么判断是否已经覆盖了呢，我们同时通过计数器来判断是否到达<code>m</code>然后如果没有覆盖，则让该坐标最为下次的起始位置即可，详情可查看代码。</p><hr><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p><a href="https://accoding.cn/index" target="_blank" rel="noopener">北航OJ</a></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 网络流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prince and Princess</title>
      <link href="/2019/11/12/Prince-and-Princess/"/>
      <url>/2019/11/12/Prince-and-Princess/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>这是突然看到的一个非常有意思的题，是ACM-ICPC的原题，在这里稍微做一些分析，希望对大家有帮助。</p><h2 id="Prince-and-Princess"><a href="#Prince-and-Princess" class="headerlink" title="Prince and Princess"></a>Prince and Princess</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><hr><p>王子<code>m</code>和公主<code>Hff</code>相爱，想要娶公主。虽然公主非常愿意，但是并不是王国里每个人都支持这一场婚姻。而为了娶到公主，王子需要完成一个挑战：在n个房间中找出公主在哪。</p><p>每个房间有一个人，他们彼此知道谁在哪个房间。可以每次问任意一个房间里的人三种问题之一：</p><p>1、你的名字是什么？</p><p>2、在第xx个房间里的人的名字是什么？</p><p>3、公主在哪个房间？</p><p>这n个人可以分为三类：一类支持婚姻，一定说真话；一类反对婚姻，一定说假话；一类立场不确定，可能说真话可能说假话。</p><p>王子知道这三类人的人数分别为 a,b,c，求能否通过问若干个问题保证找到公主在哪，如果能，输出<code>YES</code>和最少需要的问题数；如果不能，输出<code>NO</code>。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><hr><p>第一行一个整数n表示数据组数</p><p>接下来n行，每行3个整数a,b,c</p><p>数据范围：1≤a≤10000，0≤b≤10000，0≤c≤10000</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><hr><p>对于每组数据：</p><p>若能问到公主在哪，输出两行：第一行为：<code>YES</code>，第二行输出一个整数表示答案。</p><p>若不能，输出一行：<code>NO</code></p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 2 0</span><br><span class="line">2 0 0</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>&amp;&amp;c==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&gt;b+c)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">2</span>*b+<span class="number">2</span>*c+<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><hr><p>因为我们分析的是最坏的情况，所以，最坏情况下，c对应的所有人都说假话即可，然后我们再考虑下面这种情况：只有两个人，一个说真话，一个说假话。大家可以自行分析一下，可以发现这是无法得到公主在哪个房间的，并且通过这里，我们可以知道，其实只有第三个问题是有价值的，所以在说真话和说假话的人数相同的时候，我们是推不出来的，所以我们可以直接推广到<code>a&lt;=b+c</code>的情况是无法推出来的，所以我们只用考虑<code>a&gt;b+c</code>即可。因为王子是知道a、b、c所对应的人的数目的，所以<code>a&gt;b+c</code>是肯定能推出来的，只用问第三个问题即可，找出答案中数目最多的房间即公主所在房间，那么需要问的次数则是<code>2\*b+2\*c+1</code>，为什么呢，因为b和c是必须要问完的，然后在a中问比b+c多一个问题就可以得到答案了。然后是特殊情况的分析，即a=1，b=0，c=0的情况，是不用问就能知道的。</p><h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><hr><p>无</p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划(DP)——背包问题</title>
      <link href="/2019/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="背包问题（简单DP）"><a href="#背包问题（简单DP）" class="headerlink" title="背包问题（简单DP）"></a>背包问题（简单DP）</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><hr><p>该讲主要介绍三类背包问题，都是比较经典的DP问题，比之前所讲的股票问题难度有所提升。</p><h3 id="背包Ⅰ-01背包"><a href="#背包Ⅰ-01背包" class="headerlink" title="背包Ⅰ(01背包)"></a>背包Ⅰ(01背包)</h3><h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><hr><p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。 </p><p>时间限制：5000ms，内存限制：65536kb</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n，v，表示物品的数量和背包的容量。(1≤n≤500,1≤v≤30000)</p><p>接下来n行，每行两个整数，表示物品的费用和价值(1≤c<sub>i</sub>,w<sub>i</sub>≤500)</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 6</span><br><span class="line">2 1</span><br><span class="line">3 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[505];</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30005</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,val,vmax=<span class="number">0</span>,i,j,v;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;val))&#123;</span><br><span class="line">vmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].price,&amp;a[i].value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=val;i++)&#123;</span><br><span class="line">b[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(v=val;v&gt;=a[i].price;v--)&#123;</span><br><span class="line">b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b[val]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是直接从DP的角度开始分析这个问题，这是一个01背包问题，我们先假设一些变量，<kbd>b[i,j]</kbd>表示当前背包被占用的容量是<kbd>j</kbd>的情况下，前<kbd>i</kbd>个物品的最佳组合的总价值。<kbd>a[i].price</kbd>和<kbd>a[i].value</kbd>即表示当前商品所需要的容量和当前商品的价值。然后对于当前这个商品有以下两种可能：</p><ul><li>包剩余的容量不够装当前商品，总价值保持不变，不装入该商品，即<kbd>b[i,j]=b[i-1,j]</kbd>;</li><li>有足够容量装该商品，但是装了之后不一定是最佳的价值(因为占用了容量无法保证后面商品是否更好)，需要一个选择，即<kbd>b[i,j]=max(b[i-1,j],b[i-1,j-a[i].price]+a[i].value)</kbd>;</li></ul><p>第二个式子怎么理解呢，如果当前产品装进去了，那么装入之前的状态就是<kbd>b[i-1,j-a[i].price]</kbd>，这样说应该比较好理解了。然后这样我们可以得到一个转移方程如下，当然可以通过初始赋值将其转化为一个方程，代码实现我也放在下方。</p><ul><li>j&gt;=a[i].price: b[i,j]=max(b[i-1，j],b[i-1，j-a[i].price]+a[i].value)</li><li>j&lt;a[i].price: b[i，j]=b[i-1，j]</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=v;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=a[i].price)&#123;</span><br><span class="line">            b[i][j]=<span class="built_in">max</span>(b[i<span class="number">-1</span>][j],b[i<span class="number">-1</span>][j-a[i].price]+a[i].value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            b[i][j]=b[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>上文这样确实是能够解决问题，但其实是可以再进行优化的，从二维数组优化到一维数组来解决。因为我们可以知道每一次往二维数组<kbd>b[i,j]</kbd>中写入数据的时候都是从上一次得到的数据来写入的，其实<kbd>i</kbd>就变得没有必要了，因为总是从<kbd>b[i-1,...]</kbd>中获取数据的，因此只需要一维数组即可，但是对于<kbd>j</kbd>来说，则需要一点思考，到底是由顶向下还是由底向上循环。假设考虑由底向上循环，我们考虑模拟取第<kbd>i</kbd>件物品的情况，<kbd>v</kbd>应该是从<kbd>a[i].price</kbd>到<kbd>val</kbd>的，那么在最开始的时候就相当于模拟取了一件了，那么在<kbd>v</kbd>取到<kbd>2*a[i].price</kbd>的时候，就相当于模拟取了两个第<kbd>i</kbd>件了，这明显是与题意不符的(这是后面会说到的完全背包)，所以我们采用由顶向下的循环就不会出现这种问题了。大家如果还不明白可以自己画画图推一推就好了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(v=val;v&gt;=<span class="number">1</span>;v--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v&gt;=a[i].price) b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>b[j]=max(b[j],b[j-a[i].price]+a[i].value)</li></ul><h4 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h4><hr><p>注意初始化。</p><hr><hr><h3 id="背包Ⅱ-完全背包"><a href="#背包Ⅱ-完全背包" class="headerlink" title="背包Ⅱ(完全背包)"></a>背包Ⅱ(完全背包)</h3><h4 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h4><hr><p>有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p><p>时间限制：1000ms，内存限制：65536kb</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n，v，表示物品的数量和背包的容量。(1≤n≤500,1≤v≤30000)</p><p>接下来n行，每行两个整数，表示物品的费用和价值(1≤c<sub>i</sub>,w<sub>i</sub>≤500)</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 6</span><br><span class="line">2 1</span><br><span class="line">3 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[505];</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30005</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,val,vmax=<span class="number">0</span>,i,j,v;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;val))&#123;</span><br><span class="line">vmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].price,&amp;a[i].value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=val;i++)&#123;</span><br><span class="line">b[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(v=a[i].price;v&lt;=val;v++)&#123;</span><br><span class="line">b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b[val]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><hr><p>刚拿到这个题目相信大家很容易从贪心的思想去解决，其实是错误的，因为这个容量是有限的，不可分割的，即使我们算出平均最大价值，但是装入背包时其容量还是不可分割的，所以贪心肯定是没法实现的，其他具体不能用贪心的原因，在此也不再赘述。</p><p>然后我们还是直接从DP的角度开始分析这个问题，这是一个完全背包问题，我们还是先假设一些变量，<kbd>b[i,j]</kbd>表示当前背包被占用的容量是<kbd>j</kbd>的情况下，前<kbd>i</kbd>个物品的最佳组合的总价值。<kbd>a[i].price</kbd>和<kbd>a[i].value</kbd>即表示当前商品所需要的容量和当前商品的价值。然后对于当前这个商品有<kbd>k</kbd>种选择，因为可以选择<kbd>k=0,1,2....</kbd>个当前的物品种数，只要不超过背包总容量即可，所以我们直接给出转移方程：</p><ul><li>b[i,j] = max(b[i-1,j-k*a[i].price]+k*a[i].value)    0&lt;=k*a[i].price&lt;=j</li></ul><p>这里就不贴代码了，因为很明显时间复杂度太大，需要三个循环才能实现，并且还不是那么容易。所以我们直接开始说优化的过程。还是同样先优化为一维数组。因为每次取物品的时候都是可以无限量的取的，所以我们的<kbd>k</kbd>就可以省略了，直接采用两重循环实现，并且要保证每次的量的无限，我们的<kbd>j</kbd>的循环则需要从小到大进行循环，代码如下文所示。为什么呢，在这里举个例子说明以下吧：假设我们取第<kbd>i</kbd>件物品需要取<kbd>j</kbd>件才能满足最大价值的时候，我们的第二重循环运转的时候，<kbd>v</kbd>是从<kbd>a[i].price</kbd>一直循环到<kbd>val</kbd>也就是我们可以在取了一次后，<kbd>b[v]</kbd>更新，这样在<kbd>v</kbd>取到<kbd>2*a[i].price</kbd>的时候就能模拟第二次取，并且此时的<kbd>b[v-a[i].price]</kbd>是之前第一次取后更新了过后的值，这样一直循环下去便实现了模拟取无穷次的过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(v=<span class="number">1</span>;v&lt;=val;v++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v&gt;=a[i].price) b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转移方程-1"><a href="#转移方程-1" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>b[j]=max(b[j],b[j-a[i].price]+a[i].value)</li></ul><h4 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h4><hr><p>注意初始化。</p><hr><hr><h3 id="背包Ⅲ-多重背包"><a href="#背包Ⅲ-多重背包" class="headerlink" title="背包Ⅲ(多重背包)"></a>背包Ⅲ(多重背包)</h3><h4 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h4><hr><p> 有N种物品和一个容量为V的背包。第i种物品最多有m[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p><p>时间限制：1000ms，内存限制：65536kb</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n，v，表示物品的数量和背包的容量。(1≤n≤500,1≤v≤30000)</p><p>接下来n行，每行三个整数，表示物品的费用,价值,数量(1≤c<sub>i</sub>,w<sub>i</sub>≤500,1≤m<sub>i</sub>≤200) </p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 10</span><br><span class="line">2 1 3</span><br><span class="line">3 2 2</span><br></pre></td></tr></table></figure><h4 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[505];</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30005</span>]=&#123;&#125;,val;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZeroOnePack</span><span class="params">(<span class="keyword">int</span> *b,<span class="keyword">int</span> price,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span>(v=val;v&gt;=price;v--)&#123;</span><br><span class="line">b[v]=<span class="built_in">max</span>(b[v],b[v-price]+value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CompletePack</span><span class="params">(<span class="keyword">int</span> *b,<span class="keyword">int</span> price,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span>(v=price;v&lt;=val;v++)&#123;</span><br><span class="line">b[v]=<span class="built_in">max</span>(b[v],b[v-price]+value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultiplePack</span><span class="params">(<span class="keyword">int</span> *b,<span class="keyword">int</span> price,<span class="keyword">int</span> value,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (price*num&gt;=val)&#123;</span><br><span class="line">CompletePack(b,price,value);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k&lt;num)&#123;</span><br><span class="line">ZeroOnePack(b,k*price,k*value);</span><br><span class="line">num=num-k; </span><br><span class="line">k=<span class="number">2</span>*k; </span><br><span class="line">&#125;</span><br><span class="line">ZeroOnePack(b,price*num,value*num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j,v;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;val))&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a[i].price,&amp;a[i].value,&amp;a[i].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=val;i++)&#123;</span><br><span class="line">b[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">MultiplePack(b,a[i].price,a[i].value,a[i].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b[val]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是从最简单的方法开始分析，因为多重背包，我们直接将某个物品拆成<kbd>m[i]</kbd>个同样的物品，只不过每件物品只能取一次，这样就变成了我们上文说到的01背包了，方法非常的简单。转移方程给在下方：</p><ul><li>b[i,j]=max(b[i-1,j-k*a[i].price]+k*a[i].value) 0&lt;=k&lt;=m[i]</li></ul><p>这样的时间复杂度为<kbd>O(V*Σn)</kbd>，我们可以对其进行优化，如何优化呢，我们直接引入二进制来优化，将第<kbd>i</kbd>件物品分成若干件物品，，每个物品的数目，分别为1,2,4,8,….,2<sup>k-1</sup>,n-2<sup>k</sup>+1，k是满足n-2<sup>k</sup>+1&gt;0的最大整数。如果不够明白，举个例子，假设某物品有49件，那么可以分为49=1+2+4+8+16+18这5件物品，并且1~49间的任何数都可以由这五件物品构成，所以这样应该比较容易理解了。所以时间复杂度也降为<kbd>O(V*Σlogn)</kbd>了。</p><p>那应该怎么实现呢，首先对于第<kbd>i</kbd>件物品来说，如果<kbd>a[i].price*a[i].num>=val</kbd>即如果没法全部装下的话，就不用将其全部拆分了，直接当作完全背包处理就好，模拟出装几件该物品更好即可(如果不太理解可以去看上文的完全背包的分析)。如果是小于的话，那我们就采用拆分的办法即可，代码给出在下方。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultiplePack</span><span class="params">(<span class="keyword">int</span> *b,<span class="keyword">int</span> price,<span class="keyword">int</span> value,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (price*num&gt;=val)&#123;</span><br><span class="line">CompletePack(b,price,value);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k&lt;num)&#123;</span><br><span class="line">ZeroOnePack(b,k*price,k*value);</span><br><span class="line">num=num-k; </span><br><span class="line">k=<span class="number">2</span>*k; </span><br><span class="line">&#125;</span><br><span class="line">ZeroOnePack(b,price*num,value*num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HINT-2"><a href="#HINT-2" class="headerlink" title="HINT"></a>HINT</h4><hr><p>其实还可以更深度的优化到<kbd>O(V*n)</kbd>需要用到优先队列，在本文不再赘述，供大家思考。</p><hr><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr><p>《背包九讲》</p><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><hr><p><a href="https://accoding.cn/index" target="_blank" rel="noopener">北航OJ</a></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建(hexo-Github)博客</title>
      <link href="/2019/11/10/%E6%90%AD%E5%BB%BAhexo-Github%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/10/%E6%90%AD%E5%BB%BAhexo-Github%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><hr><p>本文主要向大家介绍了如何搭建hexo-Github博客的详细过程，有需要的朋友们可以尝试阅读，希望对大家有帮助。</p><h3 id="简要吐槽"><a href="#简要吐槽" class="headerlink" title="简要吐槽"></a>简要吐槽</h3><hr><p>搭博客其实没那么麻烦，但是在网上各类教程的“指导下”，我不知道放弃了多少次又重新试了多少次，大部分还是得靠自己。。。<br>今天在这里给大家简要分享一下我搭博客(hexo-Github)的教程，基于自己很多很多日日夜夜的尝试与摸索后的经验教训，希望对大家有一些帮助。</p><h3 id="直入主题"><a href="#直入主题" class="headerlink" title="直入主题"></a>直入主题</h3><hr><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><hr><p>首先需要三个工具，git、npm、node.js。可以在windows下用命令行(win+R)验证一下(如下)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>只要显示了版本号即证明OK。如果没有的话可以去官网下载安装即可(下方附上官网地址)，并且不要忘了添加环境变量不然还是看不到版本号也没法在命令行里使用这三个命令。</p><p> <a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">git安装地址</a></p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js安装地址</a>(安装这个就包含了npm)</p><h4 id="在Github上搭建仓库"><a href="#在Github上搭建仓库" class="headerlink" title="在Github上搭建仓库"></a>在Github上搭建仓库</h4><hr><p>首先需要注册一个Github账号(需要邮箱)，然后进入后点击右上角的人脸选择<strong>your repositories</strong>(如下图)</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/1.jpg" alt="blog1"></p><hr><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/2.jpg" alt="blog2"></p><p>然后点击右上角绿色的new(如上图)创建一个自己的仓库，进入后就会出现下面这个界面</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/3.jpg" alt="blog1"></p><p>图中打了×的都是可填可不填的，description就是一个简单的描述，public和private就是选择你的项目是否公开，但是private需要花钱，最后那个是添加一个README文件可有可无。但是最重要的是第一个打勾的地方，要搭建博客的话这个仓库名称必须是“username”.github.io，username是你自己的账号名字，如上图我的仓库名称就应该为DbettKK.github.io(!!!!!千万不要写错，不然还得删了重来，本人不知道删过多少次了)，最后点击create repository即可。进去后还要记住那个https后面(如下图)的地址后面还有用。</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/4.jpg" alt="blog4"></p><h4 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h4><hr><h5 id="为啥要配置这个"><a href="#为啥要配置这个" class="headerlink" title="为啥要配置这个"></a>为啥要配置这个</h5><hr><p>因为提交代码是需要GitHub权限的，就相当于每次都需要输入你的邮箱和密码，非常的麻烦和容易出错，有了这个SSH key就能让本地和GitHub服务器连接起来，以上的问题就迎刃而解，非常的方便与安全。</p><h5 id="生成本地SSH-key"><a href="#生成本地SSH-key" class="headerlink" title="生成本地SSH key"></a>生成本地SSH key</h5><hr><p>可以先用以下代码在GIT BASH中查看本机是否已经有SSH存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh</span><br></pre></td></tr></table></figure><p>如果显示No such file……就说明需要重新生成，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>邮箱地址是你自己的GitHub邮箱地址即”[username].github.io”，然后连续敲几次回车即可，这个SSH key就保存在C盘用户目录里的.ssh文件夹里，然后找到该文件夹里的id_rsa.pub文件，用记事本打开并且复制里面的全部内容，在你的GitHub中还是点击右上角的人脸选择settings(这里就不配图了)，然后选择左边的SSH and GPG keys(如下图)，并且选择新增SSH keys，下图中的title可以随意填写，Key就是把你之前复制的粘贴下来点击Add SSH key即可完成，完成后就能看到自己的SSH key了。</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/5.jpg" alt="update5"></p><h5 id="测试成功与否"><a href="#测试成功与否" class="headerlink" title="测试成功与否"></a>测试成功与否</h5><hr><p>在git bash里输入一下命令进行验证是否连接成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>上面那个邮箱地址是不用更改的，就这样写就可以了，如果有需要输入的就输入yes/y就可以了，最后如果看到其中显示<strong><em>Hi …..! You’ve successfully……</em></strong>就说明配置成功了。</p><h5 id="将git与Github绑定"><a href="#将git与Github绑定" class="headerlink" title="将git与Github绑定"></a>将git与Github绑定</h5><hr><p>在git bash中输入以下命令将git与你的GitHub账号和邮箱绑定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;.....&quot;</span><br><span class="line">git config --global user.email &quot;...@...&quot;</span><br></pre></td></tr></table></figure><p>上面引号中的内容都填写你自己的账号用户名和邮箱即可。</p><h4 id="开始配置Hexo"><a href="#开始配置Hexo" class="headerlink" title="开始配置Hexo"></a>开始配置Hexo</h4><hr><h5 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h5><hr><p>Hexo是个静态页面生成、上传的工具。可以将我们写的.md文件生成静态的html网页，然后再将这个网页上传到服务器。使用非常的方便、简洁。下方给一个主页地址，有非常详细的介绍，这里不再赘述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hexo.io/zh-cn/</span><br></pre></td></tr></table></figure><h5 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h5><hr><p>Hexo的安装不需要去官网，直接再git bush中就能完成，在任意地方打开git bash，然后输入一下命令进行安装，可能需要等一会，这个过程不要去乱按键盘即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>等到有版本号出来的时候就说明安装完成了，然后进行下一步，初始化hexo，现在自己找一个位置新建一个文件夹hexo(什么名字都可以，我写hexo方便下文描述)，这也就是你之后写博客、存放代码的位置，所以选择还是慎重一些。然后进去这个文件夹，右键git bash here打开git bash然后输入一下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这个过程还是不短，还是耐心等待一会啦，最后初始化完之后，这个文件夹里应该会有以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">public # 这个里面是存放源码的地方，一般用不到。</span><br><span class="line">scaffolds</span><br><span class="line">source # 这个里面会有一个_posts，_posts里就是你写.md文档的地方，那里面可能会有默认的一个.md。</span><br><span class="line">themes # 这个是主题，最开始里面应该都只有一个landscape，有需要可以去官网下载。</span><br><span class="line">.gitignore</span><br><span class="line">_config.yml # 这个是配置文件，很多操作都需要对它进行编辑修改。</span><br><span class="line">db.json # 这个及后面的暂时不介绍，暂时用不到。</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>然后就可以查看自己博客的初始状态啦，当然只能在本地服务器查看，因为还没有上传到github。用以下命令来查看，还是在刚刚下载好的地方用git bash，后文若无特殊说明，都是在此目录下打开git bash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 这个命令用于将source/_posts/里的.md文件生成到自己的博客上（本地）</span><br><span class="line">hexo s # 这个命令用于启动本地的服务器，使用这个命令就可以开始访问啦</span><br></pre></td></tr></table></figure><p>输入命令hexo s命令后，应该出现以下内容，此时就可以在本地网站里输入下方的网址进行访问啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>进入后应该能看到自己博客最初始的状态啦，里面应该只有一个内容就是hello world，不过之后可以自己添加啦。</p><h5 id="Hexo一些配置"><a href="#Hexo一些配置" class="headerlink" title="Hexo一些配置"></a>Hexo一些配置</h5><hr><p>因为要上传到github，所以还需要配置一些东西才行。首先是在_config,yml里修改，首先用记事本或者其他编辑软件打开(个人比较推荐editplus)，在其最后有一个deploy的部分进行修改。修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:[username]/[username].github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>其中的username还是你自己的用户名。然后还需要在git bush中安装一个小插件，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后就可以开始上传啦，使用以下命令进行上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo d # 这个指令用于上传</span><br><span class="line">也可以两个合为 hexo g -d使用</span><br></pre></td></tr></table></figure><p>然后在网址里输入[username].github.io就能访问自己的博客啦，当然别人也同样可以啦。</p><h5 id="配置一下自己的博客"><a href="#配置一下自己的博客" class="headerlink" title="配置一下自己的博客"></a>配置一下自己的博客</h5><hr><p>虽然已经可以进行线上访问了，但是博客还是需要名字的呀，不然大家都是hexo了。修改方式还是非常简单的，首先找到根目录下的_config.yml文件还是用编辑软件打开，打开后可以看到一个# Site 的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo # 就是博客的大标题啦</span><br><span class="line">subtitle: &apos;&apos; # 副标题</span><br><span class="line">description: &apos;&apos; # 简单描述</span><br><span class="line">keywords: &apos;&apos; </span><br><span class="line">author: &apos;&apos; # 作者名，在文末会看到哦</span><br><span class="line">language: en # 语言，这里是英文，中文是zh-CN</span><br><span class="line">timezone: &apos;&apos;</span><br></pre></td></tr></table></figure><p>然后对其中的内容进行修改就可以啦，修改的时候记得去掉’ ‘哦</p><h5 id="具体怎么写博客呢"><a href="#具体怎么写博客呢" class="headerlink" title="具体怎么写博客呢"></a>具体怎么写博客呢</h5><hr><p>具体怎么写呢，非常简单，就是写.md文件就可以了，使用以下命令来新建一个.md 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;你喜欢的名字都可以&quot;</span><br></pre></td></tr></table></figure><p>或者也可以直接在source/_posts/目录下新建.md文档，效果是一样的。不过需要在里面添加一下title等东西，可以参考用命令生成的.md文档。然后开始写就可以啦，写完还是同样的方式上传即可。</p><h5 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h5><hr><p>当然大家都希望自己的博客功能多样，比如访客量、漂亮的背景图、鼠标点击效果、不同的主题等等，这些我在这里就不一一介绍啦，大家可以去网上看教程，还是非常丰富的。我在这里就给大家简单分享一下如何在博客里方便的插入图片的方法吧。</p><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><hr><p>这个方法是在网上看到的，虽然我没有成功，但还是分享给大家吧。</p><p>首先在_config.yml里找到# Writting大类里的post_asset_folder，将其置为true。</p><p>然后在根目录里运行cmd并运行以下命令，下载一个小插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image –save</span><br></pre></td></tr></table></figure><p>安装完成后，在使用hexo n ”…“创建新博文时，就有一个同样标题的文件夹，把图片放进去即可，然后在.md文档里插入图片时就如下写，方括号里是图片不展示时显示的文字，2是代表你放图片的文件夹名，1是代表图片名字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![...](2/1.jpg)</span><br></pre></td></tr></table></figure><p>虽然本人没有成功，希望大家能够成功啦。</p><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><hr><p>这个方法非常的好用与方便，也不怕掉链子。</p><p>就是使用github来保存自己的图片，然后在.md里引用时就用github网址即可。具体操作如下。</p><p>首先找一个文件夹，里面放你本次.md里需要的图片，并且在github上新建一个专门用来存放图片的仓库。然后在这个文件夹所在的目录使用git bush将这个文件夹push到你的图片仓库里，具体操作如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init # 初始化</span><br><span class="line">git add . # 将该目录所有文件添加，注意这个&quot;.&quot;，也可以指定添加，git add 文件名</span><br><span class="line">git commit -m &quot;...&quot; # 双引号内即你给这个文件夹的备注，可以随意填写，不要省略双引号</span><br><span class="line">git remote add origin 仓库地址 # 后面填写你该仓库的地址。</span><br><span class="line">git push -u origin master # 第一次push时加上-u，后面不用。</span><br></pre></td></tr></table></figure><p>然后完成后，在自己的仓库里找到相应的图片，点击download按钮，会进去一个只有图片的网页，然后右键图片点击复制地址，再在你的.md文档里插入图片时写上网址即可，非常的方便，不用担心本地文件丢失等等问题，希望对大家有帮助。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>终于写完了这篇博客，希望对大家有所帮助呀，当然如果有什么问题也敬请指出来，我的邮箱会留在下方，欢迎随时联系，同时希望大家都能拥有属于自己的博客呀！！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">邮箱：394739138@qq.com</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><hr><p> <a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a> </p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划(DP)——股票问题</title>
      <link href="/2019/11/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="股票问题（简单DP）"><a href="#股票问题（简单DP）" class="headerlink" title="股票问题（简单DP）"></a>股票问题（简单DP）</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><hr><p>本文主要介绍了和DP相关的股票问题，分析比较简单，容易理解，适合刚接触DP的朋友们学习。</p><h3 id="股票Ⅰ"><a href="#股票Ⅰ" class="headerlink" title="股票Ⅰ"></a>股票Ⅰ</h3><h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>如果只允许您最多完成一笔交易（即买入和卖出一股股票），请设计一种算法以找到最大的利润(卖出的价格-买入的价格)。</p><p>请注意，您不能在买股票之前卖出股票。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行一个数n，(1≤n≤10<sup>5</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy,sell;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">buy1=<span class="number">-1000000001</span>,sell1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy=<span class="built_in">max</span>(buy,-a[i]);</span><br><span class="line">sell=<span class="built_in">max</span>(sell,buy+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><hr><p>我们直接从DP的角度开始分析这个问题，首先看清题意，只能买入和卖出一股股票，并且卖出必须在买入之后完成。那么我们每一天的选择就是买或者不买或者卖，也就是有两种状态买<kbd>buy</kbd>和卖<kbd>sell</kbd>，而买入股票对应的就是花钱，我们最开始的钱为0，买入后就变会损失也就是<kbd>-a[i]</kbd>，并且当天的总收益就为<kbd>-a[i]</kbd>，也就是<kbd>buy</kbd>的值，卖出后则为收益也就是<kbd>+a[i]</kbd>，并且当天的总收益就为<kbd>buy+a[i]</kbd>。所以我们就考虑当天买和之前买了(即与之前<kbd>buy</kbd>里的值进行比较)哪个收益更高，同时当天卖和之前已经卖了(即与之前<kbd>sell</kbd>里的值进行比较)哪个收益更高即可完成。</p><h4 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>buy = max(buy, -a[i])</li><li>sell = max(sell, buy+a[i])</li></ul><h4 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h4><hr><p>首先观察数据范围发现最终结果是可能超int的，所以对<kbd>buy</kbd>和<kbd>sell</kbd>的定义应为long long，然后是<kbd>buy</kbd>的初始值应该设置为负值而不是0，因为第一次买入的时候此时总收益就为负值。</p><hr><hr><h3 id="股票Ⅱ"><a href="#股票Ⅱ" class="headerlink" title="股票Ⅱ"></a>股票Ⅱ</h3><hr><h4 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>设计算法以找到最大的利润。您可以根据需要完成尽可能多的交易。</p><p>请注意，无法同时进行多项交易（即必须先出售股票才能再次购买）</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行一个数n，(1≤n≤10<sup>5</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><hr><p> 每组数据一行一个数 </p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy,sell;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">buy=<span class="number">-1000000001</span>,sell=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy=<span class="built_in">max</span>(buy,sell-a[i]);</span><br><span class="line">sell=<span class="built_in">max</span>(sell,buy+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><hr><p>我们直接从上一问的思路继续分析，本题是要求利润最大并且可以完成任意多的交易(即可以买了又卖卖了再买)，那我们还是同样分析，买了之后当天的总收益为<kbd>sell-a[i]</kbd>(因为之前是处于卖了之后的状态所以用<kbd>sell</kbd>来减)，然后卖了之后当天的总收益为<kbd>buy-a[i]</kbd>(因为之前是处于买了之后的状态所以用<kbd>buy</kbd>来减)，然后我们考虑每一天的情况即可。</p><h4 id="转移方程-1"><a href="#转移方程-1" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li><p>buy = max(buy, sell-a[i])</p></li><li><p>sell = max(sell, buy+a[i])</p></li></ul><h4 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h4><hr><p>还是一样需要注意数据类型的选择和buy的初始赋值，然后是sell最初值置0才能保证第一次买后总收益的正确性。</p><hr><hr><h3 id="股票Ⅲ"><a href="#股票Ⅲ" class="headerlink" title="股票Ⅲ"></a>股票Ⅲ</h3><hr><h4 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>设计算法以找到最大的利润。您最多可以完成两次交易。</p><p>请注意，无法同时进行多项交易（即必须先出售股票才能再次购买）</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行一个数n，(1≤n≤10<sup>5</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><hr><p> 每组数据一行一个数 </p><h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy1,sell1,buy2,sell2;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">buy1=<span class="number">-1000000001</span>,sell1=<span class="number">0</span>,buy2=<span class="number">-1000000001</span>,sell2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy1=<span class="built_in">max</span>(buy1,-a[i]);</span><br><span class="line">sell1=<span class="built_in">max</span>(sell1,buy1+a[i]);</span><br><span class="line">buy2=<span class="built_in">max</span>(buy2,sell1-a[i]);</span><br><span class="line">sell2=<span class="built_in">max</span>(sell2,buy2+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是延续思路继续分析，本题是要求利润最大并且只能完成两次交易，那我们还是同样分析，因为有两次交易，所以需要4个变量来存，第一次买了之后当天的总收益为<kbd>-a[i]</kbd>(因为相当于之前没有卖出)，然后第一次卖了之后当天的总收益为<kbd>buy1-a[i]</kbd>(因为之前是处于第一次买了之后的状态所以用<kbd>buy1</kbd>来减)，然后第二次买了之后当天的总收益为<kbd>sell1-a[i]</kbd>(因为相当于之前有一次卖出)，然后第二次卖了之后当天的总收益为<kbd>buy2-a[i]</kbd>(因为之前是处于第二次买了之后的状态所以用<kbd>buy2</kbd>来减)，然后我们考虑每一天的情况即可。</p><h4 id="转移方程-2"><a href="#转移方程-2" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>buy1=max(buy1,-a[i]);</li><li>sell1=max(sell1,buy1+a[i]);    </li><li>buy2=max(buy2,sell1-a[i]);</li><li>sell2=max(sell2,buy2+a[i]);</li></ul><h4 id="HINT-2"><a href="#HINT-2" class="headerlink" title="HINT"></a>HINT</h4><hr><p>还是一样需要注意数据类型的选择和sell1、buy1、buy2的初始赋值，然后是sell1最初值置0才能保证第一次买后总收益的正确性。然后是对方程的理解，是怎么样实现的。</p><hr><hr><h3 id="股票Ⅳ"><a href="#股票Ⅳ" class="headerlink" title="股票Ⅳ"></a>股票Ⅳ</h3><hr><h4 id="题面-3"><a href="#题面-3" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>设计算法以找到最大的利润。您最多可以完成k次交易。</p><p>请注意，无法同时进行多项交易（即必须先出售股票才能再次购买）</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n,k，(1≤n,k≤10<sup>3</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><hr><p> 每组数据一行一个数 </p><h4 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy[<span class="number">1005</span>],sell[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">buy[i]=<span class="number">-1000000001</span>;</span><br><span class="line">sell[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy[<span class="number">1</span>]=<span class="built_in">max</span>(buy[<span class="number">1</span>],-a[i]);</span><br><span class="line">sell[<span class="number">1</span>]=<span class="built_in">max</span>(sell[<span class="number">1</span>],buy[<span class="number">1</span>]+a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=k;j++)&#123;</span><br><span class="line">buy[j]=<span class="built_in">max</span>(buy[j],sell[j<span class="number">-1</span>]-a[i]);</span><br><span class="line">sell[j]=<span class="built_in">max</span>(sell[j],buy[j]+a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是相同思路继续分析，本题是要求利润最大并且只能完成k次交易，因为有k次交易，所以需要2k个变量来存，即用两个数组来存即可，第一次买了之后当天的总收益为<kbd>-a[i]</kbd>(因为相当于之前没有卖出)，然后第一次卖了之后当天的总收益为<kbd>buy[1]-a[i]</kbd>(因为之前是处于第一次买了之后的状态所以用<kbd>buy[1]</kbd>来减)，然后第二次买了之后当天的总收益为<kbd>sell[1]-a[i]</kbd>(因为相当于之前有一次卖出)，然后第二次卖了之后当天的总收益为<kbd>buy[2]-a[i]</kbd>(因为之前是处于第二次买了之后的状态所以用<kbd>buy[2]</kbd>]来减)，然后用一个从2-k的循环来实现此过程即可。</p><h4 id="转移方程-3"><a href="#转移方程-3" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>buy[j]=max(buy[j], sell[j-1]-a[i])</li><li>sell[j]=max(sell[j], buy[j]+a[i])</li></ul><h4 id="HINT-3"><a href="#HINT-3" class="headerlink" title="HINT"></a>HINT</h4><hr><p>还是一样需要注意数据类型的选择和buy[],sell[]的初始赋值，然后是上文的AC代码的循环其实不用把buy[1]、sell[1]单独拿出来讨论的，只是更方便理解。</p><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><hr><p><a href="https://accoding.cn/index" target="_blank" rel="noopener">北航OJ</a></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Time!!!</title>
      <link href="/2019/11/09/hello-world/"/>
      <url>/2019/11/09/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr><p>作为一个大懒鬼以及大菜鸡，今天终于搭好了自己的第一个博客，<strong>太不容易了吧</strong>，之后肯定也会一直更新的啦，主要还是关于算法以及硬件基础方面的东西啦，当然要是我觉得有用的东西，我也会写在博客里供大家参考，希望对大家有用哦；不过主要本人水平实在有限，大家就当看着玩玩啦，请大家多多指教哦！</p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 简介 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
