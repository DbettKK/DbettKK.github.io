<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python学习</title>
      <link href="/2020/05/04/python%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/04/python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h1><h3 id="Pycharm内容"><a href="#Pycharm内容" class="headerlink" title="Pycharm内容"></a>Pycharm内容</h3><p><code>ctrl+d</code>复制当前行，<code>ctrl+y</code>删除当前行，<code>shift+enter</code>换行(当前行任意位置均可换行)，<code>ctrl+/</code>批量注释或批量取消注释，<code>Tab</code>键和<code>shift+Tab</code>键完成批量缩进和取消缩进，<code>ctrl+f</code>查找，<code>ctrl+r</code>替换，<code>ctrl+&#39;+&#39;/&#39;-&#39;</code>折叠或者展开代码或<code>ctrl+shift+&#39;+&#39;/&#39;-&#39;</code>全部折叠或展开代码。设置-&gt;KeyMap设置快捷键。#TODO 记录要做的事情。</p><h3 id="小Tips"><a href="#小Tips" class="headerlink" title="小Tips"></a>小Tips</h3><p>转义字符——除了用<code>\</code>外，还可以用<code>r&#39; &#39;</code>代表单引号内的内容不转义，特殊的<code>%%</code>表示<code>%</code>。<br>多行写代码——用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行字符，并且还能在前面加上<code>r</code>一起使用表示内部内容不转义。<br>python除法——<code>/</code>默认是结果为浮点数，而<code>//</code>则默认会去掉小数部分保留整数。<br>字符编码——ASCII码(单字节)-&gt;Unicode码(通常双字节)-&gt;utf-8编码(可变长编码)，计算机中编码：内存统一使用Unicode编码，需要保存到硬盘或者需要传输时则转为utf-8，用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件，浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。<br>格式化输出——利用<code>%</code>来实现，和c语言类似。例如<code>print(&#39;hello %s %d&#39; % (&#39;world&#39;,4))</code>就会输出<code>hello world 4</code>如果只有一个格式化输出，则不用添加括号。在<code>%d</code>前面添加数字代表空格数或者<code>%f</code>前加<code>.</code>和数字控制小数位数，若不确定要格式化输出的内容可以用<code>%s</code>代替，会将所有内容转换为字符串输出。还有一种格式化方法是使用<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……，不过这种方式写起来比%要麻烦得多，如<code>&#39;Hello, {0}, 成绩提升了 {1:.1f}%&#39;.format(&#39;小明&#39;, 17.125)</code>，输出<code>Hello, 小明, 成绩提升了 17.1%</code>。<br>条件判断——可用<code>elif</code>表示<code>else if</code>，同时如果<code>if</code>后面只有一个变量就和C语言类似。<br>IO——<code>input()</code>的返回类型为<code>str</code>，可用<code>int()</code>转换为整数型，<code>float()</code>转换为浮点数类型。<br>不可变对象——对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p><h3 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h3><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>python3以unicode编码，即支持多种语言的字符串。<br>对于单个字符(英文或中文)，可用<code>ord()</code>和<code>chr()</code>函数分别读取字符的整数表示和把编码转换为字符。还可以用十六进制表示其他语言如：<code>&#39;\u4e2d\u6587&#39;</code>等价于<code>中文</code>。<br>对于<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示，如<code>x = b&#39;ABC&#39;</code>,<code>bytes</code>类型的数据每个字符占用一个字节。用unicode编码的字符串可以通过<code>encode()</code>函数编码为指定的<code>bytes</code>,内部参数为<code>ascii或者utf-8</code>等其他编码方式,反过来就是使用<code>decode()</code>函数，如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>。纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。<br>对于<code>str</code>字符串可用<code>len()</code>函数计算字符数，如果换为<code>bytes</code>类型，则计算字节数。为了避免乱码问题，我们应该坚持使用<code>utf-8</code>来对<code>str</code>和<code>bytes</code>进行转换。</p><h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p>Python内置的数据类型——列表list，用<code>[]</code>表示。有序的集合，<code>len()</code>获取长度，可用下标访问元素(从0开始的)，也可以使用<code>-1</code>作为下标来直接访问最后一个元素，以此类推用<code>-2</code>,<code>-3</code>等来获取倒数第几个元素。可使用<code>append()方法</code>在列表最后添加元素，或者使用<code>insert(int index, Object obj)方法</code>来添加元素到指定位置；使用<code>pop()方法</code>删除列表末尾的元素或者添加参数<code>index</code>来指定下标；如果需要替换可以直接通过<code>str[i]=&quot;...&quot;</code>来实现，并且<code>list</code>内部的各个元素的数据类型也是可以不相同的，比如可以就是<code>list</code>类型。</p><h5 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h5><p>Python内置的另一种有序列表类型——元组，用<code>()</code>表示。和<code>list</code>不同，<code>tuple</code>一旦初始化就不能更改，也没有append()，insert()这样的方法，但是可以通过下标访问元素，不过不能替换，也更加安全，还有一个需要注意的就是如果定义的时候只有一个元素需要加上一个<code>,</code>来避免歧义，<code>t=(1,)</code>，因为如果不加，<code>t</code>就是一个值为1的整型变量了。不过，如果<code>tuple</code>中存在<code>list</code>类型的元素，这个就<code>list</code>中的元素就可以改变了，从而可以理解为<code>tuple</code>也是”可变“的。</p><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><p>首先是<code>for..in</code>循环，依次把<code>list</code>,<code>tuple</code>中的元素打印出来，例如<code>for x in [1,2,3,4,5]:</code>；或者使用<code>range(x)</code>表示从0开始到小于x的整数序列<code>for x in range(5):</code>，还可以使用<code>list()</code>将<code>range()</code>转换为list类型。</p><h5 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h5><p>Python内置的字典类，其他语言也叫<code>map</code>，采用键值对存储方式存储。可通过<code>d[&#39;key&#39;]</code>查询对应的值，还可通过该方法放入键值对。一个<code>key</code>对应一个<code>value</code>，若对一个关键字放入多个值，则后面放入的会把前面放入的冲掉。如果<code>key</code>值不存在，字典会报错，为了避免，可使用<code>&#39;key&#39; in d</code>来查看key是否存在于字典中，若不存在则返回<code>False</code>；或者使用<code>get()方法</code>，如果不存在会返回<code>None</code>，或者返回自己指定的<code>value</code>，还可以使用<code>pop(&#39;key&#39;)方法</code>删除键值对。最重要的是<code>key</code>对象必须是不可变对象。</p><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><p>和dict类似，也是一组key的集合，只是不存储value值，也同样不能重复。通过<code>add()</code>和<code>remove()</code>方法实现添加或者删除key，set可以看作数学上的集合，可以进行∩、∪等操作。并且要创建一个set，需要提供一个list作为输入集合，<code>s = set([1, 2, 3])</code></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h5 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h5><p><code>max()</code>——可以从传入任意个参数，返回最大的那个。<br><code>str()</code>,<code>int()</code>,<code>bool()</code>等——数据类型转换函数。<br><code>hex()</code>函数——把一个整数转换成十六进制表示的字符串。</p><p>函数名实际是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”。即<code>a = abs</code>，然后可以用<code>a()</code>来实现<code>abs()</code>的功能。<br>如果想要保证传入函数的参数类型是正确的，可用<code>isinstance()方法</code>判断是否参数类型满足你所定义的参数类型。<br>函数是可以返回多个值的，可以用多个变量来接收，也可以用一个，因为返回的实际上是一个<code>tuple</code></p><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p><code>def f(x,n=2)</code>这里就给n设置了一个默认参数，如果调用函数<code>f()</code>时只传入了一个参数x，则会默认传入一个等于2的n进函数，这样就比较方便，例如<code>f(5)</code>实际上就是<code>f(5,2)</code>。不过设置默认参数的时候也有几个需要注意的地方：第一是必选参数在前，默认参数在后，第二是默认参数必须指向不变对象。如果指向一个list，则每次调用时都会改变list里的元素从而导致函数无法发挥作用。可见，默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的参数来实现。无论是简单调用还是复杂调用，函数只需要定义一个。</p><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：<code>def calc(numbers)</code>，<code>def calc(*numbers)</code>前者调用需要传入list或tuple，<code>calc([1,2,3])</code>而后者则不需要，<code>calc(1,2,3)</code>。同时可变参数还可传入一个list或tuple进函数，不过需要添加<code>*</code>号，例如<code>nums = [1,2,3]</code>，<code>calc(*nums)</code>即可，<code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。</p><h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h5><p>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br><span class="line"><span class="comment"># 不传入关键字参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Michael'</span>, <span class="number">30</span>)</span><br><span class="line">name: Michael age: <span class="number">30</span> other: &#123;&#125;</span><br><span class="line"><span class="comment"># 传入任意个数的关键字参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line"><span class="comment"># 和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure><p><code>**extra</code>表示把<code>extra</code>这个dict的所有key-value用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个dict，注意<code>kw</code>获得的dict是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p><h5 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果要限制关键字参数的名字，就可以用命名关键字参数</span></span><br><span class="line"><span class="comment"># 例如，只接收city和job作为关键字参数。这种方式定义的函数如下：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br><span class="line"><span class="comment"># 如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></span><br><span class="line">    print(name, age, args, city, job)</span><br><span class="line"><span class="comment"># 命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错，即需要写上city='..',job='..'</span></span><br><span class="line"><span class="comment"># 由于调用时缺少参数名city和job，Python解释器把这4个参数均视为位置参数，但person()函数仅接受2个位置参数。</span></span><br><span class="line"><span class="comment"># 命名关键字参数可以有缺省值，从而简化调用：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city=<span class="string">'Beijing'</span>, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><h5 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h5><p>在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。比如定义一个函数，包含上述若干种参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</span><br></pre></td></tr></table></figure><p>在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="literal">None</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">'ext'</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><p>最神奇的是通过一个tuple和dict，你也可以调用上述函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">88</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> d = <span class="number">88</span> kw = &#123;<span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br></pre></td></tr></table></figure><p>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</p><h5 id="参数小结"><a href="#参数小结" class="headerlink" title="参数小结"></a>参数小结</h5><p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。<br>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！<br>要注意定义可变参数和关键字参数的语法：<br><code>*args</code>是可变参数，args接收的是一个tuple；<br><code>**kw</code>是关键字参数，kw接收的是一个dict。<br>以及调用函数时如何传入可变参数和关键字参数的语法：<br>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；<br>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装dict，再通过<code>**kw</code>传入：<code>func(**{&#39;a&#39;: 1, &#39;b&#39;: 2})</code>。<br>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。<br>命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。<br>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符<code>*</code>，否则定义的将是位置参数。</p><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><p>尾递归优化——尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。python未提供该优化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上面的fact(n)函数由于return n * fact(n - 1)引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> fact_iter(n, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_iter</span><span class="params">(num, product)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> product</span><br><span class="line">    <span class="keyword">return</span> fact_iter(num - <span class="number">1</span>, num * product)</span><br><span class="line"><span class="comment"># 可以看到，return fact_iter(num - 1, num * product)仅返回递归函数本身，`num - 1`和`num * product`在函数调用前就会被计算，不影响函数调用。</span></span><br></pre></td></tr></table></figure><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>正向切片——<code>L[0:3]</code>，从索引0开始取到索引3为止且不包含索引为3的元素，如果第一个索引为0，还可以省略，即<code>L[:3]</code>。<br>倒数切片——<code>L[-10:-1]</code>，即取从倒数第十到倒数第一的元素且不包含最后一个元素，如果想取最后一个元素，则<code>L[-10:]</code>即可。<br>设置间隔——<code>L[0:10:2]</code>，即取前十个数且每两个数取一个，或者<code>L[::5]</code>，取所有，每5个取一个。如果只写<code>:</code>则复制原有的<code>list</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 利用切片操作，实现一个trim()函数，去除字符串首尾的空格，注意不要调用str的strip()方法：</span></span><br><span class="line"><span class="comment"># 自己写的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trim</span><span class="params">(s)</span>:</span></span><br><span class="line">    l = len(s)</span><br><span class="line">    end = <span class="number">0</span></span><br><span class="line">    front = l</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">' '</span>:</span><br><span class="line">            front = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">' '</span>:</span><br><span class="line">            end = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> front &gt; end:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">return</span> s[front:end+<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 网上的一些</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trim</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span>==len(s):</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">while</span> <span class="string">' '</span>==s[<span class="number">0</span>]:</span><br><span class="line">        s=s[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>==len(s):</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">while</span> <span class="string">' '</span>==s[<span class="number">-1</span>]:</span><br><span class="line">        s=s[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>==len(s):</span><br><span class="line">            <span class="keyword">return</span> s         </span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h5 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h5><p>只要是可迭代对象，就可以通过<code>for</code>进行迭代，用<code>dict</code>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> d.values():</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="comment"># 如何判断是否可以迭代呢</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line">isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># 判断是否可迭代</span></span><br></pre></td></tr></table></figure><h5 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h5><p>用来生成<code>list</code>，例<code>list(range(1,11))</code>，并且可以和<code>if,for</code>配合使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]  <span class="comment"># [4, 16, 36, 64, 100]</span></span><br><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]  <span class="comment"># ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']</span></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125;</span><br><span class="line">[k + <span class="string">'='</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()]  <span class="comment"># ['y=B', 'x=A', 'z=C']</span></span><br><span class="line">L = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="string">'IBM'</span>, <span class="string">'Apple'</span>]</span><br><span class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L]  <span class="comment"># ['hello', 'world', 'ibm', 'apple']</span></span><br></pre></td></tr></table></figure><p>可见，在一个列表生成式中，<code>for</code>前面的<code>if ... else</code>是表达式，而<code>for</code>后面的<code>if</code>是过滤条件，不能带<code>else</code>。</p><h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><p><code>generator</code>一边循环，一边计算，可以把列表生成式的<code>[]</code>改为<code>()</code>即可，可以用<code>next(g)</code>来打印生成器的下一个值，在没有元素时会抛出异常。也可以通过<code>for</code>来迭代从而避免异常。定义generator的另一种方法，如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator。</p><p>生成器每次停止是在遇到<code>yield</code>关键字停止，下一次开始也同样从这里开始。调用generator时，需要先生成一个generator对象，<code>o=odd() # odd是一个generator</code>，同样使用for来迭代：<code>for n in odd()</code>，但是使用for语句会拿不到generator<code>return</code>语句的值，需要使用错误捕获来获得。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">()</span>:</span></span><br><span class="line">    list  = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> list[:]</span><br><span class="line">        list.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(list[:<span class="number">-1</span>]):</span><br><span class="line">            list[index+<span class="number">1</span>] += value</span><br></pre></td></tr></table></figure><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p><code>isinstance([], Iterable)</code>判断是否是Iterable对象。可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code>可以使用<code>iter()</code>函数。<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。所以list等就不是<code>Iterator</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习</title>
      <link href="/2020/04/10/JavaScript%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/04/10/JavaScript%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript学习"><a href="#JavaScript学习" class="headerlink" title="JavaScript学习"></a>JavaScript学习</h2><p><em>time:2020/04/10</em></p><h4 id="Javascript基础"><a href="#Javascript基础" class="headerlink" title="Javascript基础"></a>Javascript基础</h4><p>数据类型和变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Number类型，不区分整数和浮点数统一为Number类型。</span></span><br><span class="line"><span class="comment">//NaN和Infinity是特殊的Number类型</span></span><br><span class="line"><span class="comment">//一个表示无法表示的数，另一个则是在JavaScript中超过最大能表示的范围，就为Infinity</span></span><br><span class="line"><span class="comment">//%取模运算在JavaScript中可以对浮点数使用</span></span><br><span class="line"><span class="number">10.5</span>%<span class="number">3</span>==<span class="number">1.5</span>;</span><br><span class="line"><span class="number">0</span>/<span class="number">0</span>==<span class="literal">NaN</span>;</span><br><span class="line"><span class="number">2</span>/<span class="number">0</span>==<span class="literal">Infinity</span>;</span><br><span class="line"><span class="comment">//==和===运算符，前者会自动转换类型再比较，所以应坚持使用后者进行比较</span></span><br><span class="line"><span class="comment">//NaN和所有值都不同，包括其自身，需使用isNaN()来判断</span></span><br><span class="line"><span class="comment">//浮点数的比较也需要注意,eg.1/3!=1-2/3</span></span><br></pre></td></tr></table></figure><p>字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可用`...`来表示多行字符串</span></span><br><span class="line"><span class="string">`这是一个</span></span><br><span class="line"><span class="string">多行</span></span><br><span class="line"><span class="string">字符串`</span>;</span><br><span class="line"><span class="comment">//除了用'+'连接字符串，还可以使用$&#123;&#125;来实现</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年<span class="subst">$&#123;age&#125;</span>岁了!`</span>;</span><br><span class="line"><span class="comment">//var message = '你好, ' + name + ', 你今年' + age + '岁了!';</span></span><br><span class="line"><span class="comment">//字符串可以使用下标访问特定位置的字符。</span></span><br><span class="line"><span class="comment">//字符串是不变的，所以对某位置的字符进行改变，全字符串是不变的</span></span><br></pre></td></tr></table></figure><p><em>time:2020/04/16</em></p><p>数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以直接给Array的length赋值，并且会改变Array的大小</span></span><br><span class="line"><span class="comment">//可以给Array超过范围的索引赋值，同样会改变Array</span></span><br><span class="line"><span class="comment">//indexOf()方法，可以返回一个索引或者返回索引对应的元素，即参数可以是索引也可以是元素</span></span><br><span class="line"><span class="comment">//slice()方法，就是和string的substring方法是同样的效果，且参数是参数包含开始索引不包含结束索引,不传递参数，则代表剪切整个字符串，可以这样复制数组</span></span><br><span class="line"><span class="comment">//push()和pop()方法，字符串末尾添加或者删除元素</span></span><br><span class="line"><span class="comment">//unshift()和shift()方法，字符串开头添加或者删除元素(unshift添加)</span></span><br><span class="line"><span class="comment">//sort()方法，排序;reverse()方法，调转数组。</span></span><br><span class="line"><span class="keyword">var</span> arr=&#123;<span class="string">'A'</span>,<span class="string">'b'</span>&#125;;</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="comment">//splice()方法,第一个参数指定索引，第二个参数指定从该索引开始删除的元素个数，然后后面可以跟一些字符串表示从该索引开始添加的元素，也可以不添加，即只有两个参数。并且该方法会返回删除的元素形成的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Yahoo'</span>, <span class="string">'AOL'</span>, <span class="string">'Excite'</span>, <span class="string">'Oracle'</span>];</span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// ['Google', 'Facebook']</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Oracle']</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></span><br><span class="line"><span class="comment">//concat方法，连接两个数组并返回新数组</span></span><br><span class="line"><span class="keyword">var</span> c=a.concat(b);</span><br><span class="line"><span class="comment">//join方法，把数组中的元素用特定的字符串连接起来，返回字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">'-'</span>); <span class="comment">// 'A-B-C-1-2-3'，可以是字符串 不一定只有一个字符</span></span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu = &#123;</span><br><span class="line">    name:<span class="string">'小小'</span></span><br><span class="line">&#125;;</span><br><span class="line">stu.name;</span><br><span class="line">stu[<span class="string">'name'</span>]; <span class="comment">//这两种访问都是可以的</span></span><br><span class="line">stu.number = <span class="string">'153'</span>; <span class="comment">//可以动态添加属性</span></span><br><span class="line"><span class="keyword">delete</span> stu.number; <span class="comment">//删除属性</span></span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> stu; <span class="comment">//检查对象是否拥有某属性,或者其是否继承某属性 布尔型</span></span><br><span class="line">stu.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">//检查自身是否拥有某一属性 布尔型</span></span><br></pre></td></tr></table></figure><p>循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件判断语句if else与常规语言没有什么区别</span></span><br><span class="line"><span class="comment">//for循环的基本使用也都一样</span></span><br><span class="line"><span class="comment">//for...in...，可以将一个对象的所有属性都循环一遍</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    name: <span class="string">'Jack'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    city: <span class="string">'Beijing'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key); <span class="comment">// 'name', 'age', 'city'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//要过滤掉对象继承的属性，用hasOwnProperty()来实现</span></span><br><span class="line"><span class="comment">//Array也是对象，也可以使用for..in..循环，循环得到的是索引</span></span><br><span class="line"><span class="comment">//需要注意，得到的索引是String而不是Number</span></span><br></pre></td></tr></table></figure><p>Map和Set</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="comment">//初始化map需要一个二维数组，或者可以初始化为空</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'Michael'</span>, <span class="number">95</span>], [<span class="string">'Bob'</span>, <span class="number">75</span>], [<span class="string">'Tracy'</span>, <span class="number">85</span>]]);</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 空Map</span></span><br><span class="line">m.set(<span class="string">'Adam'</span>, <span class="number">67</span>);<span class="comment">//通过set方法添加键值对</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>);<span class="comment">//通过get方法取得键对应的值</span></span><br><span class="line">m.has(<span class="string">'Adam'</span>); <span class="comment">//通过has方法检查是否存在键 布尔型</span></span><br><span class="line">m.delete(<span class="string">'Adam'</span>); <span class="comment">//通过delete方法删除键值对</span></span><br><span class="line"><span class="comment">//由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉</span></span><br><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="comment">//要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set</span></span><br><span class="line"><span class="comment">//重复元素在Set中自动被过滤</span></span><br><span class="line"><span class="comment">//通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果；通过delete(key)方法可以删除元素</span></span><br></pre></td></tr></table></figure><p><em>time:2020/04/18</em></p><p>iterable</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for..of..迭代器循环</span></span><br><span class="line"><span class="comment">//可用来遍历array的所有元素</span></span><br><span class="line"><span class="comment">//forEach()方法</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</span><br><span class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, sameElement, set</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'x'</span>], [<span class="number">2</span>, <span class="string">'y'</span>], [<span class="number">3</span>, <span class="string">'z'</span>]]);</span><br><span class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//需要提供回调函数function，对每个元素都执行一遍function</span></span><br></pre></td></tr></table></figure><p>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javascrpit中函数也可以看作对象，函数名可以认为是指向该函数的变量</span></span><br><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//允许传入多个参数，没有定义的参数传入也不会改变什么，传入的参数少也是可以的</span></span><br><span class="line"><span class="comment">//没有参数传入，函数内部的参数接收到的就是undefined，可以在函数内部进行检查以避免</span></span><br><span class="line"><span class="comment">//javascript函数中存在默认参数arguments，里面存放了所有参数，为Array类型</span></span><br><span class="line"><span class="comment">//而且就算函数不定义参数，如果传入了参数，也可以通过arguments拿到参数值</span></span><br><span class="line"><span class="comment">//还可以利用arguments拿到传入参数的个数</span></span><br><span class="line"><span class="comment">//rest参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a = '</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b = '</span> + b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 结果:</span></span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// Array [ 3, 4, 5 ]</span></span><br><span class="line"><span class="comment">//如果没有多余的参数，rest就会接受一个空数组</span></span><br></pre></td></tr></table></figure><p>变量作用域与解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量提升</span></span><br><span class="line"><span class="comment">//javascript的函数中会自动把变量的声明提到函数顶部，但不会把赋值提前进行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">'Hello, '</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">'Bob'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不会报错，但是打印的y是undefined</span></span><br><span class="line"><span class="comment">//由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。</span></span><br><span class="line"><span class="comment">//最常见的做法是用一个var申明函数内部用到的所有变量</span></span><br><span class="line"><span class="comment">//不在任何函数内定义的变量就具有全局作用域。</span></span><br><span class="line"><span class="comment">//实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性</span></span><br><span class="line"><span class="comment">//可以通过window.变量进行访问该变量</span></span><br><span class="line"><span class="comment">//某些函数也同样是全局的，可通过window进行访问</span></span><br><span class="line"><span class="comment">//局部作用域</span></span><br><span class="line"><span class="comment">//由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的</span></span><br><span class="line"><span class="comment">//为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量</span></span><br><span class="line"><span class="comment">//ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="comment">//解构赋值</span></span><br><span class="line"><span class="comment">//从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。</span></span><br><span class="line"><span class="keyword">var</span> [x, y, z] = [<span class="string">'hello'</span>, <span class="string">'JavaScript'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"><span class="comment">//注意，对数组元素进行解构赋值时，多个变量要用[...]括起来。</span></span><br><span class="line"><span class="comment">//如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致：</span></span><br><span class="line"><span class="keyword">let</span> [x, [y, z]] = [<span class="string">'hello'</span>, [<span class="string">'JavaScript'</span>, <span class="string">'ES6'</span>]];</span><br><span class="line"><span class="comment">//解构赋值还可以忽略某些元素：</span></span><br><span class="line"><span class="keyword">let</span> [, , z] = [<span class="string">'hello'</span>, <span class="string">'JavaScript'</span>, <span class="string">'ES6'</span>]；</span><br><span class="line"><span class="comment">//如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性：</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'male'</span>,</span><br><span class="line">    passport: <span class="string">'G-12345678'</span>,</span><br><span class="line">    school: <span class="string">'No.4 middle school'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;name, age, passport&#125; = person;</span><br><span class="line"><span class="comment">//使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为undefined</span></span><br><span class="line"><span class="comment">//如果要使用的变量名和属性名不一致，可以用下面的语法获取：</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'male'</span>,</span><br><span class="line">    passport: <span class="string">'G-12345678'</span>,</span><br><span class="line">    school: <span class="string">'No.4 middle school'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把passport属性赋值给变量id:</span></span><br><span class="line"><span class="keyword">let</span> &#123;name, <span class="attr">passport</span>:id&#125; = person</span><br><span class="line"><span class="comment">//解构赋值还可以使用默认值，这样就避免了不存在的属性返回undefined的问题：</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'male'</span>,</span><br><span class="line">    passport: <span class="string">'G-12345678'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果person对象没有single属性，默认赋值为true:</span></span><br><span class="line"><span class="keyword">var</span> &#123;name, single=<span class="literal">true</span>&#125; = person;</span><br><span class="line">name; <span class="comment">// '小明'</span></span><br><span class="line">single; <span class="comment">// true</span></span><br><span class="line"><span class="comment">//有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：</span></span><br><span class="line"><span class="keyword">var</span> x, y;</span><br><span class="line"><span class="comment">// 解构赋值:</span></span><br><span class="line">&#123;x, y&#125; = &#123; <span class="attr">name</span>: <span class="string">'小明'</span>, <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span>&#125;;</span><br><span class="line"><span class="comment">// 语法错误: Uncaught SyntaxError: Unexpected token =</span></span><br><span class="line"><span class="comment">//这是因为JavaScript引擎把&#123;开头的语句当作了块处理，于是=不再合法。解决方法是用小括号括起来：</span></span><br><span class="line">(&#123;x, y&#125; = &#123; <span class="attr">name</span>: <span class="string">'小明'</span>, <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span>&#125;);</span><br><span class="line"><span class="comment">//解构赋值在很多时候可以大大简化代码。例如，交换两个变量x和y的值，可以这么写，不再需要临时变量：</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">1</span>, y=<span class="number">2</span>;</span><br><span class="line">[x, y] = [y, x]</span><br><span class="line"><span class="comment">//如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。例如，下面的函数可以快速创建一个Date对象：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildDate</span>(<span class="params">&#123;year, month, day, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//它的方便之处在于传入的对象只需要year、month和day这三个属性：</span></span><br><span class="line">buildDate(&#123; <span class="attr">year</span>:<span class="number">2017</span>, <span class="attr">month</span>:<span class="number">1</span>, <span class="attr">day</span>:<span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaScript的函数内部如果调用了this，那么这个this到底指向谁？</span></span><br><span class="line"><span class="comment">//如果是通过对象的形式进行调用，那么this指向的是调用的对象，是符合情理的</span></span><br><span class="line"><span class="comment">//如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window。</span></span><br><span class="line"><span class="comment">//要保证this指向正确，必须用obj.xxx()的形式调用！</span></span><br><span class="line"><span class="comment">//也可以先使用that捕获this，然后再使用</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// 在方法内部一开始就捕获this</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAgeFromBirth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">            <span class="keyword">return</span> y - that.birth; <span class="comment">// 用that而不是this</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getAgeFromBirth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这样就能避免出错了</span></span><br><span class="line"><span class="comment">//apply</span></span><br><span class="line"><span class="comment">//指定函数的this指向哪个对象，可以用函数本身的apply方法</span></span><br><span class="line"><span class="comment">//它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</span></span><br><span class="line"><span class="comment">//使用apply来避免this的出错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    age: getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); <span class="comment">// 25</span></span><br><span class="line">getAge.apply(xiaoming, []); <span class="comment">// 25, this指向xiaoming, 参数为空</span></span><br><span class="line"><span class="comment">//另一个与apply()类似的方法是call()，唯一区别是：</span></span><br><span class="line"><span class="comment">//apply()把参数打包成Array再传入；</span></span><br><span class="line"><span class="comment">//call()把参数按顺序传入。</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>]); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.max.call(<span class="literal">null</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">//对普通函数调用，我们通常把this绑定为null</span></span><br><span class="line"><span class="comment">//装饰器</span></span><br><span class="line"><span class="comment">//利用apply()，我们还可以动态改变函数的行为。</span></span><br><span class="line"><span class="comment">//现在假定我们想统计一下代码一共调用了多少次parseInt()，</span></span><br><span class="line"><span class="comment">//可以把所有的调用都找出来，然后手动加上count += 1，</span></span><br><span class="line"><span class="comment">//不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的parseInt()</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> oldParseInt = <span class="built_in">parseInt</span>; <span class="comment">// 保存原函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.parseInt = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> oldParseInt.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用原函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Array的map()方法</span></span><br><span class="line"><span class="comment">//传入参数为函数对象，作用为将此函数作用于数组的所有元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> results = arr.map(pow); <span class="comment">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"><span class="comment">//reduce()方法</span></span><br><span class="line"><span class="comment">//Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上</span></span><br><span class="line"><span class="comment">//这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：</span></span><br><span class="line">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y;</span><br><span class="line">&#125;); <span class="comment">// 13579,reduce的一些好用的地方</span></span><br><span class="line"><span class="comment">//可以省略function，进而变成arr.map(x=&gt;10*x)或者arr.reduce((x,y)=&gt;10*x+y)</span></span><br></pre></td></tr></table></figure><p>箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用箭头函数来省略function</span></span><br><span class="line">x=&gt;x*x;</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x*x;&#125;;<span class="comment">//两者等价</span></span><br><span class="line"><span class="comment">//箭头函数相当于匿名函数</span></span><br><span class="line"><span class="comment">//如果函数只用return一个表达式，则可以全部省略</span></span><br><span class="line"><span class="comment">//如果函数体里包含了一些其他结构，则不能省略return</span></span><br><span class="line">x =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) <span class="keyword">return</span> x * x;</span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">return</span> - x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果存在多个参数需要用括号括起来</span></span><br><span class="line">(x, y) =&gt; x * x + y * y</span><br><span class="line">() =&gt; <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 可变参数:</span></span><br><span class="line">(x, y, ...rest) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> i, sum = x + y;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;rest.length; i++) &#123;</span><br><span class="line">        sum += rest[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在返回对象的时候需要用小括号括起来，因为&#123;&#125;会导致歧义</span></span><br><span class="line">x=&gt;(&#123;<span class="attr">foo</span> : x&#125;);</span><br><span class="line"><span class="comment">//使用箭头函数也不用担心this的错用，箭头函数会保证this指向外部作用域</span></span><br><span class="line"><span class="comment">//this在箭头函数中已经词法绑定了</span></span><br><span class="line"><span class="comment">//用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略</span></span><br><span class="line">arr.sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x-y;</span><br><span class="line">&#125;);<span class="comment">//简化sort写法</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 10, 20]</span></span><br></pre></td></tr></table></figure><p>generator</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习</title>
      <link href="/2020/04/07/HTML%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/04/07/HTML%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>时隔几个月，终于又开始写博客了，原因呢，大学太颓废，还是得找点事给自己干，所以从现在开始学习前端开发，最开始，当然，从HTML开始，虽然之前也学过一些，但是总结的东西都不多，所以这次就当是正式开始系统的学习前端知识了，我的一个思路呢就是HTML-&gt;CSS-&gt;JS，先把这三大基础整透，再说后面的内容。写博客的目的呢，一是监督自己学习，二呢就是方便自己在学习的时候做好相关的笔记记录，这样也能给予自己前进的动力了，好了废话就说这么多，开始这一系列第一篇博客的更新了。</p><p><em>time：2020/04/07</em></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>在开始这篇博客前已经完成了一些准备工作如下：</p><p>vscode安装、webstorm安装、sublime安装，虽然这三个IDE都比较推荐，但我还是全都安装下来了，在使用过程中再来取舍。</p><h4 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h4><p>用 style 属性代替旧的一些标签以及属性，如<code>&lt;font&gt;,&lt;basefont&gt;,&lt;s&gt;,&lt;u&gt;,alion,color,bgcolor</code>等等。将其变成以下样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"background-color:red"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"color:red"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-family:verdana"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文本格式化标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--粗体--&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--着重文字--&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--斜体--&gt;</span> <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加重语气,和加粗差不多--&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--插入字,即下划线--&gt;</span> <span class="tag">&lt;<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--删除字--&gt;</span> <span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--大号和小号--&gt;</span> <span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span> <span class="tag">&lt;<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算机输出标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码--&gt;</span> <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--键盘码--&gt;</span> <span class="tag">&lt;<span class="name">kbd</span>&gt;</span><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--计算机代码样本--&gt;</span> <span class="tag">&lt;<span class="name">sample</span>&gt;</span><span class="tag">&lt;/<span class="name">sample</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打印机代码--&gt;</span> <span class="tag">&lt;<span class="name">tt</span>&gt;</span><span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--变量，用于定义--&gt;</span> <span class="tag">&lt;<span class="name">var</span>&gt;</span><span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--预格式文本,在code内包围代码可实现保留空格回车--&gt;</span> <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--短的引用--&gt;</span> <span class="tag">&lt;<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--长引用，并会进行缩进处理--&gt;</span> <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义缩写，为浏览器提供帮助--&gt;</span> <span class="tag">&lt;<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义缩写的意义，鼠标放置即可查看--&gt;</span> <span class="tag">&lt;<span class="name">dfn</span>&gt;</span><span class="tag">&lt;/<span class="name">dfn</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义文档或者文章的联系信息--&gt;</span> <span class="tag">&lt;<span class="name">address</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义著作的标题--&gt;</span> <span class="tag">&lt;<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--双向书写，可以从左边开始--&gt;</span> <span class="tag">&lt;<span class="name">bdo</span>&gt;</span><span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><em>time：2020/04/08</em></p><p>外部样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内部样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: red&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内联样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red; margin-left: 20px"</span>&gt;</span></span><br><span class="line">This is a paragraph</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"url"</span>&gt;</span>Link text<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--链接不一定是网页，也可以是图片等等--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--使链接在新窗口打开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--定义锚点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--本文档其他位置可以创建访问锚点的链接,适用于pdf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://....#xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--其他界面创建访问该锚点的链接--&gt;</span></span><br></pre></td></tr></table></figure><p>图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--alt在图片未加载的时候显示，无闭合标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">"loading..."</span> <span class="attr">alion</span>=<span class="string">"left"</span> <span class="attr">width</span>=<span class="string">""</span> <span class="attr">height</span>=<span class="string">""</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--还可用&lt;a&gt;包裹图片制作图片链接--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--还可利用&lt;map&gt;,&lt;area&gt;来定义图像地图--&gt;</span></span><br></pre></td></tr></table></figure><p><em>time：2020/04/09</em></p><p>表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--border表示表格边框的厚度 cellpadding表示边界与单元内容之间的距离 cellspacing规定单元格之间的距离--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我的标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span> <span class="comment">&lt;!--表格标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>Heading<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="comment">&lt;!--表头 加粗居中 横跨两行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>Another Heading<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="comment">&lt;!--横跨两列--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!--避免空单元格，会使边框无法显示，使用空格占位--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格中每个单元格都可设置颜色、背景、对齐方式、frame属性等等--&gt;</span></span><br></pre></td></tr></table></figure><p>列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--无序列表 type代表小圆点的类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"disc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表 start设置开始序号 type代表序号的类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"50"</span> <span class="attr">type</span>=<span class="string">"I"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--列表都可以嵌套使用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义列表 dt标题 dd内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>计算机<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>用来计算的仪器 ... ...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>显示器<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>以视觉方式显示信息的装置 ... ...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--块元素和内联元素区别就是 块元素会以新行来开始 而内联元素则不会--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--块级：&lt;h1&gt;, &lt;p&gt;, &lt;ul&gt;, &lt;table&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内联级：&lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div&gt;块级元素 和CSS一起使用对大块地方进行样式设计--&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;span&gt;内联级元素 和CSS一起使用对文本进行样式设计--&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对 HTML 进行分类（设置类），使我们能够为元素的类定义 CSS 样式。</span></span><br><span class="line"><span class="comment">为相同的类设置相同的样式，或者为不同的类设置不同的样式。--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.cities</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cities"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">London is the capital city of England. </span><br><span class="line">It is the most populous city in the United Kingdom, </span><br><span class="line">with a metropolitan area of over 13 million inhabitants.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;div&gt; 元素常用作布局工具，因为能够轻松地通过 CSS 对其进行定位。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--DIV的ID属性和CLASS属性的区别--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id对应css是用样式选择符“#”（井号）class对应css是用样式选择符“.”(英文半角输入句号)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id属性，只能被一个元素调用（以“#”选择符命名CSS样式在一个页面只能使用调用一次）</span></span><br><span class="line"><span class="comment">class类标记，可以用于被多个元素调用(以“.”选择符命名样式可以一个页面使用多次)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--一个代表身份证，一个代表衣服,下方是实例--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#header</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#nav</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>:<span class="selector-id">#eeeeee</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;      </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#section</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:350px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span>;  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>City Gallery<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">London<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Paris<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Tokyo<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">London is the capital city of England. It is the most populous city in the United Kingdom,</span><br><span class="line">with a metropolitan area of over 13 million inhabitants.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">Standing on the River Thames, London has been a major settlement for two millennia,</span><br><span class="line">its history going back to its founding by the Romans, who named it Londinium.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">Copyright ? W3Schools.com</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>time:2020/04/10</em></p><p>框架</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--框架结构标签&lt;frameset&gt;,rows和cols的值规定了每个框架所占的面积--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--框架标签&lt;frame&gt;,每个frame中设置一个html文档--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--假如一个框架有可见边框，用户可以拖动边框来改变它的大小。为了避免这种情况发生，可以在 &lt;frame&gt; 标签中加入：noresize="noresize"。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--重要提示：不能将 &lt;body&gt;&lt;/body&gt; 标签与 &lt;frameset&gt;&lt;/frameset&gt; 标签同时使用！不过，假如你添加包含一段文本的 &lt;noframes&gt; 标签，就必须将这段文字嵌套于 &lt;body&gt;&lt;/body&gt; 标签内。（在下面的第一个实例中，可以查看它是如何实现的。）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里都是简要介绍，具体的应用现在还无法完全掌握--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末题解（部分）</title>
      <link href="/2019/12/22/%E6%9C%9F%E6%9C%AB%E9%A2%98%E8%A7%A3_%E9%83%A8%E5%88%86/"/>
      <url>/2019/12/22/%E6%9C%9F%E6%9C%AB%E9%A2%98%E8%A7%A3_%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在这里给大家提供9道题的题解，都是比较容易想到的题(其他题也不会啊)，希望有需要的人能够从中得到一些启发。可能有些会存在一些小错误因为是我自己通过记忆来描述的，希望理解。</p><h2 id="第一次算法期末考试"><a href="#第一次算法期末考试" class="headerlink" title="第一次算法期末考试"></a>第一次算法期末考试</h2><h2 id="A-水二分查找"><a href="#A-水二分查找" class="headerlink" title="A 水二分查找"></a>A 水二分查找</h2><p>输入:多组输入、n、n个数(按顺序排好的)、q、m(q次查询，看n个数中是否存在与m相同的数)</p><p>输出:存在输出Yes，不存在输出No，对于每个q输出q行</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这n个数的数据范围应该是在10<sup>6</sup>内的，所以可以很自然的想到直接用桶装即可解决，而不需要二分查找，具体二分查找这里就不给代码了，因为后面第二次的A题会给出的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000005</span>],num[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q,m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            num[a[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">            <span class="keyword">if</span>(num[m]) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-KMP"><a href="#B-KMP" class="headerlink" title="B KMP"></a>B KMP</h2><p>输入:多组输入、两个字符串s、t</p><p>输出:t在s中出现的所有位置，用空格隔开、输出t对应得next数组</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>显然是直接套用KMP即可，因为要输出所有位置，所以需要把判断条件放在while循环内部，具体可以看代码就很清楚了。next数组则一样非常简单即可求出。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> next[MAX];</span><br><span class="line"><span class="keyword">char</span> s[MAX],t[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">int</span> next[],<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">-1</span>;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">while</span>(j&lt;lent)&#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">-1</span>||t[j]==t[k])&#123;</span><br><span class="line">j++;</span><br><span class="line">k++;</span><br><span class="line">next[j]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k=next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line">getnext(next,t);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">while</span>(i&lt;lens)&#123;</span><br><span class="line"><span class="keyword">while</span>(j!=<span class="number">-1</span>&amp;&amp;t[j]!=s[i])&#123;</span><br><span class="line">j=next[j];</span><br><span class="line">&#125;</span><br><span class="line">i++;j++;</span><br><span class="line"><span class="keyword">if</span>(j==lent)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i-j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s,t))&#123;</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line">KMP(s,t);</span><br><span class="line"><span class="keyword">int</span> lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lent;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,next[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-线段"><a href="#C-线段" class="headerlink" title="C 线段"></a>C 线段</h2><p>这道题具体的输入输出不太记得了，大致意思应该是输入n条线段的左右坐标(在数轴上)，然后判断最多有多少条线段满足不和别的线段相交并输出最多的数量，并且端点重合可以认为不相交。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>因为有助教给的提示，这道题就很简单了，就是对这些线段的右端点进行排序，然后通过贪心来从左到右遍历即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>可能输入输出有些问题，大家能明白大体就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">&#125;a[MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">    c=*(struct node*)a;</span><br><span class="line">    d=*(struct node*)b;</span><br><span class="line">    <span class="keyword">if</span>(c.r!=d.r) <span class="keyword">return</span> c.r-d.r;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> c.l-d.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].l,&amp;a[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(a,n,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].l&gt;=a[k].r)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-字符串"><a href="#D-字符串" class="headerlink" title="D 字符串"></a>D 字符串</h2><p>输入:串t、q、q个串s。然后对t、s进行比较，规则如下</p><ul><li>s和t长度相同，若s和t完全相同，输出myw，否则输出friend</li><li>s比t长度大，若t是s的子串，输出teacher，否则输出senior</li><li>s比t长度小，若s是t的子串，输出child，否则输出dd</li></ul><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>很简单的KMP，直接套板子即可，注意长度相同的时候不需要用KMP，直接strcmp就可</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> next[MAX];</span><br><span class="line"><span class="keyword">char</span> s[MAX],t[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">int</span> next[],<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">-1</span>;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">while</span>(j&lt;lent)&#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">-1</span>||t[j]==t[k])&#123;</span><br><span class="line">j++;</span><br><span class="line">k++;</span><br><span class="line">next[j]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k=next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line">getnext(next,t);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">while</span>(i&lt;lens&amp;&amp;j&lt;lent)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span>||t[j]==s[i])&#123;</span><br><span class="line">i++;j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> j=next[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=lent) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,t);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line"><span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),lent=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">if</span>(lent==lens)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(s,t)==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"myw\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"friend\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(lens&gt;lent)&#123;</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line"><span class="keyword">if</span>(KMP(s,t)==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"teacher\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"senior\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line"><span class="keyword">if</span>(KMP(t,s)==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"child\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"dd\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-圆"><a href="#G-圆" class="headerlink" title="G 圆"></a>G 圆</h2><p>这道题考试中因为时间问题没能做出来，所以代码的正确性也不确定，有错误希望大家指出来。</p><p>输入:圆心坐标、半径以及两个点的坐标</p><p>输出:两点最近且不穿过圆的距离</p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>首先肯定是两点连线不与圆相交就直接算两点距离，这个怎么判断呢，也不难，圆心到直线的距离与半径比较即可，但是这个距离怎么算比较方便呢，可以通过叉积先算出这两点与圆心围成的三角形面积再除以两点的距离来算得，这样比较好写。然后如果两点连线与圆相交的话，这样怎么算最近距离呢，很容易可以想到是和切线相关，即两点分别对圆作切线然后取两距离较近的切点，两切点之间的弧长加上这两个切点到其原来两个点的距离之和即为所要求的距离了。即下图的线段AA’加上线段BB’加上弧A’B’即可。</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/1.jpg" alt></p><p>然后是算AA’和BB’的问题了，很显然直接用勾股定理还是很容易算出来的，即AO和BO都很容易得到，用勾股定理就能得到AA’和BB’了。最后就是算弧A’B’的问题了，想算弧，显然先算角，即算图中对应得θ角，我的想法是先通过余弦定理算出α角然后知道角AOA’的余弦值，通过数学库的acos即可得到AOA’角，然后同理对于BOB’角，然后用α角减去这两个角就得到了θ角，然后通过周长和θ角求得弧长。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><p>这里就给出一些函数，具体代码就不给了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">2.0</span>*<span class="built_in">asin</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="built_in">point</span> p1,<span class="built_in">point</span> p2)</span></span>&#123;<span class="comment">//求直线两点距离的平方</span></span><br><span class="line">    <span class="keyword">return</span> ((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">xmult</span><span class="params">(<span class="built_in">point</span> p1,<span class="built_in">point</span> p2,<span class="built_in">point</span> p0)</span></span>&#123;<span class="comment">//叉积</span></span><br><span class="line"><span class="keyword">return</span> (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="built_in">point</span> p1,<span class="built_in">point</span> p2,<span class="built_in">point</span> p3)</span></span>&#123;<span class="comment">//三角形面积</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(xmult(p1,p2,p3))/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">alpha</span><span class="params">(<span class="built_in">point</span> p1,<span class="built_in">point</span> p2,<span class="built_in">point</span> p0)</span></span>&#123;<span class="comment">//算α角,余弦定理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>((dis(p1,p0)+dis(p2,p0)-dis(p1,p2))/</span><br><span class="line">                (<span class="number">2</span>*<span class="built_in">sqrt</span>(dis(p1,p0))*<span class="built_in">sqrt</span>(dis(p2,p0))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*剩下的运算就是直接调用函数就可完成，这里举一个判断</span></span><br><span class="line"><span class="comment">两点相连的直线是否与圆相交的例子即可，其他不再赘述。*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isx</span><span class="params">(<span class="built_in">point</span> p1,<span class="built_in">point</span> p2,<span class="built_in">point</span> p0,<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">2</span>*area(p1,p2,p0))/<span class="built_in">sqrt</span>(dis(p1,p2)))&gt;r;</span><br><span class="line">&#125;<span class="comment">//为true则说明不相交。</span></span><br></pre></td></tr></table></figure><h2 id="第二次算法期末考试"><a href="#第二次算法期末考试" class="headerlink" title="第二次算法期末考试"></a>第二次算法期末考试</h2><h2 id="A-真二分查找"><a href="#A-真二分查找" class="headerlink" title="A 真二分查找"></a>A 真二分查找</h2><p>输入输出和上文的A大致一样，这里就不再赘述</p><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>由于a[i]数据范围到了10<sup>9</sup>，所以没法投机取巧用桶装了，老老实实写二分，由于这次还要输出第一次出现的位置，因此找到一个位置后还应该向前排查是否存在相同的。其他还是比较好写了。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>,mid,ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(m==a[mid])&#123;</span><br><span class="line">ans=mid;</span><br><span class="line"><span class="keyword">int</span> tmp=mid;</span><br><span class="line"><span class="keyword">if</span>(a[tmp<span class="number">-1</span>]==m)&#123;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">tmp--;</span><br><span class="line">&#125;<span class="keyword">while</span>(a[tmp]==m);</span><br><span class="line">ans=tmp+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m&gt;a[mid]) l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans!=<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"Yes %d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>题目名字忘了，这道题很简单，就是一个优先队列的问题。代码也不给了真的很简单。需要注意的就是优先队列默认是从大到小的，这里需要让它从小到大，即用greater对应得那个初始化定义即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br></pre></td></tr></table></figure><h2 id="C-三角形"><a href="#C-三角形" class="headerlink" title="C 三角形"></a>C 三角形</h2><p>输入:n、n个数、m、l、r(m次查询)</p><p>输出:每次查询是否存在可以构成三角形的三个数，存在输出Yes，否则输出No</p><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>虽然到最后也没能看懂助教的提示，只混了0.5分，但是后来一想还是觉得自己很脑残。。。</p><p>不说废话了，首先肯定暴力是很好想到的，即对[l,r]区间进行排序然后遍历找是否存在i使得a[i]+a[i+1]&gt;a[i+2]即可，存在就break输出Yes，遍历完都没找到就输出No，但是这样明显也会超时没因为排序复杂度是O(nlogn)，那助教给的提示有什么用呢，显然对于斐波拉契数列，a[i]+a[i+1]是等于a[i+2]的，即是三角形存在的最差情况，即这个数列永远不可能存在三个数组成三角形，但是这个数列在i&gt;50后会爆int，由于我们的数据是在int范围内的，所以这个数列在i&gt;50后是肯定存在三个数能组成三角形的，因为a[50]+a[51]肯定比任何其他int内的数都大，所以肯定存在了。斐波拉契这个最坏情况在i&gt;50后都一定存在三个数能组成三角形了，那对于一个普通的序列，那就更是这样了，所以对于所有r-l&gt;=50的查询我们就直接认为它一定存在三个数能组成三角形了，&lt;50的情况则用暴力即可，时间复杂度也不可能会超了。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>],tmp[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,l,r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        tmp[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span>((r-l)&gt;=<span class="number">50</span>) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::sort(tmp+l,tmp+r+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r<span class="number">-2</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp[i]+tmp[i+<span class="number">1</span>]&gt;tmp[i+<span class="number">2</span>])&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++) tmp[i]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-k进制a-b"><a href="#E-k进制a-b" class="headerlink" title="E k进制a*b"></a>E k进制a*b</h2><p>输入:t组数据，k、a、b</p><p>输出:每组数据输出k进制的a*b的结果</p><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>一看数据是10<sup>5</sup>，肯定不是普通的乘法模拟了，直接就是FFT，套板子即可，k进制的问题就直接在最后还原的时候处理即可，很简单。不过y1s1，板子真的要敲很久。。。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000005</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="number">3.1415926535</span>;</span><br><span class="line"><span class="keyword">char</span> s1[N&gt;&gt;<span class="number">1</span>],s2[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">double</span> rea[N],ina[N],reb[N],inb[N];</span><br><span class="line"><span class="keyword">int</span> ans[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">double</span> *x,<span class="keyword">double</span> *y)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> t=*x;</span><br><span class="line">*x=*y;</span><br><span class="line">*y=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rev</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">ans&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">ans|=(x&amp;<span class="number">1</span>);</span><br><span class="line">x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">double</span> *reA,<span class="keyword">double</span> *inA,<span class="keyword">int</span> n,<span class="keyword">bool</span> flag)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">double</span> lgn=<span class="built_in">log</span>((<span class="keyword">double</span>)n)/<span class="built_in">log</span>((<span class="keyword">double</span>)<span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j=Rev(i,lgn);</span><br><span class="line"><span class="keyword">if</span>(j&gt;i)&#123;</span><br><span class="line">Swap(&amp;reA[i],&amp;reA[j]);</span><br><span class="line">Swap(&amp;inA[i],&amp;inA[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(s=<span class="number">1</span>;s&lt;=lgn;s++)&#123;</span><br><span class="line"><span class="keyword">int</span> m=(<span class="number">1</span>&lt;&lt;s);</span><br><span class="line"><span class="keyword">double</span> reWm=<span class="built_in">cos</span>(<span class="number">2</span>*pi/m),inWm=<span class="built_in">sin</span>(<span class="number">2</span>*pi/m);</span><br><span class="line"><span class="keyword">if</span>(flag) inWm=-inWm;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k+=m)&#123;</span><br><span class="line"><span class="keyword">double</span> reW=<span class="number">1.0</span>,inW=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m/<span class="number">2</span>;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> tag=k+j+m/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> reT=reW*reA[tag]-inW*inA[tag];</span><br><span class="line"><span class="keyword">double</span> inT=reW*inA[tag]+inW*reA[tag];</span><br><span class="line"><span class="keyword">double</span> reU=reA[k+j],inU=inA[k+j];</span><br><span class="line">reA[k+j]=reU+reT;</span><br><span class="line">inA[k+j]=inU+inT;</span><br><span class="line">reA[tag]=reU-reT;</span><br><span class="line">inA[tag]=inU-inT;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">rew_t</span>=reW*reWm-inW*inWm;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">inw_t</span>=reW*inWm+inW*reWm;</span><br><span class="line">reW=<span class="keyword">rew_t</span>;</span><br><span class="line">inW=<span class="keyword">inw_t</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">reA[i]/=n;</span><br><span class="line">inA[i]/=n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2);</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"><span class="built_in">memset</span>(rea,<span class="number">0</span>,<span class="keyword">sizeof</span>(rea));</span><br><span class="line"><span class="built_in">memset</span>(reb,<span class="number">0</span>,<span class="keyword">sizeof</span>(reb));</span><br><span class="line"><span class="built_in">memset</span>(ina,<span class="number">0</span>,<span class="keyword">sizeof</span>(ina));</span><br><span class="line"><span class="built_in">memset</span>(inb,<span class="number">0</span>,<span class="keyword">sizeof</span>(inb));</span><br><span class="line"><span class="keyword">int</span> i,lent,len=<span class="number">1</span>,len1,len2;</span><br><span class="line">len1=<span class="built_in">strlen</span>(s1),len2=<span class="built_in">strlen</span>(s2);</span><br><span class="line">lent=(len1&gt;len2?len1:len2);</span><br><span class="line"><span class="keyword">while</span>(len&lt;lent) len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;len1) rea[i]=(<span class="keyword">double</span>)s1[len1-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span>(i&lt;len2) reb[i]=(<span class="keyword">double</span>)s2[len2-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">ina[i]=inb[i]=<span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line">FFT(rea,ina,len,<span class="number">0</span>);</span><br><span class="line">FFT(reb,inb,len,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> rec=rea[i]*reb[i]-ina[i]*inb[i];</span><br><span class="line"><span class="keyword">double</span> inc=rea[i]*inb[i]+ina[i]*reb[i];</span><br><span class="line">rea[i]=rec;ina[i]=inc;</span><br><span class="line">&#125;</span><br><span class="line">FFT(rea,ina,len,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">ans[i]=(<span class="keyword">int</span>)(rea[i]+<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">ans[i+<span class="number">1</span>]+=ans[i]/k;</span><br><span class="line">ans[i]%=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len_ans=len1+len2+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(ans[len_ans]==<span class="number">0</span>&amp;&amp;len_ans&gt;<span class="number">0</span>) len_ans--;</span><br><span class="line"><span class="keyword">for</span>(i=len_ans;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong><em>上述所有如有谬误请一定指出，以便快速修改防止误导他人。</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 综合题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解篇-C6</title>
      <link href="/2019/11/30/%E9%A2%98%E8%A7%A3%E7%AF%87-C6/"/>
      <url>/2019/11/30/%E9%A2%98%E8%A7%A3%E7%AF%87-C6/</url>
      
        <content type="html"><![CDATA[<p><em>本文图片可能有时加载不出来，主要github不支持数学公式，我就只能放图，但是github的图片也功能经常出现问题，所以大家体谅一下</em></p><h2 id="A-A-B"><a href="#A-A-B" class="headerlink" title="A-A*B"></a>A-A*B</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>计算A*B</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>多组数据输入</p><p>两行两个大整数A和B，A和B保证小于等于50000位。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>每组数据输出一行，A*B的值</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12345678987654321 98765432123456789</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1219326320073159566072245112635269</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>可能有负数哦</p><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先如果大家有上课听讲了一丢丢并且下课很认真找过板子的话，肯定还是很容易找到FFT的板子的，这样就只用改负号了，如果没有并且想看下分析的可以往下阅读，当然可以直接看代码快乐AC。</p><p>首先我们如果用普通乘法采用竖式计算的方法的话时间复杂度为O(n<sup>2</sup>)，肯定是过不了的，所以我们采用FFT算法的话，我们可以降到O(nlogn)的复杂度，就可以随意过了。步入正题，说清楚这个板子不太容易。首先是多项式的两种表示方法——系数表示和点值表示。首先我们常见的多项式都是这样的A=a<sub>0</sub>+a<sub>1</sub>x+a<sub>2</sub>x<sup>2</sup>+……+a<sub>n-1</sub>x<sup>n-1</sup>，然后系数表示法就是用一个n维向量来表示A={a<sub>0</sub>,a<sub>1</sub>,…a<sub>n-1</sub>}，这样肯定能一一对应的表示多项式；然后是点值表示法，我们只用确定n个点x<sub>i</sub>和其对应的A，就肯定可以反推出A的多项式表达，所以点值表示法就是由n个点组成的{(0,A(0)),(1,A(1)),…,(n-1,A(n-1))}，这n个点可以随机取，并且该表示肯定也可以一一对应的表示多项式的，然后我们表示出A和B之后想要求出C，那C的点值表达肯定就是从A和B中取2n个点乘起来，然后也能得到点值表达，但是时间复杂度为O(n<sup>2</sup>)这样肯定不行。我们下面要做的就是把多项式从系数表达转换为点值表达，然后再转换回去，这些过程的时间复杂度都是低于O(nlogn)的。</p><p>然后我们就说一下复数的知识，首先任何复数z都能表示成为一个向量z=r(cosθ+isinθ)，其中r为z的模长，θ为向量与x轴的夹角，称为幅角。根据欧拉公式：e<sup>iθ</sup>=cosθ+isinθ，所以z=r*e<sup>iθ</sup>，所以可以推出(cosθ+isinθ)<sup>α</sup>=(cosαθ+isinαθ) ，这就是棣莫弗公式。然后是在方程x<sup>n</sup>=1中，满足这个方程的解一共有n个，这n个解构成了1的n次单位根。并且这n个根中至少存在一个根w<sub>n</sub>使得w<sub>n</sub>的1~n次方刚好就对应这些n次单位根，这样的w<sub>n</sub>就称为本原根，即这些n次单位根可以表示为w<sub>n</sub><sup>0</sup>,w<sub>n</sub><sup>1</sup>,w<sub>n</sub><sup>2</sup>,…,w<sub>n</sub><sup>n-1</sup>，并且这些数的n次方都为1，因此由棣莫弗公式我们可以得到一个通用(本原根可能不止一个)本原根w<sub>n</sub>= cos(2π/n)+i*sin(2π/n)。</p><p>然后介绍DFT(离散傅里叶变换)，我们之前所说的点值表示中x<sub>i</sub>的选取是随机的。而DFT的奇妙则是n个点取的就是上文所说的n次单位根。我们的A(x)可以表示为A(x)= ∑<sub>j</sub><sup>n−1</sup>(a<sub>j</sub>∗x<sup>j</sup>)(j从0开始)，然后x取n个单位根，即表示为y<sub>k</sub>=A(w<sub>n</sub><sup>k</sup>)=∑<sub>j</sub><sup>n−1</sup>(a<sub>j</sub>*(w<sub>n</sub><sup>k</sup>)<sup>j</sup>)(j从0开始，0&lt;=k&lt;=n-1)，这个数用y表示的话就是y={y<sub>0</sub>,y<sub>1</sub>,y<sub>2</sub>, … ,y<sub>n-1</sub>}。所以我们完成了从系数表示到点值表示转化的过程，只是这里的时间复杂度太高，我们不能采用。</p><p>然后我们再说FFT(快速傅里叶变换)，FFT本质也是把多项式的系数表达转换为点值表达，只不过时间复杂度更低。首先构造两个式子(A右上角那个0和1不是指数的意思，只是一个标号)：</p><ul><li><p>A<sup>0</sup>(x)=a<sub>0</sub>+a<sub>2</sub>x+a<sub>4</sub>x<sup>2</sup>+…+a<sub>n-2</sub>x<sup>n/2-1</sup></p></li><li><p>A<sup>1</sup>(x)=a<sub>1</sub>+a<sub>3</sub>x+a<sub>5</sub>x<sup>2</sup>+…+a<sub>n-1</sub>x<sup>n/2-1</sup></p></li></ul><p>能够知道的是A(x)=A<sup>0</sup>(x<sup>2</sup>)+x*A<sup>1</sup>(x<sup>2</sup>)，所以DFT问题就转化为了A<sup>0</sup>和A<sup>1</sup>在(w<sub>n</sub><sup>0</sup>)<sup>2</sup>,(w<sub>n</sub><sup>1</sup>)<sup>2</sup>,(w<sub>n</sub><sup>2</sup>)<sup>2</sup>,…,(w<sub>n</sub><sup>n-1</sup>)<sup>2</sup>这些点上的求值问题，这样一直分裂下去，就是分治的思想就能解决问题了，并且时间复杂度在O(nlogn)内。</p><p>然后是如何递归的问题，虽然已经找到了分治的方法，但是转化后的问题并不相同，而是多了一个平方。我们的处理方法还是借用棣莫弗公式，转化后即得到w<sub>αn</sub><sup>αk</sup>=w<sub>n</sub><sup>k</sup>，所以问题里的(w<sub>n</sub><sup>0</sup>)<sup>2</sup>,(w<sub>n</sub><sup>1</sup>)<sup>2</sup>,(w<sub>n</sub><sup>2</sup>)<sup>2</sup>,…,(w<sub>n</sub><sup>n-1</sup>)<sup>2</sup>就转化为了w<sub>n/2</sub><sup>0</sup>,w<sub>n/2</sub><sup>1</sup>,w<sub>n/2</sub><sup>2</sup>,…,w<sub>n/2</sub><sup>n-1</sup>，所以只要每次处理子问题的时候替换一下本原根，就让子问题和原问题完全一样了。由于在口头上说不是那么容易理解，下面举一个n=4的例子：</p><p>y<sub>0</sub>=A(w<sub>4</sub><sup>0</sup>)=A<sup>0</sup>((w<sub>4</sub><sup>0</sup>)<sup>2</sup>)+w<sub>4</sub><sup>0</sup>*A<sup>1</sup>((w<sub>4</sub><sup>0</sup>)<sup>2</sup>)，y<sub>1</sub>=A(w<sub>4</sub><sup>1</sup>)=A<sup>0</sup>((w<sub>4</sub><sup>1</sup>)<sup>2</sup>)+w<sub>4</sub><sup>1</sup>*A<sup>1</sup>((w<sub>4</sub><sup>1</sup>)<sup>2</sup>)；</p><p>y<sub>2</sub>=A(w<sub>4</sub><sup>2</sup>)=A<sup>0</sup>((w<sub>4</sub><sup>2</sup>)<sup>2</sup>)+w<sub>4</sub><sup>2</sup>*A<sup>1</sup>((w<sub>4</sub><sup>2</sup>)<sup>2</sup>)，y<sub>3</sub>=A(w<sub>4</sub><sup>3</sup>)=A<sup>0</sup>((w<sub>4</sub><sup>3</sup>)<sup>2</sup>)+w<sub>4</sub><sup>3</sup>*A<sup>1</sup>((w<sub>4</sub><sup>3</sup>)<sup>2</sup>)；</p><p>根据上文提到的借用棣莫弗公式从而转换的方法，从而得到：</p><p>y<sub>0</sub>=A(w<sub>4</sub><sup>0</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>0</sup>)+w<sub>4</sub><sup>0</sup>*A<sup>1</sup>(w<sub>2</sub><sup>0</sup>)，y<sub>1</sub>=A(w<sub>4</sub><sup>1</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>1</sup>)+w<sub>4</sub><sup>1</sup>*A<sup>1</sup>(w<sub>2</sub><sup>1</sup>)；</p><p>y<sub>2</sub>=A(w<sub>4</sub><sup>2</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>2</sup>)+w<sub>4</sub><sup>2</sup>*A<sup>1</sup>(w<sub>2</sub><sup>2</sup>)，y<sub>3</sub>=A(w<sub>4</sub><sup>3</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>3</sup>)+w<sub>4</sub><sup>3</sup>*A<sup>1</sup>(w<sub>2</sub><sup>3</sup>)；</p><p>再经过一些简单的公式变换(w<sub>n</sub><sup>k+n/2</sup>=w<sub>n</sub><sup>k</sup>*w<sub>n</sub><sup>n/2</sup>=-w<sub>n</sub><sup>k</sup>(可以想想为何是-1)和w<sub>n</sub><sup>k+n</sup>=w<sub>n</sub><sup>k</sup>*w<sub>n</sub><sup>n</sup>=w<sub>n</sub><sup>k</sup>)，得到</p><p>y<sub>0</sub>=A(w<sub>4</sub><sup>0</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>0</sup>)+w<sub>4</sub><sup>0</sup>*A<sup>1</sup>(w<sub>2</sub><sup>0</sup>)，y<sub>1</sub>=A(w<sub>4</sub><sup>1</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>1</sup>)+w<sub>4</sub><sup>1</sup>*A<sup>1</sup>(w<sub>2</sub><sup>1</sup>)；</p><p>y<sub>2</sub>=A(w<sub>4</sub><sup>2</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>0</sup>)-w<sub>4</sub><sup>0</sup>*A<sup>1</sup>(w<sub>2</sub><sup>0</sup>)，y<sub>3</sub>=A(w<sub>4</sub><sup>3</sup>)=A<sup>0</sup>(w<sub>2</sub><sup>1</sup>)-w<sub>4</sub><sup>1</sup>*A<sup>1</sup>(w<sub>2</sub><sup>1</sup>)；</p><p>然后这样就能很简单快速的得出y的点值表达{y<sub>0</sub>,y<sub>1</sub>,y<sub>2</sub>, … ,y<sub>n-1</sub>}啦，时间也是O(nlogn)。</p><p>但是我们求出了所需要得结果C多项式的点值表达后，怎么算出C的系数表达呢。我们先构造一个范德蒙矩阵V(有w的那个矩阵)如下</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog2/%E9%A2%98%E8%A7%A3C6-1.jpg" alt></p><p>这里我们可以记作y=V*a，同时观察这个V其中的元素，对于第k行第j列的元素，它的值为w<sub>n</sub><sup>kj</sup>。我们FFT所求即求出了V，我们现在要把点值表达变回系数表达，也就是FFT的逆过程。对于这个也就是求a，转换一下上方的式子就是a=V<sup>-1</sup>*y，而对于V<sup>-1</sup>这个矩阵来说，它第j行第k列的元素，则是w<sub>n</sub><sup>-kj</sup>/n(这里就不证明了，大家可以自己查阅)。</p><p>然后我们再考虑I<sub>n</sub>=V*V<sup>-1</sup>这个矩阵，考虑该矩阵中第j行第j’列的元素：</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog2/%E9%A2%98%E8%A7%A3C6-2.jpg" alt></p><p>然后我们还需要一个引理：对任意大于等于1的整数n和不能被n整除的非负整数k，有：(证明也在下方)</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog2/%E9%A2%98%E8%A7%A3C6-3.jpg" alt></p><p>也就是一个等比数列求和的过程，然后我们就能发现上面考虑的I<sub>n</sub>矩阵中的j行j‘列元素在j!=j’的时候为0，相等的时候为1。所以我们就能根据a=V<sup>-1</sup>*y得到以下式子：(下方也放上上文求出的y的式子)</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog2/%E9%A2%98%E8%A7%A3C6-4.jpg" alt></p><p>所以我们在计算逆FFT时，就把a和y的位置互换，再用w<sub>n</sub><sup>-1</sup>代替w<sub>n</sub><sup>1</sup>，并把结果除以n就可以了。时间复杂度也是一样的，通过FFT和逆FFT的运用就能把 次数界为 n 的多项式在其系数表示与点值表示之间来回进行转换。 从而算出大数乘法了。</p><hr><p>好了上面就是纯数学的推导部分，阅读起来应该不是很难(毕竟我这个cj都能理解)，然后再讲讲怎么具体应用于大数乘法。其实也很简单，首先运用FFT将A和B的系数表示转换为点值表示，然后将他们相乘得到C的点值表示，最后通过逆FFT将C转换为系数表示，输出答案就okkk了。然后先放代码吧。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 150010</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.141592653</span>;</span><br><span class="line"><span class="keyword">char</span> s1[N&gt;&gt;<span class="number">1</span>], s2[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">double</span> rea[N], ina[N], reb[N], inb[N];</span><br><span class="line"><span class="keyword">int</span> ans[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">double</span> *x, <span class="keyword">double</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rev</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        ans&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        ans |= (x &amp; <span class="number">1</span>);</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;<span class="comment">//二进制的反转x-&gt;ans</span></span><br><span class="line"><span class="comment">//作用就是把这n个数分成我们想要的lgn个部分，且每个部分仅有两个待处理的，然后再处理</span></span><br><span class="line"><span class="comment">//不太明白的可以看看网上关于FFT中的二进制的翻转问题的博客啥的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">double</span> *reA, <span class="keyword">double</span> *inA, <span class="keyword">int</span> n, <span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">double</span> lgn = <span class="built_in">log</span>((<span class="keyword">double</span>)n) / <span class="built_in">log</span>((<span class="keyword">double</span>)<span class="number">2</span>);<span class="comment">//定义log(2)(n),也就是代表分裂次数</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = Rev(i, lgn);</span><br><span class="line">        <span class="keyword">if</span>(j &gt; i)&#123;</span><br><span class="line">            Swap(&amp;reA[i], &amp;reA[j]);</span><br><span class="line">            Swap(&amp;inA[i], &amp;inA[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(s = <span class="number">1</span>; s &lt;= lgn; s++)&#123;<span class="comment">//共进行lgn次</span></span><br><span class="line">        <span class="keyword">int</span> m = (<span class="number">1</span>&lt;&lt;s);</span><br><span class="line">        <span class="keyword">double</span> reWm = <span class="built_in">cos</span>(<span class="number">2</span>*pi/m), inWm = <span class="built_in">sin</span>(<span class="number">2</span>*pi/m);<span class="comment">//本原根</span></span><br><span class="line">        <span class="keyword">if</span>(flag) inWm = -inWm;<span class="comment">//对C来说就要转换为负的</span></span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; n; k += m)&#123;</span><br><span class="line">            <span class="keyword">double</span> reW = <span class="number">1.0</span>, inW = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m / <span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tag = k+j+m/<span class="number">2</span>;<span class="comment">//可以对照上文的公式看</span></span><br><span class="line">                <span class="keyword">double</span> reT = reW * reA[tag] - inW * inA[tag];</span><br><span class="line">                <span class="keyword">double</span> inT = reW * inA[tag] + inW * reA[tag];</span><br><span class="line">                <span class="keyword">double</span> reU = reA[k+j], inU = inA[k+j];</span><br><span class="line">                reA[k+j] = reU + reT;</span><br><span class="line">                inA[k+j] = inU + inT;</span><br><span class="line">                reA[tag] = reU - reT;</span><br><span class="line">                inA[tag] = inU - inT;</span><br><span class="line">                <span class="keyword">double</span> <span class="keyword">rew_t</span> = reW * reWm - inW * inWm; </span><br><span class="line">                <span class="keyword">double</span> <span class="keyword">inw_t</span> = reW * inWm + inW * reWm; <span class="comment">//这里实现迭代</span></span><br><span class="line">                reW = <span class="keyword">rew_t</span>;</span><br><span class="line">                inW = <span class="keyword">inw_t</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;<span class="comment">//对C来说需要除以n</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            reA[i] /= n;</span><br><span class="line">            inA[i] /= n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s1, s2))&#123; </span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span> , <span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="built_in">memset</span>(rea, <span class="number">0</span> , <span class="keyword">sizeof</span>(rea));</span><br><span class="line">        <span class="built_in">memset</span>(ina, <span class="number">0</span> , <span class="keyword">sizeof</span>(ina));</span><br><span class="line">        <span class="built_in">memset</span>(reb, <span class="number">0</span> , <span class="keyword">sizeof</span>(reb));</span><br><span class="line">        <span class="built_in">memset</span>(inb, <span class="number">0</span> , <span class="keyword">sizeof</span>(inb));<span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">int</span> i, lent, len = <span class="number">1</span>, len1, len2;</span><br><span class="line">        len1 = <span class="built_in">strlen</span>(s1);</span><br><span class="line">        len2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line">        <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'-'</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line">        s1[i]=s1[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">len1--;</span><br><span class="line">flag^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s2[<span class="number">0</span>]==<span class="string">'-'</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len2;i++)&#123;</span><br><span class="line">        s2[i]=s2[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">len2--;</span><br><span class="line">flag^=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//符号的判断</span></span><br><span class="line">        lent = (len1 &gt; len2 ? len1 : len2);</span><br><span class="line">        <span class="keyword">while</span>(len &lt; lent) len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        len &lt;&lt;= <span class="number">1</span>;<span class="comment">// 保证长度为2的幂次，才能逐渐二分</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len1) rea[i] = (<span class="keyword">double</span>)s1[len1-i<span class="number">-1</span>] - <span class="string">'0'</span>;<span class="comment">//将数组s1反转，并保存为double</span></span><br><span class="line">            <span class="keyword">if</span>(i &lt; len2) reb[i] = (<span class="keyword">double</span>)s2[len2-i<span class="number">-1</span>] - <span class="string">'0'</span>;<span class="comment">//将数组s2反转，并保存为double</span></span><br><span class="line">            ina[i] = inb[i] = <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        FFT(rea, ina, len, <span class="number">0</span>);<span class="comment">//对A进行FFT</span></span><br><span class="line">        FFT(reb, inb, len, <span class="number">0</span>);<span class="comment">//对B进行FFT</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> rec = rea[i] * reb[i] - ina[i] * inb[i];</span><br><span class="line">            <span class="keyword">double</span> inc = rea[i] * inb[i] + ina[i] * reb[i];</span><br><span class="line">            rea[i] = rec; ina[i] = inc;</span><br><span class="line">        &#125;<span class="comment">//获得C的点值表达</span></span><br><span class="line">        FFT(rea, ina, len, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            ans[i] = (<span class="keyword">int</span>)(rea[i] + <span class="number">0.4</span>);<span class="comment">//舍入</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            ans[i+<span class="number">1</span>] += ans[i] / <span class="number">10</span>;</span><br><span class="line">            ans[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;<span class="comment">//消除进位</span></span><br><span class="line">        <span class="keyword">int</span> len_ans = len1 + len2 + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(ans[len_ans] == <span class="number">0</span> &amp;&amp; len_ans &gt; <span class="number">0</span>) len_ans--;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = len_ans; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文的代码我几乎都标注了，应该能够比较容易的看懂了</p><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="B-定向越野"><a href="#B-定向越野" class="headerlink" title="B-定向越野"></a>B-定向越野</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>为了锻炼身体，某楠参加了一个定向越野比赛，定向越野是利用地图和指北针导航的一项竞技运动，通常由起点出发，在多个点标处打卡，再返回终点。但是非酋某楠的指北针居然是坏的，所以只能靠记住来时的方向和各个点的坐标来判断下一步。现在希望你能够帮忙判断下一步是左转还是右转。对于每次转弯输出一个字符，左转输出’L’，右转输出’R’，直走不输出。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>多组数据输入</p><p>每组数据第一行一个数n，n表示按顺序经历的点的数量，包括起点、各个点标以及终点。1&lt;n&lt;10000</p><p>接下来n行每行两个整数为点的坐标，均在INT范围内。</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>每组数据一行，每次转弯的方向’L’或’R’，中间用空格分隔</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 5 </span><br><span class="line"> 0 0</span><br><span class="line">-1 1</span><br><span class="line"> 0 1</span><br><span class="line">-1 2</span><br><span class="line"> 0 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R L R</span><br></pre></td></tr></table></figure><hr><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>很明显的一道计算几何题，用叉积判断方向就可，需要注意的是如果走直线是不输出的。还有一个就是可能long long会超，如果先算乘法再算减法的话(就是把叉积的式子展开了分别算)，就需要用double来存，如果是先减再乘，longlong就能随意过了。</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">10005</span>],y[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(((<span class="keyword">long</span> <span class="keyword">long</span>)(x[i]-x[i<span class="number">-1</span>])*(y[i+<span class="number">1</span>]-y[i])-(<span class="keyword">long</span> <span class="keyword">long</span>)(x[i+<span class="number">1</span>]-x[i])*(y[i]-y[i<span class="number">-1</span>]))&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"L "</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(((<span class="keyword">long</span> <span class="keyword">long</span>)(x[i]-x[i<span class="number">-1</span>])*(y[i+<span class="number">1</span>]-y[i])-(<span class="keyword">long</span> <span class="keyword">long</span>)(x[i+<span class="number">1</span>]-x[i])*(y[i]-y[i<span class="number">-1</span>]))&lt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"R "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="C-危机合约"><a href="#C-危机合约" class="headerlink" title="C-危机合约"></a>C-危机合约</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>一天起床，你突然发现自己成为了整合运动的一员，作为火刀哥的手下前去探路。由于危机合约的特殊性，博士只能布置没有阻挡数的干员，每路过一个干员就会受到一次他的攻击，你的目的就是在不被干掉的情况下，从位于最左第一列某点的红色出生点走到位于最右某点的蓝色目的地。作为一个普通宿主士兵，你只能走向右上，右，右下三个格子。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>第一行n和m，表示地图有n行m列 (n,m&lt;100)</p><p>第二行h，a和b，h表示你现有的血量，红色出生点在第0列a行，蓝色目的地在第m+1列b行(1&lt;=a,b&lt;=n)</p><p>接下来n行，每行m列，其中’*’表示这个点不能走，数字表示这个点上干员对你的伤害，范围0到9</p><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>如果能够活着走到目的地，则输出剩余血量</p><p>如果已经死亡，则输出”doctor win”</p><h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 5</span><br><span class="line">20 1 3</span><br><span class="line">0 1 2 * 4</span><br><span class="line">2 3 * 3 5</span><br><span class="line">6 1 2 * 4</span><br></pre></td></tr></table></figure><h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><hr><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>首先应该能看出这是一道dp的题目，所以就先分析怎么样dp吧。首先本人先想到的是对当前的血量进行dp(好像和大部分盆友想法不太一样)，<code>dp[i][j]</code>即代表在i行j列处的血量，并且还没有扣除当前应该扣除的血量，即已经走到了i行j列，只是还没扣血(不太理解的可以从代码来理解)，这样dp的好处呢就是不用管*格是否走不走得到，反正就往下走，走到*后再往下走就直接把血扣到负数即可。然后转移方程呢，就是走到当前格子的血量等于前一列那三个格子中剩余血量减去需要扣除的血量后最大的。如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]=tmax(dp[i<span class="number">-1</span>][j<span class="number">-1</span>]-<span class="built_in">map</span>[i<span class="number">-1</span>][j<span class="number">-1</span>],dp[i][j<span class="number">-1</span>]-<span class="built_in">map</span>[i][j<span class="number">-1</span>],dp[i+<span class="number">1</span>][j<span class="number">-1</span>]-<span class="built_in">map</span>[i+<span class="number">1</span>][j<span class="number">-1</span>])<span class="comment">//tmax指三者中的最大值</span></span><br></pre></td></tr></table></figure><p>一些需要注意的地方呢就是，首先初始化的问题，*的格子赋值为inf，dp的初始值赋值为-inf，map的初始值赋值为inf，因为要保证第一步走的时候的正确性，然后还要比所给的图多赋值一圈，才能保证在边缘的时候不会走错，然后a点的初始化就是<code>dp[a][0]=h,map[a][0]=-inf</code>，因为赋值都是inf和-inf并且还存在减法，数据的要求也是10<sup>9</sup>，所以把dp和map设置成long long比较安全。最后还有一个很坑的就是读入的问题了，scanf和getchar真的有毒，因为<code>\r\n</code>等诸多问题，所以还是建议用cin比较好。最后我在代码里也加一个其他dp的方法也能ac。</p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll dp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function">ll <span class="title">dmax</span><span class="params">(ll a,ll b,ll c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;=b&amp;&amp;a&gt;=c) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">if</span>(b&gt;=a&amp;&amp;b&gt;=c) <span class="keyword">return</span> b;</span><br><span class="line"><span class="keyword">if</span>(c&gt;=a&amp;&amp;c&gt;=b) <span class="keyword">return</span> c;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">ll <span class="built_in">map</span>[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> h,a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;h,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m+<span class="number">1</span>;j++)&#123;</span><br><span class="line">dp[i][j]=-inf;</span><br><span class="line"><span class="built_in">map</span>[i][j]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[a][<span class="number">0</span>]=h;</span><br><span class="line"><span class="built_in">map</span>[a][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(c!=<span class="string">'*'</span>) <span class="built_in">map</span>[i][j]=c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">map</span>[i][j]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m+<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dp[i][j]=dmax(dp[i<span class="number">-1</span>][j<span class="number">-1</span>]-<span class="built_in">map</span>[i<span class="number">-1</span>][j<span class="number">-1</span>],dp[i][j<span class="number">-1</span>]-<span class="built_in">map</span>[i][j<span class="number">-1</span>],dp[i+<span class="number">1</span>][j<span class="number">-1</span>]-<span class="built_in">map</span>[i+<span class="number">1</span>][j<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*for(int j=1;j&lt;=m+1;j++)&#123;</span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">dp[i][j]=dmin(dp[i-1][j-1],dp[i][j-1],dp[i+1][j-1])+map[i][j];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">    <span class="comment">//这个dp对应的就是减少的生命值，初始化就是反的，并且最后的输出和判断doctor win也有点区别，还有就是求的是最小值，其实两个dp实际上是一样的</span></span><br><span class="line"><span class="keyword">if</span>(dp[b][m+<span class="number">1</span>]&lt;=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"doctor win"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>,dp[b][m+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="D-不NAN的过河"><a href="#D-不NAN的过河" class="headerlink" title="D-不NAN的过河"></a>D-不NAN的过河</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>某楠也要过Zexal过的那条河，通过借助河中间的石砖过到河对岸去，这些石砖以直线排列。河的长度为L，当某楠走到或跨过坐标为L的点时，就算到达了河对岸。但是强迫症的某楠最多只能跨m次，请你计算某楠过河最长的一步最少是多少。注意从岸边迈向石头和从石头迈向岸边也算1步。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>多组数据输入</p><p>每组数据第一行有3个正整数L，n，m，L表示河的宽度，n表示有n个石砖，m表示某楠最多只能跨m步。(1≤L≤10<sup>9</sup>,1≤n≤10<sup>5</sup>,1≤m≤10<sup>5</sup>)</p><p>第二行有n个不同的正整数分别表示这n个石砖在数轴上的位置（所有相邻的整数之间用一个空格隔开。</p><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>每组数据输出一个整数，表示某楠迈的最长一步的最小距离。</p><h3 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2 3</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><hr><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>首先看问题他要求最长一步的最小距离，肯定需要去判断，遍历判断肯定时间不太行，O(n<sup>2</sup>)肯定超了，所以我们就采用二分来枚举即可，时间是绰绰有余的。然后是怎么判断的问题了，便于理解，我们把a[0]设为0，a[n+1]设为L，然后判断的问题，肯定要让每一步跨的最大，所以就是贪心的思想。在遇到一步跨不到的石砖时才记录步数，然后将开始的地方置为当前石砖的前一块也就是<code>a[i-1]</code>，这样需要考虑的就是如果一步跨过了岸边，那它也会将开始的地方置为a[n]，所以最后一步就没有算上，所以我们cnt初始值设为1而不是0。还有一个很重要的就是，他没有说石砖是有序的，所以最开始需要排个序才行(这个bug太恶心)。</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,l,mid;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c,d;</span><br><span class="line">c=*(<span class="keyword">int</span> *)a;</span><br><span class="line">d=*(<span class="keyword">int</span> *)b;</span><br><span class="line"><span class="keyword">return</span> c-d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>,pre=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n+<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]-pre&gt;mid) &#123;</span><br><span class="line">pre=a[i<span class="number">-1</span>];</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(a[i]-pre&gt;mid)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&lt;=m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;n,&amp;m)) &#123;</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">0</span>,a[n+<span class="number">1</span>]=l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125; </span><br><span class="line">qsort(a,n+<span class="number">2</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),cmp);</span><br><span class="line"><span class="keyword">int</span> left=<span class="number">0</span>,right=l,ans;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right) &#123;</span><br><span class="line">mid=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check()) ans=mid,right=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> left=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="E-线段交点"><a href="#E-线段交点" class="headerlink" title="E-线段交点"></a>E-线段交点</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>有两条线段，求线段的交点。</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>多组输入数据</p><p>每组数据两行</p><p>每行两个整数x，y，分别表示一条线段的x坐标，y坐标(−100≤x,y≤100)</p><h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>每组数据输出一行，两个数表示交点的坐标，中间用空格隔开。如果没有交点，或者线段重合，输出<code>none</code></p><h3 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 1</span><br><span class="line">1 0 0 1 </span><br><span class="line">0 0 2 2</span><br><span class="line">1 1 3 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.50 0.50</span><br><span class="line">none</span><br></pre></td></tr></table></figure><hr><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>首先这道题就是一道数学题感觉，需要考虑的情况很多，考虑完全就能过了。步入正题，我们两条直线先设置为AB，CD，交点为O，叉积用cross()表示。首先肯定是判断能否相交，因为我们是根据叉积来判断的，所以相交的情况也会比较多一些。首先先看正常的相交，也就是相交点不在端点处。对应的条件就是cross(AC,AB)和cross(AD,AB)异号并且cross(CA,CD)和cross(CB,CD)异号即可。然后是AB端点和CD重合的情况，对应的条件就是cross(AC,AB)和cross(AD,AB)异号并且cross(CA,CD)和cross(CB,CD)积为0，当然还有相反的情况(CD端点和AB重合，条件就不说了)，然后是重合和平行的情况，即叉积cross(AB,CD)为0，这里面也有一种相交的情况即诸如这种A-&gt;B(C)-&gt;D情况，怎么讨论这种情况呢，如果AB的两个端点均在CD线段上，这肯定是重合，那这个情况怎么判断呢，我用的方法比较笨(应该会有更简便的方法的)，通过AC斜率和AD斜率相等并且A的x、y坐标在C和D的x、y坐标中间，对B也一样，然后就是这种重合情况。然后在这种情况之外如果存在一组端点(A和C及其他情况)重合的情况，则是相交了，这种情况的判断方法我用的也比较笨，即通过判断A是否和C或者D重合，以及B是否和C或者D重合，然后如果重合就说明相交了，并且在这里需要输出，因为正常算交点的方法没法算这种情况，这里输出应该比较容易，存在重合就直接输出坐标就好了。然后其他的情况都是none即可。这就是所有的情况了。前面几种都比较好实现，最后一个情况会麻烦一些(也可能是我的方法比较笨)。</p><p>然后再说一下怎么算交点的问题了。就是通过算出两个三角形ACD,BCD的面积，然后根据其比值求出AO比AB，然后求出向量OA，然后用A的坐标加上OA向量即得到O的坐标了，比较容易理解。</p><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">Point(<span class="keyword">double</span> x=<span class="number">0</span>, <span class="keyword">double</span> y=<span class="number">0</span>):x(x),y(y) &#123;&#125;</span><br><span class="line">Point <span class="keyword">operator</span> + (Point p)&#123;</span><br><span class="line"><span class="keyword">return</span> Point(x+p.x,y+p.y);<span class="comment">//重定义加法，点的加法即坐标相加，也可能是点和向量相加 </span></span><br><span class="line">&#125;</span><br><span class="line">Point <span class="keyword">operator</span> - (Point p)&#123;</span><br><span class="line"><span class="keyword">return</span> Point(x-p.x,y-p.y);<span class="comment">//重定义减法，点的减法即坐标相减 </span></span><br><span class="line">&#125;</span><br><span class="line">Point <span class="keyword">operator</span> * (<span class="keyword">double</span> a)&#123;</span><br><span class="line"><span class="keyword">return</span> Point(a*x,a*y);<span class="comment">//重定义乘法，点乘常数即以坐标乘常数 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">typedef</span> Point Vector;<span class="comment">//因为向量Vector也能用X,Y表示</span></span><br><span class="line"><span class="keyword">int</span> flag; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment</span>&#123;</span> <span class="comment">//Segment 线段</span></span><br><span class="line">Point p1,p2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Vector a, Vector b)</span> </span>&#123;<span class="comment">//向量的外积 </span></span><br><span class="line"><span class="keyword">return</span> a.x*b.y - a.y*b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">crossx</span><span class="params">(Point p1,Point p2,Point q1,Point q2)</span></span>&#123;<span class="comment">//也是外积不过是具体的点之间的 </span></span><br><span class="line"><span class="keyword">return</span> (p1.x-p2.x)*(q1.y-q2.y)-(p1.y-p2.y)*(q1.x-q2.x);<span class="comment">//p1p2 x q1q2 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">issame</span><span class="params">(Point P1,Point P2,Point Q1,Point Q2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>((P1.x==Q1.x&amp;&amp;P1.y==Q1.y)&amp;&amp;(!(P2.x==Q2.x&amp;&amp;P2.y==Q2.y))) &#123; <span class="comment">//P1=Q1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf %lf\n"</span>,P1.x,P1.y);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>((!(P1.x==Q1.x&amp;&amp;P1.y==Q1.y))&amp;&amp;(P2.x==Q2.x&amp;&amp;P2.y==Q2.y)) &#123; <span class="comment">//P2=Q2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf %lf\n"</span>,P2.x,P2.y);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>((P2.x==Q1.x&amp;&amp;P2.y==Q1.y)&amp;&amp;(!(P1.x==Q2.x&amp;&amp;P1.y==Q2.y))) &#123; <span class="comment">//P2=Q1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf %lf\n"</span>,P2.x,P2.y);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>((!(P2.x==Q1.x&amp;&amp;P2.y==Q1.y))&amp;&amp;(P1.x==Q2.x&amp;&amp;P1.y==Q2.y)) &#123; <span class="comment">//P1=Q2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf %lf\n"</span>,P1.x,P1.y);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isch</span><span class="params">(Point P1,Point P2,Point Q1,Point Q2)</span></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="comment">//存在两个端点均与另一线段重合</span></span><br><span class="line">((P2.y-Q1.y)*(Q1.x-P1.x)==(Q1.y-P1.y)*(P2.x-Q1.x)&amp;&amp;(((P1.x&lt;=Q1.x)&amp;&amp;(P2.x&gt;=Q1.x))||((P1.x&gt;=Q1.x)&amp;&amp;(P2.x&lt;=Q1.x)))&amp;&amp;(((P1.y&lt;=Q1.y)&amp;&amp;(P2.y&gt;=Q1.y))||((P1.y&gt;=Q1.y)&amp;&amp;(P2.y&lt;=Q1.y)))&amp;&amp;</span><br><span class="line">(P2.y-Q2.y)*(Q2.x-P1.x)==(Q2.y-P1.y)*(P2.x-Q2.x)&amp;&amp;(((P1.x&lt;=Q2.x)&amp;&amp;(P2.x&gt;=Q2.x))||((P1.x&gt;=Q2.x)&amp;&amp;(P2.x&lt;=Q2.x)))&amp;&amp;(((P1.y&lt;=Q2.y)&amp;&amp;(P2.y&gt;=Q2.y))||((P1.y&gt;=Q2.y)&amp;&amp;(P2.y&lt;=Q2.y))))||</span><br><span class="line">((Q2.y-P1.y)*(P1.x-Q1.x)==(P1.y-Q1.y)*(Q2.x-P1.x)&amp;&amp;(((Q1.x&lt;=P1.x)&amp;&amp;(Q2.x&gt;=P1.x))||((Q1.x&gt;=P1.x)&amp;&amp;(Q2.x&lt;=P1.x)))&amp;&amp;(((Q1.y&lt;=P1.y)&amp;&amp;(Q2.y&gt;=P1.y))||((Q1.y&gt;=P1.y)&amp;&amp;(Q2.y&lt;=P1.y)))&amp;&amp;</span><br><span class="line">(Q2.y-P2.y)*(P2.x-Q1.x)==(P2.y-Q1.y)*(Q2.x-P2.x)&amp;&amp;(((Q1.x&lt;=P2.x)&amp;&amp;(Q2.x&gt;=P2.x))||((Q1.x&gt;=P2.x)&amp;&amp;(Q2.x&lt;=P2.x)))&amp;&amp;(((Q1.y&lt;=P2.y)&amp;&amp;(Q2.y&gt;=P2.y))||((Q1.y&gt;=P2.y)&amp;&amp;(Q2.y&lt;=P2.y))))</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(Point p1,Point p2,Point q1,Point q2)</span></span>&#123;<span class="comment">//判断是否相交 </span></span><br><span class="line"><span class="keyword">if</span>(crossx(p1,q1,p1,p2)*crossx(p1,q2,p1,p2)&lt;<span class="number">0</span>&amp;&amp;crossx(q1,p1,q1,q2)*crossx(q1,p2,q1,q2)&lt;<span class="number">0</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//正常相交 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((crossx(p1,q1,p1,p2)*crossx(p1,q2,p1,p2)&lt;<span class="number">0</span>&amp;&amp;crossx(q1,p1,q1,q2)*crossx(q1,p2,q1,q2)==<span class="number">0</span>)||</span><br><span class="line">(crossx(p1,q1,p1,p2)*crossx(p1,q2,p1,p2)==<span class="number">0</span>&amp;&amp;crossx(q1,p1,q1,q2)*crossx(q1,p2,q1,q2)&lt;<span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//存在一端点在另一条线段上而不是端点处的相交 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(crossx(p1,q1,p1,p2)*crossx(p1,q2,p1,p2)==<span class="number">0</span>&amp;&amp;crossx(q1,p1,q1,q2)*crossx(q1,p2,q1,q2)==<span class="number">0</span>)&#123;<span class="comment">//共线 </span></span><br><span class="line"><span class="keyword">if</span>(isch(p1,p2,q1,q2)) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(issame(p1,p2,q1,q2))&#123;<span class="comment">//存在一组端点重合 </span></span><br><span class="line">flag=<span class="number">1</span>;<span class="comment">//不是正常相交，需要自己算，之后就不算 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">getCrossPoint</span><span class="params">(Segment s1,Segment s2)</span></span>&#123;</span><br><span class="line">Vector base;<span class="comment">//向量</span></span><br><span class="line">base=s2.p2-s2.p1; </span><br><span class="line"><span class="keyword">double</span> d1=<span class="built_in">fabs</span>(cross(base,s1.p1-s2.p1));</span><br><span class="line"><span class="keyword">double</span> d2=<span class="built_in">fabs</span>(cross(base,s1.p2-s2.p1));<span class="comment">//算三角形面积，只是没有除以2 </span></span><br><span class="line"><span class="keyword">double</span> t=d1/(d1+d2);<span class="comment">//面积之比等于线段之比，可理解为t=AO/(AO+BO) </span></span><br><span class="line"><span class="keyword">return</span> s1.p1+(s1.p2-s1.p1)*t;<span class="comment">//通过A点坐标加上向量OA然后求得O点坐标 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Segment s1,s2;</span><br><span class="line">Point p;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;s1.p1.x,&amp;s1.p1.y,&amp;s1.p2.x,&amp;s1.p2.y)) &#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;s2.p1.x,&amp;s2.p1.y,&amp;s2.p2.x,&amp;s2.p2.y);</span><br><span class="line"><span class="keyword">if</span>(!judge(s1.p1,s1.p2,s2.p1,s2.p2)) <span class="built_in">printf</span>(<span class="string">"none\n"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">p=getCrossPoint(s1,s2);<span class="comment">//交点坐标 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf %lf\n"</span>,p.x,p.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="F-直线"><a href="#F-直线" class="headerlink" title="F-直线"></a>F-直线</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>二维平面上有n个黑点m个白点，现在请问是否存在一条直线使得所有的黑点白点分别在直线两侧（黑点都在一侧，白点都在另一侧）。</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h3><p>对于每组数据：</p><p>第一行两个正整数n、m。(1≤n,m≤100)</p><p>接下来n行，每行两个正整数x,y，表示一个黑点的xy坐标(1≤x,y≤1000)</p><p>接下来m行，每行两个正整数x,y，表示一个白点的xy坐标(1≤x,y≤1000)</p><h3 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h3><p>每组数据输出一行，存在输出<code>YES</code>，否则输出<code>NO</code></p><h3 id="输入样例-5"><a href="#输入样例-5" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">100 700</span><br><span class="line">200 200</span><br><span class="line">600 600</span><br><span class="line">500 100</span><br><span class="line">500 300</span><br><span class="line">800 500</span><br><span class="line">3 3</span><br><span class="line">100 300</span><br><span class="line">400 600</span><br><span class="line">400 100</span><br><span class="line">600 400</span><br><span class="line">500 900</span><br><span class="line">300 300</span><br></pre></td></tr></table></figure><h3 id="输出样例-5"><a href="#输出样例-5" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><hr><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>从题目来看可以比较容易可以看出是一道凸包的题目，即黑色点的凸包和白色点的凸包是否存在交点，存在，则不存在题中所说的直线，反之亦然。重点就是如何判断凸包是否相交呢。凸包相交也就分为两种情况，一种是一个凸包的点是否被另一凸包包含，包含并且不是全部的点被包含(需要特判一下)则肯定相交，第二种是两个凸包的边是否相交(比如两个三角形组成六芒星的图，点都不互相包含，但是凸包相交)。需要注意的就是，是否凸包被完全包含，以及凸包的点在另一个凸包的边的上。具体的怎么判断算法我就不多介绍了(有板子就好了)，大家可以看AC代码(网上找的板子)自己理解一下，我能看懂的地方都给大家标注了，但是很多具体的算法(比如判断边相交)我也没怎么详细看懂(不好意思，能力有限)。</p><h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point(<span class="keyword">double</span> x = <span class="number">0</span>, <span class="keyword">double</span> y = <span class="number">0</span>) : x(x), y(y) &#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span>+(Point a) &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(a.x + x, a.y + y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(Point a) &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x - a.x, y - a.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == a.x)</span><br><span class="line">            <span class="keyword">return</span> y &lt; a.y;</span><br><span class="line">        <span class="keyword">return</span> x &lt; a.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Point &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - a.x) &lt; eps &amp;&amp; <span class="built_in">fabs</span>(y - a.y) &lt; eps)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(x * x + y * y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Vector a, Vector b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;<span class="comment">//叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Vector a, Vector b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;<span class="comment">//点积</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isclock</span><span class="params">(Point p0, Point p1, Point p2)</span> </span>&#123;</span><br><span class="line">    Vector a = p1 - p0;</span><br><span class="line">    Vector b = p2 - p0;</span><br><span class="line">    <span class="keyword">if</span> (cross(a, b) &lt; -eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="comment">//判断平行也就是夹角很小很小</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDistance</span><span class="params">(Point a, Point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(a.x - b.x, <span class="number">2</span>) + <span class="built_in">pow</span>(a.y - b.y, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;Point&gt; Polygon;</span><br><span class="line"><span class="function">Polygon <span class="title">Andrew</span><span class="params">(Polygon s)</span></span>&#123;</span><br><span class="line">    Polygon u,l;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;<span class="number">3</span>) <span class="keyword">return</span> s;</span><br><span class="line">    sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());<span class="comment">//根据x坐标排序 </span></span><br><span class="line">    u.push_back(s[<span class="number">0</span>]);</span><br><span class="line">    u.push_back(s[<span class="number">1</span>]);</span><br><span class="line">    l.push_back(s[s.<span class="built_in">size</span>()<span class="number">-1</span>]);</span><br><span class="line">    l.push_back(s[s.<span class="built_in">size</span>()<span class="number">-2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;s.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=u.<span class="built_in">size</span>();n&gt;=<span class="number">2</span>&amp;&amp;!isclock(u[n<span class="number">-2</span>],u[n<span class="number">-1</span>],s[i]);--n)&#123;</span><br><span class="line">            u.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        u.push_back(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = s.<span class="built_in">size</span>() - <span class="number">3</span> ; i &gt;= <span class="number">0</span> ; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n = l.<span class="built_in">size</span>() ; n &gt;=<span class="number">2</span> &amp;&amp; !isclock(l[n<span class="number">-2</span>],l[n<span class="number">-1</span>],s[i]); --n) &#123;</span><br><span class="line">            l.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        l.push_back(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; u.<span class="built_in">size</span>() - <span class="number">1</span> ; i++) l.push_back(u[i]);</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt;= eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断点在线段上</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OnSegment</span><span class="params">(Point p, Point a1, Point a2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(cross(a1 - p, a2 - p)) == <span class="number">0</span> &amp;&amp; dcmp(dot(a1 - p, a2 - p)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断线段相交</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Intersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c1 = cross(a2 - a1, b1 - a1), c2 = cross(a2 - a1, b2 - a1),</span><br><span class="line">            c3 = cross(b2 - b1, a1 - b1), c4 = cross(b2 - b1, a2 - b1);</span><br><span class="line">    <span class="keyword">return</span> dcmp(c1) * dcmp(c2) &lt; <span class="number">0</span> &amp;&amp; dcmp(c3) * dcmp(c4) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断点在凸包内</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPointInPolygon</span><span class="params">(Point p, <span class="built_in">vector</span>&lt;Point&gt; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wn = <span class="number">0</span>, cc = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cc; i++) &#123;</span><br><span class="line">        Point p1 = s[i];</span><br><span class="line">        Point p2 = s[(i + <span class="number">1</span>) % cc];</span><br><span class="line">        <span class="keyword">if</span> (p1 == p || p2 == p || OnSegment(p, p1, p2)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = dcmp(cross(p2 - p1, p - p1));</span><br><span class="line">        <span class="keyword">int</span> d1 = dcmp(p1.y - p.y);</span><br><span class="line">        <span class="keyword">int</span> d2 = dcmp(p2.y - p.y);</span><br><span class="line">        <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; d1 &lt;= <span class="number">0</span> &amp;&amp; d2 &gt; <span class="number">0</span>) wn++;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span> &amp;&amp; d2 &lt;= <span class="number">0</span> &amp;&amp; d1 &gt; <span class="number">0</span>) wn--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wn != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(Polygon s1, Polygon s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c1 = s1.<span class="built_in">size</span>(), c2 = s2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c1; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPointInPolygon(s1[i], s2)) &#123;<span class="comment">//点是否包含</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c2; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPointInPolygon(s2[i], s1)) &#123;<span class="comment">//同上</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c2; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Intersection(s1[i], s1[(i + <span class="number">1</span>) % c1], s2[j], s2[(j + <span class="number">1</span>) % c2])) &#123;<span class="comment">//线段相交判断</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        Polygon s1,s2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">double</span> x1, x2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;x1,&amp;x2);</span><br><span class="line">            s1.push_back(Point(x1, x2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">            <span class="keyword">double</span> x1, x2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;x1,&amp;x2);</span><br><span class="line">            s2.push_back(Point(x1,x2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s1.<span class="built_in">size</span>()) s1=Andrew(s1);</span><br><span class="line">        <span class="keyword">if</span>(s2.<span class="built_in">size</span>()) s2=Andrew(s2);</span><br><span class="line">        solve(s1,s2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p><hr><h2 id="G-逆序对"><a href="#G-逆序对" class="headerlink" title="G-逆序对"></a>G-逆序对</h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h3><p>逆序对的定义：在一个序列a中，如果i&lt;j且 a<sub>i</sub>&gt;a<sub>j</sub> 那么a<sub>i</sub>a<sub>j</sub>就是一个逆序对。</p><p>问相距最远的逆序对的距离（j-i）。如果没有逆序对，输出0。</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h3><p>第一行一个数n，表示序列的长度。(1≤n≤10<sup>5</sup>)</p><p>接下来一行，n个整数，保证在int范围内</p><h3 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h3><p>一行一个数，表示最远逆序对的距离</p><h3 id="输入样例-6"><a href="#输入样例-6" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4 3 5 1</span><br></pre></td></tr></table></figure><h3 id="输出样例-6"><a href="#输出样例-6" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><hr><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>拿到这道题目能想到的第一个方法肯定就是暴力遍历，但是上机的时候粗略一看O(n<sup>2</sup>)会超就被我***的果断放弃了。。其实好像用不到O(n<sup>2</sup>)。步入正题，肯定是对每一个元素，找到其最远逆序对然后和max比较即可，最后输出max。但是怎么找最快呢，如果直接一步一步从前往后找，每一步还需要比较找出最大的，肯定就差不多O(n<sup>2</sup>)了，肯定过不了，但我们能发现的是，因为是找最远的，所以直接从后往前找，找到了一个就直接break就好了，因为求的是最远距离而不是差值，这样一来时间复杂度就比较乐观了。放上代码</p><h3 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> distance;</span><br><span class="line">&#125;a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span>=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>;j&gt;=i+<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j].num&lt;a[i].num)&#123;</span><br><span class="line">a[i].distance=j-i;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i].distance&gt;<span class="built_in">max</span>) <span class="built_in">max</span>=a[i].distance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">max</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有谬误，请一定指出，本人争取马上修改，勿误导他人。</p>]]></content>
      
      
      <categories>
          
          <category> 综合题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建图方法总结</title>
      <link href="/2019/11/25/%E5%BB%BA%E5%9B%BE%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/11/25/%E5%BB%BA%E5%9B%BE%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文呢主要想为大家介绍一些常用的建图方法及数据结构，因为大家平时都直接套板子，可能会有一些模糊的地方，希望本文的介绍对大家图论的学习有所帮助。</p><h2 id="建图"><a href="#建图" class="headerlink" title="建图"></a>建图</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>邻接矩阵可以说是最简单最容易理解的建图方法了，简要说就是用一个二维数组存边，下标代表顶点编号。比如<code>map[i][j]</code>即代表顶点i和顶点j之间存在一条边，边的权值为<code>map[i][j]</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max ...</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="built_in">max</span>][<span class="built_in">max</span>];</span><br></pre></td></tr></table></figure><p>这样无论是遍历或者是存边的时候都非常的方便和容易理解。下面用松弛举个遍历的例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存图</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">    <span class="built_in">map</span>[u][v]=w;</span><br><span class="line">    <span class="built_in">map</span>[v][u]=<span class="number">0</span>;<span class="comment">//有向图(无向图为w)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">int</span> tmp;<span class="comment">//源点</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//遍历目标顶点</span></span><br><span class="line">    <span class="keyword">if</span>(dis[i]&gt;dis[tmp]+<span class="built_in">map</span>[tmp][i])<span class="comment">//松弛</span></span><br><span class="line">        dis[i]=dis[tmp]+<span class="built_in">map</span>[tmp][i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也有不可避免的缺点，就是空间占用太大。比如一共10000个点100000条边的时候，就无法用矩阵简单的存储了。只能用其他方法。</p><h3 id="邻接表-链式前向星"><a href="#邻接表-链式前向星" class="headerlink" title="邻接表(链式前向星)"></a>邻接表(链式前向星)</h3><p>链式前向星可以说是一种非常优质的存图结构了，不管是占用内存方面还是遍历方面或者是存边都非常的简单，但有个问题就是不是那么容易理解(反正本人凭自己可能十天八天都不一定弄得明白，还是网上看看博客才懂)。但弄懂了还是很简单的，先放代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max ...</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;e[<span class="built_in">max</span>*<span class="built_in">max</span>];<span class="comment">//max*max代表边总数，实际可能没这么多。</span></span><br><span class="line"><span class="keyword">int</span> head[<span class="built_in">max</span>],e_num=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[e_num].to=v;</span><br><span class="line">    e[e_num].weight=w;</span><br><span class="line">    e[e_num].next=head[u];</span><br><span class="line">    head[u]=e_num;</span><br><span class="line">    e_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    addedge(u,v,w);</span><br><span class="line">    addedge(v,u,<span class="number">0</span>);<span class="comment">//无向图为w</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还要初始化head数组全为-1</span></span><br></pre></td></tr></table></figure><p>上面给大家列出了链式前向星的基本结构以及加边的函数，方便下文阐述。首先拿到这个结构体可能第一次接触的时候有点懵(我第一次直接放弃)，首先<code>to</code>就是指该边指向的顶点，<code>weight</code>就是代表权值了也可以代表容量，然后最神奇的就是<code>next</code>，这个则代表和这条边来自同样起始顶点的下一条边的编号(因为这个结构体数组的下标就是代表边的编号)，然后是<code>head[max]</code>，这个数组存的是边的编号，什么编号呢，以该数组下标为起始顶点的边的编号(该数组的下标即为起始顶点的编号)，并且如果从该起始顶点出发的有多条边，那则代表最后添加进head数组的那条边的编号(好像有点绕)，最后<code>e_num</code>代表的是边的编号也就是<code>e[]</code>的下标。如果没怎么搞明白，不要紧，我们再看看这个加边函数应该就比较清楚了。</p><p>首先<code>e_num</code>从0开始，加入第一条边，存其指向的顶点和权值就不多说了，这个比较好理解；然后是<code>e[e_num].next=head[u]</code>，根据我们上文介绍的概念来理解就是，<code>e[e_num].next</code>表示这条边对应的起始顶点的下一条边的编号，等于<code>head[u]</code>，也就等于head数组的初始值-1，因为现在图里只有一条边，所以不存在其他边的情况，所以-1则代表无边。现在图里就一条边，我们假设为顶点1到顶点2有一条边。如下(别忘了同时也相当于加了一条从2-&gt;1的权值为0的边，<code>e_num</code>现在为2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//边 1-&gt;2</span></span><br><span class="line"><span class="comment">//对应的数组及代码如下</span></span><br><span class="line">e[<span class="number">0</span>].next=head[<span class="number">1</span>];<span class="comment">//head[1]=-1;</span></span><br><span class="line">head[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//e_num=0;</span></span><br><span class="line"><span class="comment">//相反的边 2-&gt;1 只是权值为0</span></span><br><span class="line">e[<span class="number">1</span>].next=head[<span class="number">2</span>];<span class="comment">//head[2]=-1</span></span><br><span class="line">head[<span class="number">2</span>]=<span class="number">1</span>;<span class="comment">//e_num=1;</span></span><br></pre></td></tr></table></figure><p>然后我们假设再加入一条从1到3的一条边，代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//边 1-&gt;3</span></span><br><span class="line">e[<span class="number">2</span>].next=head[<span class="number">1</span>];<span class="comment">//此时head[1]=0</span></span><br><span class="line">head[<span class="number">1</span>]=<span class="number">2</span>;<span class="comment">//e_num=2;</span></span><br><span class="line"><span class="comment">//相反的边</span></span><br><span class="line">e[<span class="number">3</span>].next=head[<span class="number">3</span>];<span class="comment">//head[3]=-1;</span></span><br><span class="line">head[<span class="number">3</span>]=<span class="number">3</span>;<span class="comment">//e_num=3;</span></span><br></pre></td></tr></table></figure><p>然后我们再来分析一下，我们先不看那两条相反的边，只看<code>1-&gt;2</code>和<code>1-&gt;3</code>这两边。现在<code>head[1]</code>里存的就是边的编号2，也就是最后加进来的起始顶点为1的边<code>1-&gt;3</code>。这个点应该清楚了吧。然后是<code>e[2].next</code>这个指的是<code>1-&gt;2</code>这条边的编号0，也就是和<code>1-&gt;3</code>这条边有相同起始顶点下一条边的编号，也就是<code>1-&gt;2</code>这条边的编号，所以是0。然后这些应该清楚了，那为什么要这样设置呢，下面代码则是遍历时的代码，还是举松弛的例子，看完大家应该就理解为什么要这样设置了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> s;<span class="comment">//源点</span></span><br><span class="line"><span class="keyword">for</span>(i=head[s];~i;i=e[i].next)&#123;</span><br><span class="line">    <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">    <span class="keyword">if</span>(dis[v]&gt;dis[s]+e[i].weight)</span><br><span class="line">        dis[v]=dis[s]+e[i].weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我来解释一下这段代码，首先这段代码实现的功能就是对以s源点为起点的所有边进行松弛操作。首先是循环的代码，<code>i</code>就是代表边的编号，初始值就为以s为起点的最后加入head数组的边的编号，<code>~i</code>的意思就是<code>i!=-1</code>了(因为head的初始值我们设为-1)，然后<code>i=e[i].next</code>就代表和当前边具有相同顶点的下一条边的编号了，这样就能遍历以s为起点的所有的边了。然后是<code>v</code>，就是代表当前边的终止顶点，也就是<code>s-&gt;v</code>并且编号为<code>i</code>，所以松弛操作就很好理解了，这个循环也就是几乎所有链式前向星实现遍历的循环了。</p><p>最后再补充一下为什么有向图要存反向边了，这是为了在解决最大流问题的时候的方便，残余网络等等都需要反向边的参与，这样设置反向边的好处也是很大的，因为就是和其本身这条边编号<code>+1</code>或者准确说是<code>^1</code>就能得到其反向边了。(比如上面例子的边<code>1-&gt;2</code>编号为0，<code>2-&gt;1</code>编号为1，也就是0^1，对<code>1-&gt;3</code>也是同样)所以就很方便。</p><p>总结一下就是链式前向星的优势很大，完全不用担心空间的浪费问题，并且其和用单纯的链表存图是异曲同工的，我在这里就不再赘述，缺点就是不那么容易理解，希望大家都能熟练掌握。</p><h3 id="vector实现邻接表"><a href="#vector实现邻接表" class="headerlink" title="vector实现邻接表"></a>vector实现邻接表</h3><p>用vector实现邻接表就比较简单易懂了，直接放代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max ...</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;struct node&gt; G[<span class="built_in">max</span>];<span class="comment">//下标为出发点</span></span><br><span class="line"><span class="comment">//vector&lt;pair&lt;int,int&gt; &gt; G[max];</span></span><br></pre></td></tr></table></figure><p>数据结构还是非常的简单易懂的，就是邻接表最朴素的方式，当然熟练后直接使用pair即可，下面放上存边的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">e</span>;</span><span class="comment">//临时</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">e.v=v,e.w=w;</span><br><span class="line">G[u].push_back(e);<span class="comment">//和二维数组相似</span></span><br><span class="line"><span class="comment">//G[u].push_back(&#123;v,w&#125;);</span></span><br></pre></td></tr></table></figure><p>遍历就和二维数组几乎类似了。上代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">e</span>;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=G[i].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">        e=G[i][j];</span><br><span class="line">        <span class="comment">//e.v,e.w</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点也是有的，比如存在相同边的时候，判断是否重复就比较麻烦了。</p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解篇-C5</title>
      <link href="/2019/11/23/%E9%A2%98%E8%A7%A3%E7%AF%87-C5/"/>
      <url>/2019/11/23/%E9%A2%98%E8%A7%A3%E7%AF%87-C5/</url>
      
        <content type="html"><![CDATA[<h2 id="A-毛毛虫"><a href="#A-毛毛虫" class="headerlink" title="A-毛毛虫"></a>A-毛毛虫</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>草丛中有两只毛毛虫。他们想穿过草丛里的杀虫剂到达对方的身边。而草丛里的杀虫剂形成了nn个两两无公共点的圆。注意这些杀虫剂只存在于圆的边界上，且杀虫剂宽度非常非常细。毛毛虫一开始不在任何圆的边界上。</p><p>毛毛虫穿过杀虫剂就要受到一次伤害。请问一只毛毛虫到达另一只的身边，最少需要受到几次伤害？</p><p> 时间限制：1000ms  内存限制：65536KB </p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一个数为数据组数T，每组数据输入5行，T≤10。</p><p>第一行包含一个整数 n，n≤50。</p><p>第二行包含 n 个整数 x<sub>i</sub>，表示 n 个圆的圆心的横坐标。</p><p>第三行包含 n 个整数 y<sub>i</sub> ，表示 n 个圆的圆心的纵坐标。</p><p>第四行包含 n 个整数 r<sub>i</sub> ，表示 n 个圆的半径。</p><p>最后一行包含四个整数 x1,y1,x2,y2，表示两只毛毛虫位置的横纵坐标。</p><p>所有坐标、半径的绝对值不超过10001000。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>对于每组数据，输出一行，毛毛虫受到伤害的次数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">0 -6 6</span><br><span class="line">0 1 6</span><br><span class="line">2 2 2</span><br><span class="line">-5 1 5 1</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>刚开始拿到这道题很容易被文字数量和一大堆的输入数据唬住(本人就是)，其实仔细分析会发现其实并不难(Moggin：这是学长出给初中生的题)。</p><p>言归正传，这道题就是一个点和圆的相对位置关系的题，很简单，两条毛毛虫都在某一圆内或者都不在某一圆内对毛毛虫的伤害为0，所以只用考虑包含一条毛毛虫同时不包含另一毛毛虫的圆的数量即可。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> x[<span class="number">55</span>]=&#123;&#125;,y[<span class="number">55</span>]=&#123;&#125;,r[<span class="number">55</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(((x1-x[i])*(x1-x[i])+(y1-y[i])*(y1-y[i]))&lt;=r[i]*r[i])&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T,n,i;</span><br><span class="line"><span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;r[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(judge(x1,y1,i)&amp;&amp;!judge(x2,y2,i))&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!judge(x1,y1,i)&amp;&amp;judge(x2,y2,i))&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B-图1"><a href="#B-图1" class="headerlink" title="B-图1"></a>B-图1</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>一个无向图，<code>N</code>个点编号<code>1~N</code>。<code>M</code>条边，每条边有一个权值<code>c</code>。</p><p>对于一个点集<code>A</code>，这个点集的权值<code>S</code>定义为S<sub>A</sub>=max(c<sub>ij</sub>)，其中i∈A∧j∈A∧i≠j。</p><p>现在将N个点分割为两个点集A、B，请问max(S<sub>A</sub>,S<sub>B</sub>)的最小值</p><p> 时间限制：1000ms  内存限制：65536KB </p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>第一行两个正整数N、M。(2≤N≤20000,1≤M≤100000)</p><p>接下来M行，每行三个整数a,b,c，表示ab之间有一条权值为c的边（1≤a,b≤N,1≤c≤10<sup>9</sup>）</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>一行一个数</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br><span class="line">1 4 2534</span><br><span class="line">2 3 3512</span><br><span class="line">1 2 28351</span><br><span class="line">1 3 6618</span><br><span class="line">2 4 1805</span><br><span class="line">3 4 12884</span><br></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3512</span><br></pre></td></tr></table></figure><hr><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>首先分析题目，白话重新描述一下就是，给图顶点染色，只染两种颜色，然后将同色中权值最大的边最小化，求最小值。这样看来显然就是二分图了(对本人可能不那么显然)，对需要求出来的边进行枚举，将比其权值小的边删去后，剩余的边能否构成二分图，能构成，说明该边满足条件，然后再枚举比该边小的，再判断，直到最后不能构成二分图，则找到了答案。那通过什么方法枚举呢，当然可以挨着挨着枚举，时间复杂度也上去了，由于需要枚举的边是可以从大到小枚举过来的，所以我们可以直接采用二分来求就好了，这样时间复杂度就很低了。然后的问题就是判断能否构成二分图的问题了。我们直接采用比较简单的DFS染色即可。这样就能求出答案了。</p><p>注意：一些需要注意的细节在这里说明一下。首先是二分最开始的值的设置，由于给的权值范围都是10<sup>9</sup>了，所以我们的初始值应该达到long long才行(测试了一下，需要10<sup>11</sup>才能AC)。其次呢就是存图的问题，10000的顶点数，邻接矩阵存肯定爆内存了。所以采用链式前向星来存比较好。还有就是不是一开始就存图，是把边先枚举，比该边大的边才放进图里(连边)，所以最开始存顶点和边的信息需要一个结构体。最后就是染色的问题了，大家可以看了代码再看我马上要说的，就是vis[]数组的作用，因为判断了一个顶点后，和它相连的所有点都已经被染色了，如果再次访问这些点的话，就会出现错误，所以需要判断一下，让已经被染色的不再需要判断，因为无论这个点其所连的边有没有构成二分图，与其相连的所有点就相当于也已经全部判断了一遍了，所以不需要再判断一遍，也能节省一些时间。</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 300005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">&#125; ver[<span class="built_in">max</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125; e[<span class="built_in">max</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="built_in">max</span>],e_num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T;</span><br><span class="line">ll mid;</span><br><span class="line"><span class="keyword">int</span> color[<span class="built_in">max</span>],vis[<span class="built_in">max</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">e[e_num].v=v;</span><br><span class="line">e[e_num].c=c;</span><br><span class="line">e[e_num].next=head[u];</span><br><span class="line">head[u]=e_num;</span><br><span class="line">e_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">add(u,v,c);</span><br><span class="line">add(v,u,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line">    color[u]=c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!color[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfs(j, <span class="number">3</span>-c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(color[j]==c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(color,<span class="number">0</span>,<span class="keyword">sizeof</span>(color));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ver[i].c&gt;mid) insert(ver[i].a,ver[i].b,ver[i].c);<span class="comment">//如果大则连边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfs(i,<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;ver[i].a,&amp;ver[i].b,&amp;ver[i].c);</span><br><span class="line">&#125;</span><br><span class="line">ll l=<span class="number">0</span>,r=<span class="number">1e14</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid=((l+r)&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(check()) ans=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要看类似题目可以看看这道： <a href="https://www.nowcoder.com/questionTerminal/e5e5e74a65c34d588421944029306e2e" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/e5e5e74a65c34d588421944029306e2e</a> (CodeForces 85E)</p><hr><h2 id="C-图2"><a href="#C-图2" class="headerlink" title="C-图2"></a>C-图2</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>一个有向图，<code>N</code>个点编号<code>1~N</code>。<code>M</code>条边，每条边有一个权值<code>c</code>。</p><p>点<code>i</code>、<code>j</code>之间的最短路长度定义为 S<sub>ij</sub>。如果i、j不连通，则S<sub>ij</sub>=−1</p><p>输出所有使得S<sub>ij</sub>最大的i和j</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>第一行一个整数t表示数据组数(t≤50)</p><p>对于每组数据：</p><p>第一行两个正整数N、M。(2≤N≤200,1≤M≤1000)</p><p>接下来M行，每行三个整数a,b,c，表示ab之间有一条权值为c的边（1≤a,b≤N,1≤c≤10<sup>3</sup>）</p><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>输出所有使得S<sub>ij</sub>最大的i、j，每一对i、j输出一行，用空格隔开，按i的大小由小到大输出，i相同时按j的大小由小到大输出，</p><h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2 1</span><br><span class="line">1 2 3</span><br><span class="line">3 3</span><br><span class="line">1 2 2</span><br><span class="line">2 3 3</span><br><span class="line">3 1 5</span><br></pre></td></tr></table></figure><h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><hr><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>首先看题目可以确定是最短路径题目，接下来就是选算法的问题了(Dijkstra、spfa、Floyd)，显然这里要求所有顶点之间的最短路径，如果选择spfa和Dijkstra则需要求n次再来遍历判断，显然太麻烦了，所以我们显然选择Floyd即可(后文我也会附上Dijkstra的代码)。</p><p>本题需要注意的一些地方：首先是排序，读清楚题，怎么排序，再写cmp函数。其次就是每组数据的最大S<sub>ij</sub>不唯一，本人是采用循环找到前n个相同的最大值，再来输出，当然会有更好的方法。然后就是因为图权值最初设置为inf，因为又是要计算最大边，所以再Floyd算完之后，需要把仍然是inf的边置为-1，不影响后面的排序。最后呢就是注意Floyd算完之后需要存到另一个结构体数组里再进行排序会比较方便。</p><h3 id="AC代码-Floyd"><a href="#AC代码-Floyd" class="headerlink" title="AC代码(Floyd)"></a>AC代码(Floyd)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1000000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 205</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i,j,c;</span><br><span class="line">&#125;ans[<span class="number">40005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">c=*(struct node*)a;</span><br><span class="line">d=*(struct node*)b;</span><br><span class="line"><span class="keyword">if</span>(c.c!=d.c) <span class="keyword">return</span> d.c-c.c;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(c.i!=d.i) <span class="keyword">return</span> c.i-d.i;</span><br><span class="line"><span class="keyword">return</span> c.j-d.j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> e[<span class="built_in">max</span>][<span class="built_in">max</span>];</span><br><span class="line"><span class="keyword">int</span> t,n,m,M,cnt;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">M=<span class="number">-2147483647</span>;</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) e[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> e[i][j]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">e[a][b]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line"><span class="keyword">if</span>(e[i][j]&gt;e[i][k]+e[k][j])</span><br><span class="line">e[i][j]=e[i][k]+e[k][j];<span class="comment">// Floyd</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i][j]==inf) e[i][j]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">ans[cnt].c=e[i][j];</span><br><span class="line">ans[cnt].i=i;</span><br><span class="line">ans[cnt].j=j;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">qsort(ans,cnt,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line"><span class="keyword">int</span> tmp=ans[<span class="number">0</span>].c,eid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i].c==tmp) eid++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=eid;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans[i].i,ans[i].j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC代码-Dijkstra"><a href="#AC代码-Dijkstra" class="headerlink" title="AC代码(Dijkstra)"></a>AC代码(Dijkstra)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 2000</span></span><br><span class="line"><span class="keyword">int</span> INFINITY=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> MAX=<span class="number">-2147483647</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> i,j,c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">ans</span>[40005];</span></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,n,m;</span><br><span class="line"><span class="keyword">int</span> sweight[<span class="built_in">max</span>]=&#123;&#125;,<span class="built_in">map</span>[<span class="built_in">max</span>][<span class="built_in">max</span>],spath[<span class="built_in">max</span>],e[<span class="built_in">max</span>][<span class="built_in">max</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) <span class="built_in">map</span>[i][j]=e[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">map</span>[i][j]=e[i][j]=INFINITY;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">c=*(struct node*)a;</span><br><span class="line">d=*(struct node*)b;</span><br><span class="line"><span class="keyword">if</span>(c.c!=d.c) <span class="keyword">return</span> d.c-c.c;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(c.i!=d.i) <span class="keyword">return</span> c.i-d.i;</span><br><span class="line"><span class="keyword">return</span> c.j-d.j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> v0)</span></span>&#123;</span><br><span class="line">MAX=<span class="number">-2147483647</span>;</span><br><span class="line"><span class="keyword">int</span> i,j,v,minweight;</span><br><span class="line"><span class="keyword">char</span> wfound[<span class="built_in">max</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sweight[i]=<span class="built_in">map</span>[v0][i];</span><br><span class="line">spath[i]=v0;</span><br><span class="line">&#125;</span><br><span class="line">sweight[v0]=<span class="number">0</span>;</span><br><span class="line">wfound[v0]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">minweight=INFINITY;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span> (!wfound[j]&amp;&amp;(sweight[j]&lt;minweight))&#123;</span><br><span class="line">v=j;</span><br><span class="line">minweight=sweight[j];</span><br><span class="line">&#125;</span><br><span class="line">wfound[v]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!wfound[j]&amp;&amp;(minweight+<span class="built_in">map</span>[v][j]&lt;sweight[j]))&#123;</span><br><span class="line">sweight[j]=minweight+<span class="built_in">map</span>[v][j];</span><br><span class="line">spath[j]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">e[v0][i]=sweight[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> tmp,eid;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="built_in">map</span>[a][b]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">Dijkstra(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i][j]==INFINITY) e[i][j]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">ans[cnt].c=e[i][j];</span><br><span class="line">ans[cnt].i=i;</span><br><span class="line">ans[cnt].j=j;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">qsort(ans,cnt,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line">tmp=ans[<span class="number">0</span>].c,eid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i].c==tmp) eid++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=eid; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans[i].i,ans[i].j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra即多了几步，总体思想是不变的。</p><hr><h2 id="D-图3"><a href="#D-图3" class="headerlink" title="D-图3"></a>D-图3</h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h3><p>一个无向图，<code>N</code>个点编号<code>1~N</code>。<code>M</code>条边，每条边有一个权值<code>c</code>。</p><p>问对于每条边，最少删除多少条边后，可以使得存在一个最小生成树包含这条边。</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>第一行两个正整数N、M。(2≤N,M≤100)</p><p>接下来M行，每行三个整数a、b、c，表示ab之间存在一条权值为c的边。（1≤a,b≤N，1≤c≤500）</p><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>输出一行M个数，数之间用空格隔开</p><h3 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2 1</span><br><span class="line">3 1 2</span><br><span class="line">3 2 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1</span><br></pre></td></tr></table></figure><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>首先分析题，要使最小生成树包含这条边。我们现在一直求最小生成树的方法也就两种，Kruskal和Prim算法。我们这道题显然就从Kruskal法来考虑比较方便(可能不是那么显然，先这样想)。Kruskal算法是通过先对边权值通过排序，从权值最小的边开始遍历每一条边，如果加入该边后，生成树仍然满足树的条件的话，则该边加入，如果构成了回路即不满足树的条件，则不增加该边，继续遍历。那对于本题呢，假设某边要存在一个最小生成树包含该边，按照Kruskal算法的过程，在枚举到该边之前，该边没有连通，即先枚举比该边权值小的所有边，然后再枚举该边，那要怎样保证该边一定在生成树里呢，即要保证该边加入后不形成回路，怎么保证呢，因为生成树的不唯一性，那就是要让该边的两个顶点(u,v)不连通，即u、v与其余所有比该边权值小的边的顶点组成一个图(容量为1，保证双向，因为仅求边的数量)，让u和v为源点和汇点，让u和v之间不连通即可，没有连通即割开，即求割，但是要保证删除的边最少，所以就是求最小割了，所以就是算最大流了，所以直接套板子就okk了。</p><p>需要注意的地方：首先，仍然一开始不建图，仅用一结构体存起来，等排完序后遍历时再存图，存图的时候也不要忘了把边的编号存起来，输出的时候需要用。然后是对每条边算了一遍最大流后，要把原图重新初始化一遍，以便存下一个图。之后是，有可能对某一条边来说，存在很多权值相等的边，权值相等的边是不能加入到图里的，但是排序对于权值相同的边并不敏感，所以需要自己判断一下，把权值相同的边先略去后，再建图。最后用数组存结果输出即可。</p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 10005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b,c,num;</span><br><span class="line">&#125;p[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[<span class="built_in">max</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="built_in">max</span>],e_num=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a,<span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">c=*(struct node*)a;</span><br><span class="line">d=*(struct node*)b;</span><br><span class="line"><span class="keyword">return</span> c.c-d.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">e_num++;</span><br><span class="line">e[e_num].v=v;</span><br><span class="line">e[e_num].c=c;</span><br><span class="line">e[e_num].next=head[u];</span><br><span class="line">head[u]=e_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">add(u,v,c);</span><br><span class="line">add(v,u,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> depth[<span class="built_in">max</span>];<span class="comment">// 层次网络 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;<span class="comment">//定义一个bfs寻找分层图时的队列</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">-1</span>,<span class="keyword">sizeof</span>(depth));</span><br><span class="line">    depth[S]=<span class="number">0</span>;<span class="comment">//源点深度为0</span></span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[v]==<span class="number">-1</span>)&#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">                depth[v]=depth[u]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (depth[T]!=<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;        <span class="comment">//flow表示当前搜索分支的流量上限</span></span><br><span class="line">    <span class="keyword">if</span>(u==T)&#123;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[u]+<span class="number">1</span>==depth[v])&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=dfs(v,<span class="built_in">min</span>(flow,e[i].c));    <span class="comment">// 递归计算顶点 v，用 c(u, v) 来更新当前流量上限</span></span><br><span class="line">            flow-=tmp;</span><br><span class="line">            e[i].c-=tmp;</span><br><span class="line">            res+=tmp;</span><br><span class="line">            e[i^<span class="number">1</span>].c+=tmp;      <span class="comment">// 修改反向弧的容量</span></span><br><span class="line">            <span class="keyword">if</span>(flow==<span class="number">0</span>)&#123;        <span class="comment">// 流量达到上限，不必继续搜索了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">0</span>)&#123;     <span class="comment">// 当前没有经过顶点 u 的可行流，不再搜索顶点 u</span></span><br><span class="line">        depth[u]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;        <span class="comment">// 函数返回值就是最大流的结果</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">        res+=dfs(S,INF);    <span class="comment">// 初始流量上限为 INF</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">505</span>]=&#123;&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);<span class="comment">//m为边</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;p[i].a,&amp;p[i].b,&amp;p[i].c);</span><br><span class="line">        p[i].num=i;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(p,m,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</span><br><span class="line">    e_num=<span class="number">-1</span>;</span><br><span class="line">    S=p[i].a,T=p[i].b;</span><br><span class="line">    <span class="keyword">for</span>(j=i;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[j].c==p[i].c) <span class="keyword">continue</span>;</span><br><span class="line">    insert(p[j].a,p[j].b,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans[p[i].num]=dinic();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-棋盘"><a href="#E-棋盘" class="headerlink" title="E-棋盘"></a>E-棋盘</h2><h3 id="题面-3"><a href="#题面-3" class="headerlink" title="题面"></a>题面</h3><p>一个<code>N</code>行，<code>M</code>列的棋盘。棋盘每个格子都是边长为1的正方形。</p><p>现在要在棋盘上放一些1×2大小的骨牌。骨牌的边线与格子重合（必须占2个格子），任意两个骨牌不能重叠。</p><p>但是棋盘上的一些格子已经被占用，请问最多可以放多少个骨牌。</p><p>时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>第一行三个正整数N、M、q。(2≤N,M≤100,0≤q≤1000)</p><p>接下来q行，每行两个整数a,b,表示第a行第b列的格子被占用（1≤a,b≤N）</p><h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>输出一行</p><h3 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 8 0</span><br></pre></td></tr></table></figure><h3 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">32</span><br></pre></td></tr></table></figure><hr><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>首先我们看题，格子里放骨牌，<code>1*2</code>的骨牌，有些格子被占用，问最多的放法。可能刚看到这道题没什么思路，但我们可以从这个<code>1*2</code>看出一些东西，可以想到就是两个相邻的格子可以放一个骨牌，我们就可以看作一个格子和其所有相邻的格子之间存在一条边，容量为inf，并且该格子连接源点，容量为1，与其相邻的格子连接汇点，容量也为1，这样从源点到汇点的最大流即可以放的骨牌的方法数了。我们举一个例子：一个十字格子(5个格子)，把中间的格子连接源点，则其四周的格子都要连接汇点，那么此时的最大流显然就是1了，也就是方法数为1，同理就可以扩张为整个棋盘了。将所有i+j为奇数(i为行j为列)的点连源点，偶数连汇点相邻的连边，容量就不再赘述，然后求最大流即可。</p><p>需要注意的地方：首先就是存边，单纯的邻接矩阵肯定不行。然后就是那些被占用的点，用一个二维数组存行和列然后作为标记数组，标记的不存入图内即可。最后就是其实该题和练习赛A题几乎一样，并且更简单(想到方法的前提下)</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 1000000</span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1005</span>][<span class="number">1005</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[<span class="built_in">max</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="built_in">max</span>],e_num=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">e_num++;</span><br><span class="line">e[e_num].v=v;</span><br><span class="line">e[e_num].c=c;</span><br><span class="line">e[e_num].next=head[u];</span><br><span class="line">head[u]=e_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">add(u,v,c);</span><br><span class="line">add(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> depth[<span class="built_in">max</span>];<span class="comment">// 层次网络 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;<span class="comment">//定义一个bfs寻找分层图时的队列</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">-1</span>,<span class="keyword">sizeof</span>(depth));</span><br><span class="line">    depth[S]=<span class="number">0</span>;<span class="comment">//源点深度为0</span></span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[v]==<span class="number">-1</span>)&#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">                depth[v]=depth[u]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (depth[T]!=<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;        <span class="comment">//flow表示当前搜索分支的流量上限</span></span><br><span class="line">    <span class="keyword">if</span>(u==T)&#123;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[u]+<span class="number">1</span>==depth[v])&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=dfs(v,<span class="built_in">min</span>(flow,e[i].c));    <span class="comment">// 递归计算顶点 v，用 c(u, v) 来更新当前流量上限</span></span><br><span class="line">            flow-=tmp;</span><br><span class="line">            e[i].c-=tmp;</span><br><span class="line">            res+=tmp;</span><br><span class="line">            e[i^<span class="number">1</span>].c+=tmp;      <span class="comment">// 修改反向弧的容量</span></span><br><span class="line">            <span class="keyword">if</span>(flow==<span class="number">0</span>)&#123;        <span class="comment">// 流量达到上限，不必继续搜索了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">0</span>)&#123;     <span class="comment">// 当前没有经过顶点 u 的可行流，不再搜索顶点 u</span></span><br><span class="line">        depth[u]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;        <span class="comment">// 函数返回值就是最大流的结果</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">        res+=dfs(S,INF);    <span class="comment">// 初始流量上限为 INF</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,sum=<span class="number">0</span>,eid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i,q;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">    S=<span class="number">0</span>,T=n*m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">num[a][b]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">        eid++;</span><br><span class="line">        <span class="keyword">if</span>(!num[i][j])&#123;</span><br><span class="line">        <span class="keyword">if</span>((i+j)%<span class="number">2</span>)&#123;</span><br><span class="line">insert(S,eid,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(j&lt;m) insert(eid,eid+<span class="number">1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">1</span>) insert(eid,eid<span class="number">-1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(i&lt;n) insert(eid,eid+m,INF);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>) insert(eid,eid-m,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">insert(eid,T,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="F-垃圾粉碎机"><a href="#F-垃圾粉碎机" class="headerlink" title="F-垃圾粉碎机"></a>F-垃圾粉碎机</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>垃圾分类快来了，垃圾场主某楠希望赶在垃圾分类之前将厂里的垃圾全部粉碎填埋。为此场长专门去租了n台垃圾粉碎机，每种垃圾粉碎机都有一个最长使用时间ti，在这段时间里总共可以处理mi吨垃圾,可以在任意时间使用任意时长，但是用完就不能再用。由于场里太穷，同一时间只能运行一台垃圾粉碎机，现在想问在垃圾分类来临之前，最多能粉碎多少垃圾。为了简化计算，所有时间单位以小时计算。</p><p> 时间限制：1000ms  内存限制：65536KB </p><h3 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h3><p>前两个数为垃圾粉碎机的个数N和距离垃圾分类来临时间T小时</p><p>接下来N行每行2个整数，对应的ti和mi</p><p>所有数字均不大于1e5</p><h3 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h3><p>输出一行，能处理的垃圾最大重量，保留2位小数，单位为吨</p><h3 id="输入样例-5"><a href="#输入样例-5" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-5"><a href="#输出样例-5" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.00</span><br></pre></td></tr></table></figure><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>读题就能看出这是一道非常明显的分数背包题，就直接贪心算法就可解决了，根据m<sub>i</sub>/t<sub>i</sub>的商进行排序即可，然后遍历输出搞定。</p><p>如果对其他背包问题还有问题的朋友可以查看本人的另一篇博文: <a href="https://dbettkk.github.io/2019/11/11/动态规划-DP-——背包问题/#more" target="_blank" rel="noopener">https://dbettkk.github.io/2019/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#more</a> </p><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 100005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> t;</span><br><span class="line"><span class="keyword">double</span> m;</span><br><span class="line"><span class="keyword">double</span> a;</span><br><span class="line">&#125;dp[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">c=*(struct node*)a;</span><br><span class="line">d=*(struct node*)b;</span><br><span class="line"><span class="keyword">return</span> c.a&lt;d.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,T,i;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;dp[i].t,&amp;dp[i].m);</span><br><span class="line">dp[i].a=dp[i].m/dp[i].t;</span><br><span class="line">&#125;</span><br><span class="line">qsort(dp,n,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i].t&lt;=T)&#123;</span><br><span class="line">ans+=dp[i].m;</span><br><span class="line">T-=dp[i].t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans+=T*dp[i].a;</span><br><span class="line">T=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="G-小面包"><a href="#G-小面包" class="headerlink" title="G-小面包"></a>G-小面包</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>又要发小面包了。这次我们有许多<code>3*6</code>的小面包和<code>6*6</code>的方糕，以及一个<code>6*N</code>的长方形盒子，强迫症的某楠一定要把它们整齐的装到盒子里，并且要尽量装满。请问有多少总不同装法？</p><p> 时间限制：1000ms  内存限制：65536KB </p><h3 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h3><p>多组数据输入。 每组一个3的倍数N（0&lt;=N&lt;=750）</p><h3 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h3><p>对于每组数据，输出一行，为最终计算对1000007取模得到的结果。</p><h3 id="输入样例-6"><a href="#输入样例-6" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="输出样例-6"><a href="#输出样例-6" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>输入为3时，只能放入一块小面包。</p><p>输入为6时，有三种情况：</p><p>（1）竖着放两块小面包</p><p>（2）横着放两块小面包</p><p>（3）放一块方糕</p><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>首先因为输入的n是3的倍数，所以我们可以将问题简化为<code>2*n</code>的盒子装<code>1*2</code>和<code>2*2</code>的方糕的问题。然后我们开始寻找递推关系。假设<code>n</code>对应有<code>f(n)</code>种装法，那么如果我们首先装<code>1*2</code>的空间，那就相当于只能装<code>1*2</code>的方糕，那么对应就是解决<code>f(n-1)</code>的问题，那如果我们先装<code>2*2</code>的空间，那么可以有两种装法，两个<code>1*2</code>的方糕横着摆放和一个<code>2*2</code>的方糕(有朋友可能会问为什么两个<code>1*2</code>的方糕竖着摆放的情况不算，因为这种情况实际上是属于我们前面提到的先装<code>1*2</code>的空间的情况，如果这里再算一遍就重复了)，所以就相当于解决<code>2*f(n-2)</code>的问题即可。然后如果是装<code>3*2</code>的空间，那么不就是等效于<code>1*(2*2)</code>的情况和<code>2*(1*2)</code>的情况吗，所以我们就找到递推关系了，如下：</p><ul><li>f(n)=f(n-1)+2*f(n-2)</li></ul><p>当然大家也可先推一推前面几种情况然后找规律也是可以解决的，只是这个找规律比较靠运气。</p><h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">755</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">1</span>,a[<span class="number">0</span>]=<span class="number">1</span>,a[<span class="number">2</span>]=<span class="number">3</span>,a[<span class="number">3</span>]=<span class="number">5</span>,a[<span class="number">4</span>]=<span class="number">11</span>;<span class="comment">// 这是推出的前几种情况，实际不需要这么多</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n/<span class="number">3</span>; i++) &#123;</span><br><span class="line">a[i]=(a[i<span class="number">-1</span>]+<span class="number">2</span>*a[i<span class="number">-2</span>])%<span class="number">1000007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(a[n/<span class="number">3</span>])%<span class="number">1000007</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="H-点线面"><a href="#H-点线面" class="headerlink" title="H-点线面"></a>H-点线面</h2><h3 id="题面-4"><a href="#题面-4" class="headerlink" title="题面"></a>题面</h3><p>二维平面上有n个点。现在用一根（毛）线将这些点围起来，问线的最小长度和围起来的面积。</p><p> 时间限制：1000ms  内存限制：65536KB</p><h3 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h3><p>第一行一个正整数N。(2≤N≤100000)</p><p>接下来N行，每行两个整数a，b，表示一个点的坐标。（−10<sup>6</sup>≤a,b≤10<sup>6</sup>）</p><h3 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h3><p>输出一行一个数，保留两位小数。</p><h3 id="输入样例-7"><a href="#输入样例-7" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0 0</span><br><span class="line">0 4</span><br><span class="line">3 0</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h3 id="输出样例-7"><a href="#输出样例-7" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12.00 6.00</span><br></pre></td></tr></table></figure><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>刚上了计算几何，应该都能看出这就一道凸包板子题。当然如果有和我一样没有很认真听的可以看下我下方的分析。</p><p>凸包怎么实现呢，首先确定平面中最下方的点，这个点肯定是在凸包内的，然后再以这个点为基点对其余所有点进行极角排序，即将其余点与该点进行连线后，对连线与x轴的夹角进行排序。排了序后，将夹角最小的点入栈，然后遍历所有其他点，若此点在栈顶的点的左边(实际是栈顶两个点连线的左边)，则压栈，若在右边(同理)，则将栈顶出栈然后把此点压栈，遍历结束后，栈中的点即为凸包上的点。还有就是如何判断在点的左边还是右边的问题了，用叉积即可。比如，<code>a(x1,y1)</code>和<code>b(x2,y2)</code>和<code>c(x3,y3)</code>，判断c相对于ab的位置，那就是相当于判断<code>x1*y2+x2*y3+x3*y1</code>和<code>x1*y3+x2*y1+x3*y2</code> 的大小即可。求出栈后，周长直接遍历算即可，面积则遍历求叉积相加即可(别忘除以2)。</p><p>参考： <a href="https://www.cnblogs.com/Gaxc/p/9610900.html" target="_blank" rel="noopener">https://www.cnblogs.com/Gaxc/p/9610900.html</a> </p><h3 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125; a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n,p,st[<span class="number">100005</span>],top;</span><br><span class="line"><span class="keyword">double</span> ans,miny=<span class="number">2e9</span>,minx=<span class="number">2e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node b,node c)</span> </span>&#123; <span class="comment">//极角排序</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fabs</span>((b.y-miny)*(c.x-minx)-(c.y-miny)*(b.x-minx))&lt;=<span class="number">1e-8</span>) <span class="keyword">return</span> <span class="built_in">fabs</span>(minx-b.x)&lt;<span class="built_in">fabs</span>(minx-c.x);</span><br><span class="line"><span class="keyword">return</span> (b.y-miny)*(c.x-minx)&lt;(c.y-miny)*(b.x-minx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span> </span>&#123; <span class="comment">//叉积判断</span></span><br><span class="line"><span class="keyword">return</span> ((a[b].x*a[c].y)+(a[c].x*a[d].y)+(a[d].x*a[b].y)-(a[b].x*a[d].y)-(a[c].x*a[b].y)-(a[d].x*a[c].y))&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span> </span>&#123; <span class="comment">//计算两点间的距离</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rint i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line"><span class="keyword">if</span> (a[i].y&lt;miny) &#123; <span class="comment">//寻找最下方的点</span></span><br><span class="line">miny=a[i].y;</span><br><span class="line">minx=a[i].x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp); <span class="comment">//极角排序</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">st[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">top=<span class="number">2</span>; <span class="comment">//将两个点加入栈中</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">3</span>; i&lt;=n; ++i) &#123; <span class="comment">//扫描</span></span><br><span class="line"><span class="keyword">while</span> (!check(st[top<span class="number">-1</span>],st[top],i)) top--;</span><br><span class="line">st[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;=top; ++i) <span class="comment">//计算答案</span></span><br><span class="line">ans+=dist(a[st[i<span class="number">-1</span>]].x,a[st[i<span class="number">-1</span>]].y,a[st[i]].x,a[st[i]].y);</span><br><span class="line">ans+=dist(a[st[top]].x,a[st[top]].y,a[<span class="number">1</span>].x,a[st[<span class="number">1</span>]].y);</span><br><span class="line"><span class="keyword">double</span> area=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;top;i++)&#123;</span><br><span class="line">area+=(a[st[i]].x*a[st[i+<span class="number">1</span>]].y-a[st[i+<span class="number">1</span>]].x*a[st[i]].y);</span><br><span class="line">&#125; </span><br><span class="line">area+=(a[st[top]].x*a[st[<span class="number">1</span>]].y-a[st[<span class="number">1</span>]].x*a[st[top]].y);</span><br><span class="line">area/=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf %.2lf"</span>,ans,area);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p><a href="https://accoding.cn/index" target="_blank" rel="noopener">北航OJ</a></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 综合题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约瑟夫环</title>
      <link href="/2019/11/17/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
      <url>/2019/11/17/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>主要是之前一直不知道约瑟夫环的dp解法，这里和大家分享一下。本文用三种方法给大家呈现本题。</p><h2 id="最后一条毛毛虫"><a href="#最后一条毛毛虫" class="headerlink" title="最后一条毛毛虫"></a>最后一条毛毛虫</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小D的花园里养了 n 条毛毛虫，每条毛毛虫都有自己独有的编号（从 1 到 n ）。</p><p>一开始，所有的毛毛虫都开开心心地生活在花园里，享受着食物和阳光。</p><p>直到某一天，额……它们知道自己肯定会被吃掉，所以就开始玩一个游戏，来决定被吃的顺序。游戏的方法是这样的：</p><p>所有毛毛虫按照编号顺序从 11 到 n 顺时针围成一个环，然后从 1 号毛毛虫开始顺时针依次报数，报到数字 m 的毛毛虫就出环被吃，下一条毛毛虫继续从 1 开始顺时针报数……直到所有毛毛虫都出环被吃。</p><p>那么，最后一条被吃的毛毛虫的编号是多少呢？</p><p> 时间限制：1000ms，内存限制：65536KB</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>两个正整数 n,m ，意义如题所示。</p><p>输入数据保证： 1≤n,m≤3000。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>一个正整数，代表最后一条被吃的毛毛虫的编号。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>毛毛虫被吃的顺序依次为：3、1、5、2、4 。</p><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="accoding.cn">北航OJ</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>(1) 首先很显然最简单的约瑟夫环问题，肯定用最容易理解的方法就是循环链表了。通过指针遍历、删除来完成每次的报数和出局环节，最后只剩一条毛毛虫时，就结束就可以了。虽然非常容易理解，但是代码比较长，时间花费也比较高(和后面介绍的方法相比)，但本题的限制还是可以随便AC的。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span>,*<span class="title">r</span>,*<span class="title">head</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">head=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        r=(struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">        r-&gt;num=i;</span><br><span class="line">        <span class="keyword">if</span> (head==<span class="literal">NULL</span>)</span><br><span class="line">            head=p=r;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p-&gt;next=r;          </span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=head;</span><br><span class="line">    r=p;</span><br><span class="line">    p=head;</span><br><span class="line">   <span class="keyword">while</span>(p-&gt;next!=p)&#123;</span><br><span class="line">         <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;i++)&#123;</span><br><span class="line">               r=p;</span><br><span class="line">               p=p-&gt;next;</span><br><span class="line">          &#125;</span><br><span class="line">          r-&gt;next=p-&gt;next;</span><br><span class="line">          <span class="built_in">free</span>(p);</span><br><span class="line">          p=r-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d"</span>, p-&gt;num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">insert(n,m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 第二第三种方法本质一样，只是实现方式有所区别。都是通过数学方法进行一些推导得到的。首先我们假设编号从0开始，最后求出的答案再加1就好了，所以可以知道在第一次中，肯定是叫到(m-1)%n的会出局，那么第一次出局的下一个肯定就是m%n了，如果把他当作0号，那剩下的n-1个人又组成了一个新的约瑟夫环，此时出局的就是(m-1)%(n-1)，但是因为现在的0号并不是0号，而是m%n号，所以我们得到的胜利者还要加回去，也就是((m-1)%(n-1)+m%n)%n，如果我们把第n-1次胜利者看作f(n-1)的话，那第n次的胜利者肯定就是(f(n-1)+m%n)%n，那对于第三次开始叫号也就是同样的道理，胜利者编号就为((f(n-2)+m%(n-1))%(n-1)+m%n)%n，可以看出是有规律的，我们用式子写出来就是f(n)=(f(n-1)+m%n)%n，f(n-1)=(f(n-2)+m%(n-1))%(n-1)，化简得到就一个式子f(n)=(f(n-1)+m)%n，对于n∈[0,n]都是成立的。那么我们就可以写递归代码了，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> (func(n<span class="number">-1</span>)+m)%n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,func(n) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 但是这样递归，其实多了很多重复计算的步骤，是可以优化的，即DP，所以转移方程也就是上文提到的<code>f(n)=(f(n-1)+m)%n</code>，甚至不需要数组来存，直接就能出来，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,s=<span class="number">0</span>,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    s=(s+m)%i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>有谬误敬请指出，敬请不吝赐教</p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解篇-E3</title>
      <link href="/2019/11/17/%E9%A2%98%E8%A7%A3%E7%AF%87-E3/"/>
      <url>/2019/11/17/%E9%A2%98%E8%A7%A3%E7%AF%87-E3/</url>
      
        <content type="html"><![CDATA[<h2 id="A-网络流来了"><a href="#A-网络流来了" class="headerlink" title="A-网络流来了"></a>A-网络流来了</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>想哥带着叶姐去了游乐园，有个项目可以让他们在一个m*n (m,n&lt;=30)方格中，取走一些礼物，同时要求任意2个取走的礼物所在方格没有公共边，且取出的礼物让叶姐的满意度最大。</p><p>想哥忙于学(lian)习(ai)，难以完成，所以求助于你。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第1行有2个正整数m和n，分别表示棋盘的行数和列数。</p><p>接下来的m行，每行有n个正整数，表示方格中的礼物的满意度。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p> 输出一行，为最大满意度 </p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2 3</span><br><span class="line">3 2 3</span><br><span class="line">2 3 1</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><h3 id="AC代码-EK"><a href="#AC代码-EK" class="headerlink" title="AC代码(EK)"></a>AC代码(EK)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> n,m,start,<span class="built_in">end</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">35</span>][<span class="number">35</span>],<span class="built_in">map</span>[<span class="number">1000</span>][<span class="number">1000</span>],path[<span class="number">1500</span>],flow[<span class="number">1500</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="built_in">map</span>[u][v]=c;</span><br><span class="line"><span class="built_in">map</span>[v][u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK_bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,t;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line"><span class="built_in">memset</span>(path,<span class="number">-1</span>,<span class="keyword">sizeof</span>(path));</span><br><span class="line">path[start]=<span class="number">0</span>;</span><br><span class="line">flow[start]=INF;</span><br><span class="line">q.push(start);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">t=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(t==<span class="built_in">end</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="built_in">end</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i!=start &amp;&amp; path[i]==<span class="number">-1</span> &amp;&amp; <span class="built_in">map</span>[t][i]) &#123;</span><br><span class="line">flow[i]=flow[t]&lt;<span class="built_in">map</span>[t][i]?flow[t]:<span class="built_in">map</span>[t][i];<span class="comment">// 更新流量，但不能超过容量，取更小 </span></span><br><span class="line">q.push(i);</span><br><span class="line">path[i]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(path[<span class="built_in">end</span>]==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> flow[<span class="built_in">end</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> max_flow=<span class="number">0</span>,<span class="built_in">step</span>,now,pre;</span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">step</span>=EK_bfs())!=<span class="number">-1</span>) &#123;</span><br><span class="line">max_flow+=<span class="built_in">step</span>;</span><br><span class="line">now=<span class="built_in">end</span>;</span><br><span class="line"><span class="keyword">while</span>(now!=start) &#123;</span><br><span class="line">pre=path[now];</span><br><span class="line"><span class="built_in">map</span>[pre][now]-=<span class="built_in">step</span>;<span class="comment">// 更新残余网络，因为流更新后，残余网络也更新了 </span></span><br><span class="line"><span class="built_in">map</span>[now][pre]+=<span class="built_in">step</span>;</span><br><span class="line">now=pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max_flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,cnt=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">S=<span class="number">0</span>,T=n*m+<span class="number">1</span>;</span><br><span class="line">start=S,<span class="built_in">end</span>=T;</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">sum+=a[i][j];</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>((i+j)%<span class="number">2</span>)&#123;</span><br><span class="line">insert(S,cnt,a[i][j]);</span><br><span class="line"><span class="keyword">if</span>(j&lt;n) insert(cnt,cnt+<span class="number">1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">1</span>) insert(cnt,cnt<span class="number">-1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(i&lt;m) insert(cnt,cnt+n,INF);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>) insert(cnt,cnt-n,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">insert(cnt,T,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,sum-EK());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC代码-Dinic"><a href="#AC代码-Dinic" class="headerlink" title="AC代码(Dinic)"></a>AC代码(Dinic)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 1000000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[<span class="built_in">max</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="built_in">max</span>],e_num=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">e_num++;</span><br><span class="line">e[e_num].v=v;</span><br><span class="line">e[e_num].c=c;</span><br><span class="line">e[e_num].next=head[u];</span><br><span class="line">head[u]=e_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">add(u,v,c);</span><br><span class="line">add(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> depth[<span class="built_in">max</span>];<span class="comment">// 层次网络 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;<span class="comment">//定义一个bfs寻找分层图时的队列</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">-1</span>,<span class="keyword">sizeof</span>(depth));</span><br><span class="line">    depth[S]=<span class="number">0</span>;<span class="comment">//源点深度为0</span></span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[v]==<span class="number">-1</span>)&#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">                depth[v]=depth[u]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (depth[T]!=<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;        <span class="comment">//flow表示当前搜索分支的流量上限</span></span><br><span class="line">    <span class="keyword">if</span>(u==T)&#123;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(e[i].c&gt;<span class="number">0</span>&amp;&amp;depth[u]+<span class="number">1</span>==depth[v])&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=dfs(v,<span class="built_in">min</span>(flow,e[i].c));    <span class="comment">// 递归计算顶点 v，用 c(u, v) 来更新当前流量上限</span></span><br><span class="line">            flow-=tmp;</span><br><span class="line">            e[i].c-=tmp;</span><br><span class="line">            res+=tmp;</span><br><span class="line">            e[i^<span class="number">1</span>].c+=tmp;      <span class="comment">// 修改反向弧的容量</span></span><br><span class="line">            <span class="keyword">if</span>(flow==<span class="number">0</span>)&#123;        <span class="comment">// 流量达到上限，不必继续搜索了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">0</span>)&#123;     <span class="comment">// 当前没有经过顶点 u 的可行流，不再搜索顶点 u</span></span><br><span class="line">        depth[u]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;        <span class="comment">// 函数返回值就是最大流的结果</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">        res+=dfs(S,INF);    <span class="comment">// 初始流量上限为 INF</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">35</span>][<span class="number">35</span>],sum=<span class="number">0</span>,eid=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    S=<span class="number">0</span>,T=n*m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">        sum+=a[i][j];</span><br><span class="line">        eid++;</span><br><span class="line"><span class="keyword">if</span>((i+j)%<span class="number">2</span>)&#123;</span><br><span class="line">insert(S,eid,a[i][j]);</span><br><span class="line"><span class="keyword">if</span>(j&lt;n) insert(eid,eid+<span class="number">1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">1</span>) insert(eid,eid<span class="number">-1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(i&lt;m) insert(eid,eid+n,INF);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>) insert(eid,eid-n,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">insert(eid,T,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,sum-dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先要弄明白是怎么化成最大流(最小割)问题的，由题可知，相邻的不让取，因此可以想到分开染色再建图即可，将一部分染成黑色，与其相邻的染成白色，然后将这些看成顶点分开放置，黑色连接源点，边权即黑色点点权(即礼物满意度)，白色连接汇点(边权等于点权同理)，相邻的黑色和白色连边，边权为INF(最大值)，然后因为要让不相邻的满意度和最大，所以即把相邻的满意度和最小求出来即可，而相邻的满意度即对应我们所建图的割(如果想不明白可以自己画图割一割)，所以我们要让相邻的满意度和最小，即求最小割即可，所以就是让我们求我们所建图的最大流，最后再用所有满意度之和减去最大流即为答案，所以套板子即可(EK、Dinic均可)。</p><h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>需要注意建图时怎样更方便，即相邻染色怎么染的问题。</p><hr><h2 id="B-婚车"><a href="#B-婚车" class="headerlink" title="B-婚车"></a>B-婚车</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>航哥是个土豪，他想在让城市布满他的婚车。但是城市的每条道路单位时间能通过的婚车是有限的，超出则会造成拥堵。他在1号点屯了足够数量的车子，他想知道从城市1号点派出婚车去n号点迎接新娘，在买通交警只允许他的婚车在车道上行驶的条件下，足够多时间之后，n号点单位时间内最多能容纳多少量婚车。</p><p>道路都是双向的</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>第一行两个整数，n和m，n为点数，m为边数，点的标号为1~n。</p><p>接下来M行，每行三个整数a, b, c, 表示城市中两个点之间有一条单位时间最多通行c辆车的道路。</p><p>建图连边之前请注意审题……</p><p>1≤n≤1000</p><p>1≤m≤100000</p><p>1≤a,b≤n,a≠b</p><p>1≤c≤10</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>  输出一个整数，点n处单位时间内最多接受的婚车数量。 </p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br><span class="line">1 2 5</span><br><span class="line">1 3 2</span><br><span class="line">1 4 3</span><br><span class="line">2 3 3</span><br><span class="line">2 4 3</span><br><span class="line">3 4 10</span><br></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> n,m,tend,start;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">1001</span>][<span class="number">1001</span>],path[<span class="number">1001</span>],flow[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK_bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,t;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line"><span class="built_in">memset</span>(path,<span class="number">-1</span>,<span class="keyword">sizeof</span>(path));</span><br><span class="line">path[start]=<span class="number">0</span>;</span><br><span class="line">flow[start]=INF;</span><br><span class="line">q.push(start);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">t=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(t==tend) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i!=start &amp;&amp; path[i]==<span class="number">-1</span> &amp;&amp; <span class="built_in">map</span>[t][i]) &#123;</span><br><span class="line">flow[i]=flow[t]&lt;<span class="built_in">map</span>[t][i]?flow[t]:<span class="built_in">map</span>[t][i];</span><br><span class="line">q.push(i);</span><br><span class="line">path[i]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(path[tend]==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> flow[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> max_flow=<span class="number">0</span>,<span class="built_in">step</span>,now,pre;</span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">step</span>=EK_bfs())!=<span class="number">-1</span>) &#123;</span><br><span class="line">max_flow+=<span class="built_in">step</span>;</span><br><span class="line">now=tend;</span><br><span class="line"><span class="keyword">while</span>(now!=start) &#123;</span><br><span class="line">pre=path[now];</span><br><span class="line"><span class="built_in">map</span>[pre][now]-=<span class="built_in">step</span>;</span><br><span class="line"><span class="built_in">map</span>[now][pre]+=<span class="built_in">step</span>;</span><br><span class="line">now=pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max_flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">tend=n,start=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="built_in">map</span>[a][b]=c;</span><br><span class="line"><span class="built_in">map</span>[b][a]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,EK());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>从题目描述可以非常清晰的知道是一道间的最大流问题，直接套板子即可(EK,Dinic均可，这里只提供EK)，唯一需要注意的就是道路是双向的，即双向边。还有就是这道题EK如果初始化不用memset可能会超时，用Dinic没有任何问题。</p><hr><h2 id="C-要成为魔法少女吗"><a href="#C-要成为魔法少女吗" class="headerlink" title="C-要成为魔法少女吗"></a>C-要成为魔法少女吗</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>酸奶酱是一位魔法少女，并且她很热衷于点化她的其他小伙伴和她一起成为魔法少女。</p><p>现在有一个棘手的问题摆在酸奶酱面前——她有M套成为魔法少女不可缺少的魔法战斗服，以及N个想成为魔法少女的小伙伴。魔法战斗服是有灵性的，它有想要跟随的主人。酸奶酱想尽可能多的把更多的魔法战斗服分给她的小伙伴，她现在想知道最多能有几套魔法战斗服能被交到她的小伙伴手里。</p><p>注意：一位小伙伴只能拿一件魔法战斗服，一件魔法战斗服也只能交给一位小伙伴。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>第一行为两个整数N和M，分别表示小伙伴的数量和魔法战斗服的数量。（0&lt;=N，M&lt;=100）</p><p>接下来M行，第i行的第一个整数K表示第i件魔法战斗服想要跟随的主人的数量。接下来K个整数num，表示魔法战斗服想要跟随的主人编号。（0&lt;=K，num&lt;=N）</p><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>对于每组数据，输出一行，为最多能送出的魔法战斗服的数量。</p><h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">1 2</span><br><span class="line">3 1 2 3</span><br><span class="line">1 1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="AC代码-最大二分匹配"><a href="#AC代码-最大二分匹配" class="headerlink" title="AC代码(最大二分匹配)"></a>AC代码(最大二分匹配)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,n,m;</span><br><span class="line"><span class="keyword">int</span> link[<span class="number">1005</span>],use[<span class="number">1005</span>],<span class="built_in">map</span>[<span class="number">105</span>][<span class="number">105</span>];<span class="comment">//map数组为邻接矩阵，use表示当前点是否匹配，link[i]表示与顶点i所连的点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!use[i]&amp;&amp; <span class="built_in">map</span>[x][i]) &#123; <span class="comment">//若不在交替路中</span></span><br><span class="line">use[i] = <span class="number">1</span>;<span class="comment">//则加入交替路</span></span><br><span class="line"><span class="keyword">if</span>(!link[i] || dfs(link[i])) &#123;</span><br><span class="line">link[i] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xyl</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(link, <span class="number">0</span>, <span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">memset</span>(use,<span class="number">0</span>,<span class="keyword">sizeof</span>(use));</span><br><span class="line"><span class="keyword">if</span>(dfs(i)) ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k,num;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>],b[<span class="number">10005</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>, <span class="literal">false</span>, <span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line"><span class="built_in">map</span>[i][num]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(i=1; i&lt;=n; i++) &#123;</span></span><br><span class="line"><span class="comment">scanf("%d",&amp;a[i]);</span></span><br><span class="line"><span class="comment">map[i][a[i]]=true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for(i=1; i&lt;=n; i++) &#123;</span></span><br><span class="line"><span class="comment">scanf("%d",&amp;b[i]);</span></span><br><span class="line"><span class="comment">map[b[i]][i]=true;</span></span><br><span class="line"><span class="comment">&#125; //输入map*/</span></span><br><span class="line">xyl();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="comment">// ans为最大匹配数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC代码-贪心"><a href="#AC代码-贪心" class="headerlink" title="AC代码(贪心)"></a>AC代码(贪心)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> times[<span class="number">105</span>]=&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">105</span>];</span><br><span class="line">&#125;a[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a,<span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum1=<span class="number">0</span>,sum2=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line">c=*(struct node *)a;</span><br><span class="line">d=*(struct node *)b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.k;i++) sum1+=times[c.num[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d.k;i++) sum2+=times[d.num[i]];</span><br><span class="line"><span class="keyword">if</span>(c.k!=d.k) <span class="keyword">return</span> c.k&gt;d.k;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> sum1&gt;sum2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a,<span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c,d;</span><br><span class="line">c=*(<span class="keyword">int</span> *)a;</span><br><span class="line">d=*(<span class="keyword">int</span> *)b;</span><br><span class="line"><span class="keyword">return</span> times[c]&gt;times[d];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,i,j,ans=<span class="number">0</span>,flag[<span class="number">105</span>]=&#123;&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].k);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;a[i].k;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].num[j]);</span><br><span class="line">times[a[i].num[j]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">qsort(a,m,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">qsort(a[i].num,a[i].k,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),cmp2);<span class="comment">// 这里没有必要排序的，在下面取的时候遍历取最小值即可，抱歉没有改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;a[i].k;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag[a[i].num[j]])&#123;</span><br><span class="line">flag[a[i].num[j]]=<span class="number">1</span>;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>很明显这是一道最大二分匹配的问题，还是简简单单套板子即可(匈牙利算法)。</p><p>然后后来发现可以用贪心做这道题。首先可以知道如果魔法战斗服只想跟随一个魔法少女，那肯定是要先对它进行分配的，所以首先肯定对魔法战斗服想跟随的魔法少女的数量进行排序。再考虑这种情况：如果魔法战斗服(把它称为<code>a</code>)最少都有两个想跟随的魔法少女的话，那么该怎么选择呢，肯定需要对想跟随这两个魔法少女的所有魔法战斗服的数量进行排序，并且把<code>a</code>战斗服给想跟随的魔法战斗服的数量更少的那一位。还有一种情况：两件魔法战斗服想跟随的魔法少女数量相同，这时还是需要对这两件魔法战斗服想跟随的所有魔法少女，求出想跟随她们的所有魔法战斗服的数量总和然后进行排序，对更小的先取即可。所以将上面所有情况考虑即可。(然后本人还了解到有其他贪心的方法，即将魔法少女作为结构体来处理而非魔法战斗服，这里不再赘述，供读者自行思考)</p><hr><h2 id="D-SkyLee的脱单大计"><a href="#D-SkyLee的脱单大计" class="headerlink" title="D-SkyLee的脱单大计"></a>D-SkyLee的脱单大计</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>SkyLee想要脱单，可是他又不想拆散可能在一起的有缘人，毕竟SkyLee是一个善良的人。</p><p>SkyLee想知道最理想的情况下，即可能在一起的人数最多时，还有哪些女生仍然是单身。假设学校男女比非常和谐，恰好为1：1</p><p> 时间限制：1000ms，内存限制：65536kb </p><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>多组数据输入</p><p>第一行一个整数n，为学校男生数量或女生数量（都一样的啦）保证n&lt;10000</p><p>接下来1行，每行n个整数a[i] (表示男生i暗恋的女生编号)</p><p>接下来1行，每行n个整数b[i] (表示女生i暗恋的男生编号)</p><p>（如果暗恋的人编号为0说明没有暗恋的人）</p><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>对于每组数据，输出一行，为最后剩下的女生的人数</p><h3 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 1 1</span><br><span class="line">2 0 1</span><br></pre></td></tr></table></figure><h3 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="AC代码-二分匹配"><a href="#AC代码-二分匹配" class="headerlink" title="AC代码(二分匹配)"></a>AC代码(二分匹配)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,n,dis;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">10005</span>],dy[<span class="number">10005</span>],cx[<span class="number">10005</span>],cy[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> man[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> woman[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">searchP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    dis=inf;</span><br><span class="line">    <span class="built_in">memset</span>(dx,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dx));</span><br><span class="line">    <span class="built_in">memset</span>(dy,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dy));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cx[i]==<span class="number">-1</span>) &#123;q.push(i);dx[i]=<span class="number">0</span>;&#125;<span class="comment">//对于未遍历的点入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备分层</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(dx[u]&gt;dis) <span class="keyword">break</span>;<span class="comment">//如果目前的层次大于最小增广长度，那么退出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)<span class="comment">//对于一切可能的点遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((man[u]==j||woman[j]==u)&amp;&amp;dy[j]==<span class="number">-1</span>)&#123;<span class="comment">//只对未分层的点遍历</span></span><br><span class="line">                dy[j]=dx[u]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(cy[j]==<span class="number">-1</span>) dis=dy[j];</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dx[cy[j]]=dy[j]+<span class="number">1</span>;</span><br><span class="line">                    q.push(cy[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis!=inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findpath</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[j]&amp;&amp;(man[x]==j||woman[j]==x)&amp;&amp;dy[j]==dx[x]+<span class="number">1</span>)<span class="comment">//符合继续搜索的条件有三个：未访问过，图上联通和层次符合</span></span><br><span class="line">        &#123;</span><br><span class="line">            used[j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(cy[j]!=<span class="number">-1</span>&amp;&amp;dis==dy[j]) <span class="keyword">continue</span>;<span class="comment">//如果下一个点还是匹配点且目前已经到达增广最小层次，不需要扩展了</span></span><br><span class="line">            <span class="keyword">if</span>(cy[j]==<span class="number">-1</span>||findpath(cy[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                cy[j]=x;cx[x]=j;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hk</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(cx,<span class="number">-1</span>,<span class="keyword">sizeof</span>(cx));</span><br><span class="line">    <span class="built_in">memset</span>(cy,<span class="number">-1</span>,<span class="keyword">sizeof</span>(cy));</span><br><span class="line">    <span class="keyword">while</span>(searchP())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cx[i]==<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(findpath(i)) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>],b[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">man[i]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">woman[i]=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-hk());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC代码-贪心-1"><a href="#AC代码-贪心-1" class="headerlink" title="AC代码(贪心)"></a>AC代码(贪心)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ttime[<span class="number">10005</span>]=&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">man</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> times;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line">&#125;woman[<span class="number">10005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a,<span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">man</span> <span class="title">c</span>,<span class="title">d</span>;</span></span><br><span class="line"><span class="keyword">int</span> sumc=<span class="number">0</span>,sumd=<span class="number">0</span>;</span><br><span class="line">c=*(struct man*)a;</span><br><span class="line">d=*(struct man*)b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c.times;i++)&#123;</span><br><span class="line">sumc+=ttime[c.num[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d.times;i++)&#123;</span><br><span class="line">sumd+=ttime[d.num[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c.times==d.times)&#123;</span><br><span class="line">sumc&gt;sumd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.times&gt;d.times;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">com</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ttime[a]&gt;ttime[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j,wom,flag[<span class="number">10005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">woman[i].times=<span class="number">0</span>;</span><br><span class="line">woman[i].num.<span class="built_in">clear</span>();</span><br><span class="line">ttime[i]=<span class="number">0</span>;</span><br><span class="line">flag[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;wom);</span><br><span class="line"><span class="keyword">if</span>(wom) &#123;</span><br><span class="line">ttime[i]++;</span><br><span class="line">woman[wom].times++;</span><br><span class="line"><span class="keyword">if</span>(woman[wom].num.empty())&#123;</span><br><span class="line">woman[wom].num.push_back(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">woman[wom].num.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;wom); </span><br><span class="line"><span class="keyword">if</span>(wom) &#123;</span><br><span class="line">ttime[wom]++;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;woman[i].num.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(woman[i].num[j]==wom) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==woman[i].num.<span class="built_in">size</span>())&#123;</span><br><span class="line">woman[i].times++;</span><br><span class="line"><span class="keyword">if</span>(woman[i].num.empty())&#123;</span><br><span class="line">woman[i].num.push_back(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">woman[i].num.push_back(wom);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">qsort(woman,n,<span class="keyword">sizeof</span>(struct man),cmp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">min</span>=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=woman[i].times;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=woman[i].num[j];</span><br><span class="line"><span class="comment">/*if(woman[i].times&gt;1)&#123;</span></span><br><span class="line"><span class="comment">sort(woman[i].num.begin(),woman[i].num.end(),com);</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=woman[i].times;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(woman[i].num[j]&lt;<span class="built_in">min</span>) <span class="built_in">min</span>=woman[i].num[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*if(!flag[woman[i].num[j]])&#123;</span></span><br><span class="line"><span class="comment">flag[woman[i].num[j]]=1;</span></span><br><span class="line"><span class="comment">ans++;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">if</span>(!flag[<span class="built_in">min</span>])&#123;</span><br><span class="line">flag[<span class="built_in">min</span>]=<span class="number">1</span>;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>从题目可以看出这是一道非常明显的二分匹配，但是注意给出的n&lt;10000并且内存只有65536KB，如果直接建图，肯定分分钟MLE，所以需要一些技巧，因为从题意可以知道，每个男生只有一个心仪的女生，同样对女生也同样。所以我们可以直接定义两个一维数组(woman[]和man[])即可，这样内存完全够用，然后在判断的时候就不用判断是否为<code>true</code>了，而是判断<code>man[u]==[v],woman[v]==u</code>即可。然后还是套板子就可以了(匈牙利、HK均可，这里用的HK)</p><p>从上一题的贪心可以知道，这道题肯定是可以贪心解决的，具体就不赘述，一样的道理。只要注意使用vector就可以了。</p><hr><h2 id="E-计网的烦恼"><a href="#E-计网的烦恼" class="headerlink" title="E-计网的烦恼"></a>E-计网的烦恼</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>计网课上有一道题：一条街道安装无线网络，需要放置M个路由器。整条街道上一共有N户居民，分布在一条直线上，每一户居民必须被至少一台路由器覆盖到。现在的问题是所有路由器的覆盖半径是一样的，我们希望用覆盖半径尽可能小的路由器来完成任务，因为这样可以节省成本。</p><h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>输入第一行包含两个整数M和N，以下N行每行一个整数Hi表示该户居民在街道上相对于某个点的坐标。</p><h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>输出仅包含一个数，表示最小的覆盖半径，保留一位小数。</p><h3 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.0</span><br></pre></td></tr></table></figure><h3 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h3><p>【样例输出】（在2，10位置上各放一个）</p><p>【数据规模】</p><p>对于100%的数据，有1 ≤N, M ≤100000，-10000000 ≤Hi ≤10000000。</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[MaxSize], B[MaxSize];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is</span><span class="params">(<span class="keyword">double</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]-cur&gt;<span class="number">2</span>*t)&#123;</span><br><span class="line">cnt++;</span><br><span class="line">cur = a[i];</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n);</span><br><span class="line"><span class="keyword">double</span> left = <span class="number">0</span>, right = <span class="number">10000000</span>, mid, ans;</span><br><span class="line"><span class="keyword">while</span> (right - left &gt;= <span class="number">1e-9</span>) &#123;</span><br><span class="line">mid= (left + right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (is(mid))&#123;</span><br><span class="line">left = mid;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">right = mid;</span><br><span class="line">ans = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1lf"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>这是一道很明显的二分题，同时是一维的覆盖。原理如下：我们找一个半径去覆盖所有，如果不能覆盖，则把半径变大，如果已经完全覆盖了，则把半径减小。怎么判断是否已经覆盖了呢，我们同时通过计数器来判断是否到达<code>m</code>然后如果没有覆盖，则让该坐标最为下次的起始位置即可，详情可查看代码。</p><hr><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p><a href="https://accoding.cn/index" target="_blank" rel="noopener">北航OJ</a></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 网络流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prince and Princess</title>
      <link href="/2019/11/12/Prince-and-Princess/"/>
      <url>/2019/11/12/Prince-and-Princess/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>这是突然看到的一个非常有意思的题，是ACM-ICPC的原题，在这里稍微做一些分析，希望对大家有帮助。</p><h2 id="Prince-and-Princess"><a href="#Prince-and-Princess" class="headerlink" title="Prince and Princess"></a>Prince and Princess</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><hr><p>王子<code>m</code>和公主<code>Hff</code>相爱，想要娶公主。虽然公主非常愿意，但是并不是王国里每个人都支持这一场婚姻。而为了娶到公主，王子需要完成一个挑战：在n个房间中找出公主在哪。</p><p>每个房间有一个人，他们彼此知道谁在哪个房间。可以每次问任意一个房间里的人三种问题之一：</p><p>1、你的名字是什么？</p><p>2、在第xx个房间里的人的名字是什么？</p><p>3、公主在哪个房间？</p><p>这n个人可以分为三类：一类支持婚姻，一定说真话；一类反对婚姻，一定说假话；一类立场不确定，可能说真话可能说假话。</p><p>王子知道这三类人的人数分别为 a,b,c，求能否通过问若干个问题保证找到公主在哪，如果能，输出<code>YES</code>和最少需要的问题数；如果不能，输出<code>NO</code>。</p><p>时间限制：1000ms，内存限制：65536KB</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><hr><p>第一行一个整数n表示数据组数</p><p>接下来n行，每行3个整数a,b,c</p><p>数据范围：1≤a≤10000，0≤b≤10000，0≤c≤10000</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><hr><p>对于每组数据：</p><p>若能问到公主在哪，输出两行：第一行为：<code>YES</code>，第二行输出一个整数表示答案。</p><p>若不能，输出一行：<code>NO</code></p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 2 0</span><br><span class="line">2 0 0</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>&amp;&amp;c==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&gt;b+c)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">2</span>*b+<span class="number">2</span>*c+<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><hr><p>因为我们分析的是最坏的情况，所以，最坏情况下，c对应的所有人都说假话即可，然后我们再考虑下面这种情况：只有两个人，一个说真话，一个说假话。大家可以自行分析一下，可以发现这是无法得到公主在哪个房间的，并且通过这里，我们可以知道，其实只有第三个问题是有价值的，所以在说真话和说假话的人数相同的时候，我们是推不出来的，所以我们可以直接推广到<code>a&lt;=b+c</code>的情况是无法推出来的，所以我们只用考虑<code>a&gt;b+c</code>即可。因为王子是知道a、b、c所对应的人的数目的，所以<code>a&gt;b+c</code>是肯定能推出来的，只用问第三个问题即可，找出答案中数目最多的房间即公主所在房间，那么需要问的次数则是<code>2\*b+2\*c+1</code>，为什么呢，因为b和c是必须要问完的，然后在a中问比b+c多一个问题就可以得到答案了。然后是特殊情况的分析，即a=1，b=0，c=0的情况，是不用问就能知道的。</p><h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><hr><p>无</p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划(DP)——背包问题</title>
      <link href="/2019/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="背包问题（简单DP）"><a href="#背包问题（简单DP）" class="headerlink" title="背包问题（简单DP）"></a>背包问题（简单DP）</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><hr><p>该讲主要介绍三类背包问题，都是比较经典的DP问题，比之前所讲的股票问题难度有所提升。</p><h3 id="背包Ⅰ-01背包"><a href="#背包Ⅰ-01背包" class="headerlink" title="背包Ⅰ(01背包)"></a>背包Ⅰ(01背包)</h3><h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><hr><p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。 </p><p>时间限制：5000ms，内存限制：65536kb</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n，v，表示物品的数量和背包的容量。(1≤n≤500,1≤v≤30000)</p><p>接下来n行，每行两个整数，表示物品的费用和价值(1≤c<sub>i</sub>,w<sub>i</sub>≤500)</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 6</span><br><span class="line">2 1</span><br><span class="line">3 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[505];</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30005</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,val,vmax=<span class="number">0</span>,i,j,v;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;val))&#123;</span><br><span class="line">vmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].price,&amp;a[i].value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=val;i++)&#123;</span><br><span class="line">b[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(v=val;v&gt;=a[i].price;v--)&#123;</span><br><span class="line">b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b[val]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是直接从DP的角度开始分析这个问题，这是一个01背包问题，我们先假设一些变量，<kbd>b[i,j]</kbd>表示当前背包被占用的容量是<kbd>j</kbd>的情况下，前<kbd>i</kbd>个物品的最佳组合的总价值。<kbd>a[i].price</kbd>和<kbd>a[i].value</kbd>即表示当前商品所需要的容量和当前商品的价值。然后对于当前这个商品有以下两种可能：</p><ul><li>包剩余的容量不够装当前商品，总价值保持不变，不装入该商品，即<kbd>b[i,j]=b[i-1,j]</kbd>;</li><li>有足够容量装该商品，但是装了之后不一定是最佳的价值(因为占用了容量无法保证后面商品是否更好)，需要一个选择，即<kbd>b[i,j]=max(b[i-1,j],b[i-1,j-a[i].price]+a[i].value)</kbd>;</li></ul><p>第二个式子怎么理解呢，如果当前产品装进去了，那么装入之前的状态就是<kbd>b[i-1,j-a[i].price]</kbd>，这样说应该比较好理解了。然后这样我们可以得到一个转移方程如下，当然可以通过初始赋值将其转化为一个方程，代码实现我也放在下方。</p><ul><li>j&gt;=a[i].price: b[i,j]=max(b[i-1，j],b[i-1，j-a[i].price]+a[i].value)</li><li>j&lt;a[i].price: b[i，j]=b[i-1，j]</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=v;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=a[i].price)&#123;</span><br><span class="line">            b[i][j]=<span class="built_in">max</span>(b[i<span class="number">-1</span>][j],b[i<span class="number">-1</span>][j-a[i].price]+a[i].value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            b[i][j]=b[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>上文这样确实是能够解决问题，但其实是可以再进行优化的，从二维数组优化到一维数组来解决。因为我们可以知道每一次往二维数组<kbd>b[i,j]</kbd>中写入数据的时候都是从上一次得到的数据来写入的，其实<kbd>i</kbd>就变得没有必要了，因为总是从<kbd>b[i-1,...]</kbd>中获取数据的，因此只需要一维数组即可，但是对于<kbd>j</kbd>来说，则需要一点思考，到底是由顶向下还是由底向上循环。假设考虑由底向上循环，我们考虑模拟取第<kbd>i</kbd>件物品的情况，<kbd>v</kbd>应该是从<kbd>a[i].price</kbd>到<kbd>val</kbd>的，那么在最开始的时候就相当于模拟取了一件了，那么在<kbd>v</kbd>取到<kbd>2*a[i].price</kbd>的时候，就相当于模拟取了两个第<kbd>i</kbd>件了，这明显是与题意不符的(这是后面会说到的完全背包)，所以我们采用由顶向下的循环就不会出现这种问题了。大家如果还不明白可以自己画画图推一推就好了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(v=val;v&gt;=<span class="number">1</span>;v--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v&gt;=a[i].price) b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>b[j]=max(b[j],b[j-a[i].price]+a[i].value)</li></ul><h4 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h4><hr><p>注意初始化。</p><hr><hr><h3 id="背包Ⅱ-完全背包"><a href="#背包Ⅱ-完全背包" class="headerlink" title="背包Ⅱ(完全背包)"></a>背包Ⅱ(完全背包)</h3><h4 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h4><hr><p>有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p><p>时间限制：1000ms，内存限制：65536kb</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n，v，表示物品的数量和背包的容量。(1≤n≤500,1≤v≤30000)</p><p>接下来n行，每行两个整数，表示物品的费用和价值(1≤c<sub>i</sub>,w<sub>i</sub>≤500)</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 6</span><br><span class="line">2 1</span><br><span class="line">3 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[505];</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30005</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,val,vmax=<span class="number">0</span>,i,j,v;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;val))&#123;</span><br><span class="line">vmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].price,&amp;a[i].value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=val;i++)&#123;</span><br><span class="line">b[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(v=a[i].price;v&lt;=val;v++)&#123;</span><br><span class="line">b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b[val]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><hr><p>刚拿到这个题目相信大家很容易从贪心的思想去解决，其实是错误的，因为这个容量是有限的，不可分割的，即使我们算出平均最大价值，但是装入背包时其容量还是不可分割的，所以贪心肯定是没法实现的，其他具体不能用贪心的原因，在此也不再赘述。</p><p>然后我们还是直接从DP的角度开始分析这个问题，这是一个完全背包问题，我们还是先假设一些变量，<kbd>b[i,j]</kbd>表示当前背包被占用的容量是<kbd>j</kbd>的情况下，前<kbd>i</kbd>个物品的最佳组合的总价值。<kbd>a[i].price</kbd>和<kbd>a[i].value</kbd>即表示当前商品所需要的容量和当前商品的价值。然后对于当前这个商品有<kbd>k</kbd>种选择，因为可以选择<kbd>k=0,1,2....</kbd>个当前的物品种数，只要不超过背包总容量即可，所以我们直接给出转移方程：</p><ul><li>b[i,j] = max(b[i-1,j-k*a[i].price]+k*a[i].value)    0&lt;=k*a[i].price&lt;=j</li></ul><p>这里就不贴代码了，因为很明显时间复杂度太大，需要三个循环才能实现，并且还不是那么容易。所以我们直接开始说优化的过程。还是同样先优化为一维数组。因为每次取物品的时候都是可以无限量的取的，所以我们的<kbd>k</kbd>就可以省略了，直接采用两重循环实现，并且要保证每次的量的无限，我们的<kbd>j</kbd>的循环则需要从小到大进行循环，代码如下文所示。为什么呢，在这里举个例子说明以下吧：假设我们取第<kbd>i</kbd>件物品需要取<kbd>j</kbd>件才能满足最大价值的时候，我们的第二重循环运转的时候，<kbd>v</kbd>是从<kbd>a[i].price</kbd>一直循环到<kbd>val</kbd>也就是我们可以在取了一次后，<kbd>b[v]</kbd>更新，这样在<kbd>v</kbd>取到<kbd>2*a[i].price</kbd>的时候就能模拟第二次取，并且此时的<kbd>b[v-a[i].price]</kbd>是之前第一次取后更新了过后的值，这样一直循环下去便实现了模拟取无穷次的过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(v=<span class="number">1</span>;v&lt;=val;v++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v&gt;=a[i].price) b[v]=<span class="built_in">max</span>(b[v],b[v-a[i].price]+a[i].value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转移方程-1"><a href="#转移方程-1" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>b[j]=max(b[j],b[j-a[i].price]+a[i].value)</li></ul><h4 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h4><hr><p>注意初始化。</p><hr><hr><h3 id="背包Ⅲ-多重背包"><a href="#背包Ⅲ-多重背包" class="headerlink" title="背包Ⅲ(多重背包)"></a>背包Ⅲ(多重背包)</h3><h4 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h4><hr><p> 有N种物品和一个容量为V的背包。第i种物品最多有m[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p><p>时间限制：1000ms，内存限制：65536kb</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n，v，表示物品的数量和背包的容量。(1≤n≤500,1≤v≤30000)</p><p>接下来n行，每行三个整数，表示物品的费用,价值,数量(1≤c<sub>i</sub>,w<sub>i</sub>≤500,1≤m<sub>i</sub>≤200) </p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 10</span><br><span class="line">2 1 3</span><br><span class="line">3 2 2</span><br></pre></td></tr></table></figure><h4 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[505];</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30005</span>]=&#123;&#125;,val;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZeroOnePack</span><span class="params">(<span class="keyword">int</span> *b,<span class="keyword">int</span> price,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span>(v=val;v&gt;=price;v--)&#123;</span><br><span class="line">b[v]=<span class="built_in">max</span>(b[v],b[v-price]+value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CompletePack</span><span class="params">(<span class="keyword">int</span> *b,<span class="keyword">int</span> price,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span>(v=price;v&lt;=val;v++)&#123;</span><br><span class="line">b[v]=<span class="built_in">max</span>(b[v],b[v-price]+value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultiplePack</span><span class="params">(<span class="keyword">int</span> *b,<span class="keyword">int</span> price,<span class="keyword">int</span> value,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (price*num&gt;=val)&#123;</span><br><span class="line">CompletePack(b,price,value);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k&lt;num)&#123;</span><br><span class="line">ZeroOnePack(b,k*price,k*value);</span><br><span class="line">num=num-k; </span><br><span class="line">k=<span class="number">2</span>*k; </span><br><span class="line">&#125;</span><br><span class="line">ZeroOnePack(b,price*num,value*num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j,v;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;val))&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a[i].price,&amp;a[i].value,&amp;a[i].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=val;i++)&#123;</span><br><span class="line">b[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">MultiplePack(b,a[i].price,a[i].value,a[i].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b[val]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是从最简单的方法开始分析，因为多重背包，我们直接将某个物品拆成<kbd>m[i]</kbd>个同样的物品，只不过每件物品只能取一次，这样就变成了我们上文说到的01背包了，方法非常的简单。转移方程给在下方：</p><ul><li>b[i,j]=max(b[i-1,j-k*a[i].price]+k*a[i].value) 0&lt;=k&lt;=m[i]</li></ul><p>这样的时间复杂度为<kbd>O(V*Σn)</kbd>，我们可以对其进行优化，如何优化呢，我们直接引入二进制来优化，将第<kbd>i</kbd>件物品分成若干件物品，，每个物品的数目，分别为1,2,4,8,….,2<sup>k-1</sup>,n-2<sup>k</sup>+1，k是满足n-2<sup>k</sup>+1&gt;0的最大整数。如果不够明白，举个例子，假设某物品有49件，那么可以分为49=1+2+4+8+16+18这5件物品，并且1~49间的任何数都可以由这五件物品构成，所以这样应该比较容易理解了。所以时间复杂度也降为<kbd>O(V*Σlogn)</kbd>了。</p><p>那应该怎么实现呢，首先对于第<kbd>i</kbd>件物品来说，如果<kbd>a[i].price*a[i].num>=val</kbd>即如果没法全部装下的话，就不用将其全部拆分了，直接当作完全背包处理就好，模拟出装几件该物品更好即可(如果不太理解可以去看上文的完全背包的分析)。如果是小于的话，那我们就采用拆分的办法即可，代码给出在下方。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultiplePack</span><span class="params">(<span class="keyword">int</span> *b,<span class="keyword">int</span> price,<span class="keyword">int</span> value,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (price*num&gt;=val)&#123;</span><br><span class="line">CompletePack(b,price,value);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k&lt;num)&#123;</span><br><span class="line">ZeroOnePack(b,k*price,k*value);</span><br><span class="line">num=num-k; </span><br><span class="line">k=<span class="number">2</span>*k; </span><br><span class="line">&#125;</span><br><span class="line">ZeroOnePack(b,price*num,value*num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HINT-2"><a href="#HINT-2" class="headerlink" title="HINT"></a>HINT</h4><hr><p>其实还可以更深度的优化到<kbd>O(V*n)</kbd>需要用到优先队列，在本文不再赘述，供大家思考。</p><hr><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr><p>《背包九讲》</p><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><hr><p><a href="https://accoding.cn/index" target="_blank" rel="noopener">北航OJ</a></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建(hexo-Github)博客</title>
      <link href="/2019/11/10/%E6%90%AD%E5%BB%BAhexo-Github%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/10/%E6%90%AD%E5%BB%BAhexo-Github%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><hr><p>本文主要向大家介绍了如何搭建hexo-Github博客的详细过程，有需要的朋友们可以尝试阅读，希望对大家有帮助。</p><h3 id="简要吐槽"><a href="#简要吐槽" class="headerlink" title="简要吐槽"></a>简要吐槽</h3><hr><p>搭博客其实没那么麻烦，但是在网上各类教程的“指导下”，我不知道放弃了多少次又重新试了多少次，大部分还是得靠自己。。。<br>今天在这里给大家简要分享一下我搭博客(hexo-Github)的教程，基于自己很多很多日日夜夜的尝试与摸索后的经验教训，希望对大家有一些帮助。</p><h3 id="直入主题"><a href="#直入主题" class="headerlink" title="直入主题"></a>直入主题</h3><hr><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><hr><p>首先需要三个工具，git、npm、node.js。可以在windows下用命令行(win+R)验证一下(如下)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>只要显示了版本号即证明OK。如果没有的话可以去官网下载安装即可(下方附上官网地址)，并且不要忘了添加环境变量不然还是看不到版本号也没法在命令行里使用这三个命令。</p><p> <a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">git安装地址</a></p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js安装地址</a>(安装这个就包含了npm)</p><h4 id="在Github上搭建仓库"><a href="#在Github上搭建仓库" class="headerlink" title="在Github上搭建仓库"></a>在Github上搭建仓库</h4><hr><p>首先需要注册一个Github账号(需要邮箱)，然后进入后点击右上角的人脸选择<strong>your repositories</strong>(如下图)</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/1.jpg" alt="blog1"></p><hr><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/2.jpg" alt="blog2"></p><p>然后点击右上角绿色的new(如上图)创建一个自己的仓库，进入后就会出现下面这个界面</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/3.jpg" alt="blog1"></p><p>图中打了×的都是可填可不填的，description就是一个简单的描述，public和private就是选择你的项目是否公开，但是private需要花钱，最后那个是添加一个README文件可有可无。但是最重要的是第一个打勾的地方，要搭建博客的话这个仓库名称必须是“username”.github.io，username是你自己的账号名字，如上图我的仓库名称就应该为DbettKK.github.io(!!!!!千万不要写错，不然还得删了重来，本人不知道删过多少次了)，最后点击create repository即可。进去后还要记住那个https后面(如下图)的地址后面还有用。</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/4.jpg" alt="blog4"></p><h4 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h4><hr><h5 id="为啥要配置这个"><a href="#为啥要配置这个" class="headerlink" title="为啥要配置这个"></a>为啥要配置这个</h5><hr><p>因为提交代码是需要GitHub权限的，就相当于每次都需要输入你的邮箱和密码，非常的麻烦和容易出错，有了这个SSH key就能让本地和GitHub服务器连接起来，以上的问题就迎刃而解，非常的方便与安全。</p><h5 id="生成本地SSH-key"><a href="#生成本地SSH-key" class="headerlink" title="生成本地SSH key"></a>生成本地SSH key</h5><hr><p>可以先用以下代码在GIT BASH中查看本机是否已经有SSH存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh</span><br></pre></td></tr></table></figure><p>如果显示No such file……就说明需要重新生成，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>邮箱地址是你自己的GitHub邮箱地址即”[username].github.io”，然后连续敲几次回车即可，这个SSH key就保存在C盘用户目录里的.ssh文件夹里，然后找到该文件夹里的id_rsa.pub文件，用记事本打开并且复制里面的全部内容，在你的GitHub中还是点击右上角的人脸选择settings(这里就不配图了)，然后选择左边的SSH and GPG keys(如下图)，并且选择新增SSH keys，下图中的title可以随意填写，Key就是把你之前复制的粘贴下来点击Add SSH key即可完成，完成后就能看到自己的SSH key了。</p><p><img src="https://raw.githubusercontent.com/DbettKK/pictures/master/blog/5.jpg" alt="update5"></p><h5 id="测试成功与否"><a href="#测试成功与否" class="headerlink" title="测试成功与否"></a>测试成功与否</h5><hr><p>在git bash里输入一下命令进行验证是否连接成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>上面那个邮箱地址是不用更改的，就这样写就可以了，如果有需要输入的就输入yes/y就可以了，最后如果看到其中显示<strong><em>Hi …..! You’ve successfully……</em></strong>就说明配置成功了。</p><h5 id="将git与Github绑定"><a href="#将git与Github绑定" class="headerlink" title="将git与Github绑定"></a>将git与Github绑定</h5><hr><p>在git bash中输入以下命令将git与你的GitHub账号和邮箱绑定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;.....&quot;</span><br><span class="line">git config --global user.email &quot;...@...&quot;</span><br></pre></td></tr></table></figure><p>上面引号中的内容都填写你自己的账号用户名和邮箱即可。</p><h4 id="开始配置Hexo"><a href="#开始配置Hexo" class="headerlink" title="开始配置Hexo"></a>开始配置Hexo</h4><hr><h5 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h5><hr><p>Hexo是个静态页面生成、上传的工具。可以将我们写的.md文件生成静态的html网页，然后再将这个网页上传到服务器。使用非常的方便、简洁。下方给一个主页地址，有非常详细的介绍，这里不再赘述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hexo.io/zh-cn/</span><br></pre></td></tr></table></figure><h5 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h5><hr><p>Hexo的安装不需要去官网，直接再git bush中就能完成，在任意地方打开git bash，然后输入一下命令进行安装，可能需要等一会，这个过程不要去乱按键盘即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>等到有版本号出来的时候就说明安装完成了，然后进行下一步，初始化hexo，现在自己找一个位置新建一个文件夹hexo(什么名字都可以，我写hexo方便下文描述)，这也就是你之后写博客、存放代码的位置，所以选择还是慎重一些。然后进去这个文件夹，右键git bash here打开git bash然后输入一下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这个过程还是不短，还是耐心等待一会啦，最后初始化完之后，这个文件夹里应该会有以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">public # 这个里面是存放源码的地方，一般用不到。</span><br><span class="line">scaffolds</span><br><span class="line">source # 这个里面会有一个_posts，_posts里就是你写.md文档的地方，那里面可能会有默认的一个.md。</span><br><span class="line">themes # 这个是主题，最开始里面应该都只有一个landscape，有需要可以去官网下载。</span><br><span class="line">.gitignore</span><br><span class="line">_config.yml # 这个是配置文件，很多操作都需要对它进行编辑修改。</span><br><span class="line">db.json # 这个及后面的暂时不介绍，暂时用不到。</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>然后就可以查看自己博客的初始状态啦，当然只能在本地服务器查看，因为还没有上传到github。用以下命令来查看，还是在刚刚下载好的地方用git bash，后文若无特殊说明，都是在此目录下打开git bash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 这个命令用于将source/_posts/里的.md文件生成到自己的博客上（本地）</span><br><span class="line">hexo s # 这个命令用于启动本地的服务器，使用这个命令就可以开始访问啦</span><br></pre></td></tr></table></figure><p>输入命令hexo s命令后，应该出现以下内容，此时就可以在本地网站里输入下方的网址进行访问啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>进入后应该能看到自己博客最初始的状态啦，里面应该只有一个内容就是hello world，不过之后可以自己添加啦。</p><h5 id="Hexo一些配置"><a href="#Hexo一些配置" class="headerlink" title="Hexo一些配置"></a>Hexo一些配置</h5><hr><p>因为要上传到github，所以还需要配置一些东西才行。首先是在_config,yml里修改，首先用记事本或者其他编辑软件打开(个人比较推荐editplus)，在其最后有一个deploy的部分进行修改。修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:[username]/[username].github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>其中的username还是你自己的用户名。然后还需要在git bush中安装一个小插件，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后就可以开始上传啦，使用以下命令进行上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo d # 这个指令用于上传</span><br><span class="line">也可以两个合为 hexo g -d使用</span><br></pre></td></tr></table></figure><p>然后在网址里输入[username].github.io就能访问自己的博客啦，当然别人也同样可以啦。</p><h5 id="配置一下自己的博客"><a href="#配置一下自己的博客" class="headerlink" title="配置一下自己的博客"></a>配置一下自己的博客</h5><hr><p>虽然已经可以进行线上访问了，但是博客还是需要名字的呀，不然大家都是hexo了。修改方式还是非常简单的，首先找到根目录下的_config.yml文件还是用编辑软件打开，打开后可以看到一个# Site 的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo # 就是博客的大标题啦</span><br><span class="line">subtitle: &apos;&apos; # 副标题</span><br><span class="line">description: &apos;&apos; # 简单描述</span><br><span class="line">keywords: &apos;&apos; </span><br><span class="line">author: &apos;&apos; # 作者名，在文末会看到哦</span><br><span class="line">language: en # 语言，这里是英文，中文是zh-CN</span><br><span class="line">timezone: &apos;&apos;</span><br></pre></td></tr></table></figure><p>然后对其中的内容进行修改就可以啦，修改的时候记得去掉’ ‘哦</p><h5 id="具体怎么写博客呢"><a href="#具体怎么写博客呢" class="headerlink" title="具体怎么写博客呢"></a>具体怎么写博客呢</h5><hr><p>具体怎么写呢，非常简单，就是写.md文件就可以了，使用以下命令来新建一个.md 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;你喜欢的名字都可以&quot;</span><br></pre></td></tr></table></figure><p>或者也可以直接在source/_posts/目录下新建.md文档，效果是一样的。不过需要在里面添加一下title等东西，可以参考用命令生成的.md文档。然后开始写就可以啦，写完还是同样的方式上传即可。</p><h5 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h5><hr><p>当然大家都希望自己的博客功能多样，比如访客量、漂亮的背景图、鼠标点击效果、不同的主题等等，这些我在这里就不一一介绍啦，大家可以去网上看教程，还是非常丰富的。我在这里就给大家简单分享一下如何在博客里方便的插入图片的方法吧。</p><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><hr><p>这个方法是在网上看到的，虽然我没有成功，但还是分享给大家吧。</p><p>首先在_config.yml里找到# Writting大类里的post_asset_folder，将其置为true。</p><p>然后在根目录里运行cmd并运行以下命令，下载一个小插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image –save</span><br></pre></td></tr></table></figure><p>安装完成后，在使用hexo n ”…“创建新博文时，就有一个同样标题的文件夹，把图片放进去即可，然后在.md文档里插入图片时就如下写，方括号里是图片不展示时显示的文字，2是代表你放图片的文件夹名，1是代表图片名字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![...](2/1.jpg)</span><br></pre></td></tr></table></figure><p>虽然本人没有成功，希望大家能够成功啦。</p><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><hr><p>这个方法非常的好用与方便，也不怕掉链子。</p><p>就是使用github来保存自己的图片，然后在.md里引用时就用github网址即可。具体操作如下。</p><p>首先找一个文件夹，里面放你本次.md里需要的图片，并且在github上新建一个专门用来存放图片的仓库。然后在这个文件夹所在的目录使用git bush将这个文件夹push到你的图片仓库里，具体操作如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init # 初始化</span><br><span class="line">git add . # 将该目录所有文件添加，注意这个&quot;.&quot;，也可以指定添加，git add 文件名</span><br><span class="line">git commit -m &quot;...&quot; # 双引号内即你给这个文件夹的备注，可以随意填写，不要省略双引号</span><br><span class="line">git remote add origin 仓库地址 # 后面填写你该仓库的地址。</span><br><span class="line">git push -u origin master # 第一次push时加上-u，后面不用。</span><br></pre></td></tr></table></figure><p>然后完成后，在自己的仓库里找到相应的图片，点击download按钮，会进去一个只有图片的网页，然后右键图片点击复制地址，再在你的.md文档里插入图片时写上网址即可，非常的方便，不用担心本地文件丢失等等问题，希望对大家有帮助。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>终于写完了这篇博客，希望对大家有所帮助呀，当然如果有什么问题也敬请指出来，我的邮箱会留在下方，欢迎随时联系，同时希望大家都能拥有属于自己的博客呀！！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">邮箱：394739138@qq.com</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><hr><p> <a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a> </p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划(DP)——股票问题</title>
      <link href="/2019/11/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E2%80%94%E2%80%94%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="股票问题（简单DP）"><a href="#股票问题（简单DP）" class="headerlink" title="股票问题（简单DP）"></a>股票问题（简单DP）</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><hr><p>本文主要介绍了和DP相关的股票问题，分析比较简单，容易理解，适合刚接触DP的朋友们学习。</p><h3 id="股票Ⅰ"><a href="#股票Ⅰ" class="headerlink" title="股票Ⅰ"></a>股票Ⅰ</h3><h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>如果只允许您最多完成一笔交易（即买入和卖出一股股票），请设计一种算法以找到最大的利润(卖出的价格-买入的价格)。</p><p>请注意，您不能在买股票之前卖出股票。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行一个数n，(1≤n≤10<sup>5</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><hr><p>每组数据一行一个数。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy,sell;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">buy1=<span class="number">-1000000001</span>,sell1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy=<span class="built_in">max</span>(buy,-a[i]);</span><br><span class="line">sell=<span class="built_in">max</span>(sell,buy+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><hr><p>我们直接从DP的角度开始分析这个问题，首先看清题意，只能买入和卖出一股股票，并且卖出必须在买入之后完成。那么我们每一天的选择就是买或者不买或者卖，也就是有两种状态买<kbd>buy</kbd>和卖<kbd>sell</kbd>，而买入股票对应的就是花钱，我们最开始的钱为0，买入后就变会损失也就是<kbd>-a[i]</kbd>，并且当天的总收益就为<kbd>-a[i]</kbd>，也就是<kbd>buy</kbd>的值，卖出后则为收益也就是<kbd>+a[i]</kbd>，并且当天的总收益就为<kbd>buy+a[i]</kbd>。所以我们就考虑当天买和之前买了(即与之前<kbd>buy</kbd>里的值进行比较)哪个收益更高，同时当天卖和之前已经卖了(即与之前<kbd>sell</kbd>里的值进行比较)哪个收益更高即可完成。</p><h4 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>buy = max(buy, -a[i])</li><li>sell = max(sell, buy+a[i])</li></ul><h4 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h4><hr><p>首先观察数据范围发现最终结果是可能超int的，所以对<kbd>buy</kbd>和<kbd>sell</kbd>的定义应为long long，然后是<kbd>buy</kbd>的初始值应该设置为负值而不是0，因为第一次买入的时候此时总收益就为负值。</p><hr><hr><h3 id="股票Ⅱ"><a href="#股票Ⅱ" class="headerlink" title="股票Ⅱ"></a>股票Ⅱ</h3><hr><h4 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>设计算法以找到最大的利润。您可以根据需要完成尽可能多的交易。</p><p>请注意，无法同时进行多项交易（即必须先出售股票才能再次购买）</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行一个数n，(1≤n≤10<sup>5</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><hr><p> 每组数据一行一个数 </p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy,sell;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">buy=<span class="number">-1000000001</span>,sell=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy=<span class="built_in">max</span>(buy,sell-a[i]);</span><br><span class="line">sell=<span class="built_in">max</span>(sell,buy+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><hr><p>我们直接从上一问的思路继续分析，本题是要求利润最大并且可以完成任意多的交易(即可以买了又卖卖了再买)，那我们还是同样分析，买了之后当天的总收益为<kbd>sell-a[i]</kbd>(因为之前是处于卖了之后的状态所以用<kbd>sell</kbd>来减)，然后卖了之后当天的总收益为<kbd>buy-a[i]</kbd>(因为之前是处于买了之后的状态所以用<kbd>buy</kbd>来减)，然后我们考虑每一天的情况即可。</p><h4 id="转移方程-1"><a href="#转移方程-1" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li><p>buy = max(buy, sell-a[i])</p></li><li><p>sell = max(sell, buy+a[i])</p></li></ul><h4 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h4><hr><p>还是一样需要注意数据类型的选择和buy的初始赋值，然后是sell最初值置0才能保证第一次买后总收益的正确性。</p><hr><hr><h3 id="股票Ⅲ"><a href="#股票Ⅲ" class="headerlink" title="股票Ⅲ"></a>股票Ⅲ</h3><hr><h4 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>设计算法以找到最大的利润。您最多可以完成两次交易。</p><p>请注意，无法同时进行多项交易（即必须先出售股票才能再次购买）</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行一个数n，(1≤n≤10<sup>5</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><hr><p> 每组数据一行一个数 </p><h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy1,sell1,buy2,sell2;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">buy1=<span class="number">-1000000001</span>,sell1=<span class="number">0</span>,buy2=<span class="number">-1000000001</span>,sell2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy1=<span class="built_in">max</span>(buy1,-a[i]);</span><br><span class="line">sell1=<span class="built_in">max</span>(sell1,buy1+a[i]);</span><br><span class="line">buy2=<span class="built_in">max</span>(buy2,sell1-a[i]);</span><br><span class="line">sell2=<span class="built_in">max</span>(sell2,buy2+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是延续思路继续分析，本题是要求利润最大并且只能完成两次交易，那我们还是同样分析，因为有两次交易，所以需要4个变量来存，第一次买了之后当天的总收益为<kbd>-a[i]</kbd>(因为相当于之前没有卖出)，然后第一次卖了之后当天的总收益为<kbd>buy1-a[i]</kbd>(因为之前是处于第一次买了之后的状态所以用<kbd>buy1</kbd>来减)，然后第二次买了之后当天的总收益为<kbd>sell1-a[i]</kbd>(因为相当于之前有一次卖出)，然后第二次卖了之后当天的总收益为<kbd>buy2-a[i]</kbd>(因为之前是处于第二次买了之后的状态所以用<kbd>buy2</kbd>来减)，然后我们考虑每一天的情况即可。</p><h4 id="转移方程-2"><a href="#转移方程-2" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>buy1=max(buy1,-a[i]);</li><li>sell1=max(sell1,buy1+a[i]);    </li><li>buy2=max(buy2,sell1-a[i]);</li><li>sell2=max(sell2,buy2+a[i]);</li></ul><h4 id="HINT-2"><a href="#HINT-2" class="headerlink" title="HINT"></a>HINT</h4><hr><p>还是一样需要注意数据类型的选择和sell1、buy1、buy2的初始赋值，然后是sell1最初值置0才能保证第一次买后总收益的正确性。然后是对方程的理解，是怎么样实现的。</p><hr><hr><h3 id="股票Ⅳ"><a href="#股票Ⅳ" class="headerlink" title="股票Ⅳ"></a>股票Ⅳ</h3><hr><h4 id="题面-3"><a href="#题面-3" class="headerlink" title="题面"></a>题面</h4><hr><p>假设您有一个数组，第i个元素是第i天给定股票的价格。</p><p>设计算法以找到最大的利润。您最多可以完成k次交易。</p><p>请注意，无法同时进行多项交易（即必须先出售股票才能再次购买）</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><hr><p>多组输入数据</p><p>每组数据第一行两个数n,k，(1≤n,k≤10<sup>3</sup>)</p><p>接下来一行n个数表示股票的价格(1≤a<sub>i</sub>≤10<sup>9</sup>)</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><hr><p> 每组数据一行一个数 </p><h4 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=m) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k,a[<span class="number">100005</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buy[<span class="number">1005</span>],sell[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">buy[i]=<span class="number">-1000000001</span>;</span><br><span class="line">sell[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">buy[<span class="number">1</span>]=<span class="built_in">max</span>(buy[<span class="number">1</span>],-a[i]);</span><br><span class="line">sell[<span class="number">1</span>]=<span class="built_in">max</span>(sell[<span class="number">1</span>],buy[<span class="number">1</span>]+a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=k;j++)&#123;</span><br><span class="line">buy[j]=<span class="built_in">max</span>(buy[j],sell[j<span class="number">-1</span>]-a[i]);</span><br><span class="line">sell[j]=<span class="built_in">max</span>(sell[j],buy[j]+a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sell[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><hr><p>我们还是相同思路继续分析，本题是要求利润最大并且只能完成k次交易，因为有k次交易，所以需要2k个变量来存，即用两个数组来存即可，第一次买了之后当天的总收益为<kbd>-a[i]</kbd>(因为相当于之前没有卖出)，然后第一次卖了之后当天的总收益为<kbd>buy[1]-a[i]</kbd>(因为之前是处于第一次买了之后的状态所以用<kbd>buy[1]</kbd>来减)，然后第二次买了之后当天的总收益为<kbd>sell[1]-a[i]</kbd>(因为相当于之前有一次卖出)，然后第二次卖了之后当天的总收益为<kbd>buy[2]-a[i]</kbd>(因为之前是处于第二次买了之后的状态所以用<kbd>buy[2]</kbd>]来减)，然后用一个从2-k的循环来实现此过程即可。</p><h4 id="转移方程-3"><a href="#转移方程-3" class="headerlink" title="转移方程"></a>转移方程</h4><hr><ul><li>buy[j]=max(buy[j], sell[j-1]-a[i])</li><li>sell[j]=max(sell[j], buy[j]+a[i])</li></ul><h4 id="HINT-3"><a href="#HINT-3" class="headerlink" title="HINT"></a>HINT</h4><hr><p>还是一样需要注意数据类型的选择和buy[],sell[]的初始赋值，然后是上文的AC代码的循环其实不用把buy[1]、sell[1]单独拿出来讨论的，只是更方便理解。</p><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><hr><p><a href="https://accoding.cn/index" target="_blank" rel="noopener">北航OJ</a></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Time!!!</title>
      <link href="/2019/11/09/hello-world/"/>
      <url>/2019/11/09/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr><p>作为一个大懒鬼以及大菜鸡，今天终于搭好了自己的第一个博客，<strong>太不容易了吧</strong>，之后肯定也会一直更新的啦，主要还是关于算法以及硬件基础方面的东西啦，当然要是我觉得有用的东西，我也会写在博客里供大家参考，希望对大家有用哦；不过主要本人水平实在有限，大家就当看着玩玩啦，请大家多多指教哦！</p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 简介 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
